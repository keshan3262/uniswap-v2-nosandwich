{
  "language": "Solidity",
  "sources": {
    "@uniswap/lib/contracts/libraries/Babylonian.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\n\npragma solidity >=0.4.0;\n\n// computes square roots using the babylonian method\n// https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method\nlibrary Babylonian {\n    // credit for this implementation goes to\n    // https://github.com/abdk-consulting/abdk-libraries-solidity/blob/master/ABDKMath64x64.sol#L687\n    function sqrt(uint256 x) internal pure returns (uint256) {\n        if (x == 0) return 0;\n        // this block is equivalent to r = uint256(1) << (BitMath.mostSignificantBit(x) / 2);\n        // however that code costs significantly more gas\n        uint256 xx = x;\n        uint256 r = 1;\n        if (xx >= 0x100000000000000000000000000000000) {\n            xx >>= 128;\n            r <<= 64;\n        }\n        if (xx >= 0x10000000000000000) {\n            xx >>= 64;\n            r <<= 32;\n        }\n        if (xx >= 0x100000000) {\n            xx >>= 32;\n            r <<= 16;\n        }\n        if (xx >= 0x10000) {\n            xx >>= 16;\n            r <<= 8;\n        }\n        if (xx >= 0x100) {\n            xx >>= 8;\n            r <<= 4;\n        }\n        if (xx >= 0x10) {\n            xx >>= 4;\n            r <<= 2;\n        }\n        if (xx >= 0x8) {\n            r <<= 1;\n        }\n        r = (r + x / r) >> 1;\n        r = (r + x / r) >> 1;\n        r = (r + x / r) >> 1;\n        r = (r + x / r) >> 1;\n        r = (r + x / r) >> 1;\n        r = (r + x / r) >> 1;\n        r = (r + x / r) >> 1; // Seven iterations should be enough\n        uint256 r1 = x / r;\n        return (r < r1 ? r : r1);\n    }\n}\n"
    },
    "@uniswap/lib/contracts/libraries/BitMath.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\npragma solidity >=0.5.0;\n\nlibrary BitMath {\n    // returns the 0 indexed position of the most significant bit of the input x\n    // s.t. x >= 2**msb and x < 2**(msb+1)\n    function mostSignificantBit(uint256 x) internal pure returns (uint8 r) {\n        require(x > 0, 'BitMath::mostSignificantBit: zero');\n\n        if (x >= 0x100000000000000000000000000000000) {\n            x >>= 128;\n            r += 128;\n        }\n        if (x >= 0x10000000000000000) {\n            x >>= 64;\n            r += 64;\n        }\n        if (x >= 0x100000000) {\n            x >>= 32;\n            r += 32;\n        }\n        if (x >= 0x10000) {\n            x >>= 16;\n            r += 16;\n        }\n        if (x >= 0x100) {\n            x >>= 8;\n            r += 8;\n        }\n        if (x >= 0x10) {\n            x >>= 4;\n            r += 4;\n        }\n        if (x >= 0x4) {\n            x >>= 2;\n            r += 2;\n        }\n        if (x >= 0x2) r += 1;\n    }\n\n    // returns the 0 indexed position of the least significant bit of the input x\n    // s.t. (x & 2**lsb) != 0 and (x & (2**(lsb) - 1)) == 0)\n    // i.e. the bit at the index is set and the mask of all lower bits is 0\n    function leastSignificantBit(uint256 x) internal pure returns (uint8 r) {\n        require(x > 0, 'BitMath::leastSignificantBit: zero');\n\n        r = 255;\n        if (x & uint128(-1) > 0) {\n            r -= 128;\n        } else {\n            x >>= 128;\n        }\n        if (x & uint64(-1) > 0) {\n            r -= 64;\n        } else {\n            x >>= 64;\n        }\n        if (x & uint32(-1) > 0) {\n            r -= 32;\n        } else {\n            x >>= 32;\n        }\n        if (x & uint16(-1) > 0) {\n            r -= 16;\n        } else {\n            x >>= 16;\n        }\n        if (x & uint8(-1) > 0) {\n            r -= 8;\n        } else {\n            x >>= 8;\n        }\n        if (x & 0xf > 0) {\n            r -= 4;\n        } else {\n            x >>= 4;\n        }\n        if (x & 0x3 > 0) {\n            r -= 2;\n        } else {\n            x >>= 2;\n        }\n        if (x & 0x1 > 0) r -= 1;\n    }\n}\n"
    },
    "@uniswap/lib/contracts/libraries/FixedPoint.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\npragma solidity >=0.4.0;\n\nimport './FullMath.sol';\nimport './Babylonian.sol';\nimport './BitMath.sol';\n\n// a library for handling binary fixed point numbers (https://en.wikipedia.org/wiki/Q_(number_format))\nlibrary FixedPoint {\n    // range: [0, 2**112 - 1]\n    // resolution: 1 / 2**112\n    struct uq112x112 {\n        uint224 _x;\n    }\n\n    // range: [0, 2**144 - 1]\n    // resolution: 1 / 2**112\n    struct uq144x112 {\n        uint256 _x;\n    }\n\n    uint8 public constant RESOLUTION = 112;\n    uint256 public constant Q112 = 0x10000000000000000000000000000; // 2**112\n    uint256 private constant Q224 = 0x100000000000000000000000000000000000000000000000000000000; // 2**224\n    uint256 private constant LOWER_MASK = 0xffffffffffffffffffffffffffff; // decimal of UQ*x112 (lower 112 bits)\n\n    // encode a uint112 as a UQ112x112\n    function encode(uint112 x) internal pure returns (uq112x112 memory) {\n        return uq112x112(uint224(x) << RESOLUTION);\n    }\n\n    // encodes a uint144 as a UQ144x112\n    function encode144(uint144 x) internal pure returns (uq144x112 memory) {\n        return uq144x112(uint256(x) << RESOLUTION);\n    }\n\n    // decode a UQ112x112 into a uint112 by truncating after the radix point\n    function decode(uq112x112 memory self) internal pure returns (uint112) {\n        return uint112(self._x >> RESOLUTION);\n    }\n\n    // decode a UQ144x112 into a uint144 by truncating after the radix point\n    function decode144(uq144x112 memory self) internal pure returns (uint144) {\n        return uint144(self._x >> RESOLUTION);\n    }\n\n    // multiply a UQ112x112 by a uint, returning a UQ144x112\n    // reverts on overflow\n    function mul(uq112x112 memory self, uint256 y) internal pure returns (uq144x112 memory) {\n        uint256 z = 0;\n        require(y == 0 || (z = self._x * y) / y == self._x, 'FixedPoint::mul: overflow');\n        return uq144x112(z);\n    }\n\n    // multiply a UQ112x112 by an int and decode, returning an int\n    // reverts on overflow\n    function muli(uq112x112 memory self, int256 y) internal pure returns (int256) {\n        uint256 z = FullMath.mulDiv(self._x, uint256(y < 0 ? -y : y), Q112);\n        require(z < 2**255, 'FixedPoint::muli: overflow');\n        return y < 0 ? -int256(z) : int256(z);\n    }\n\n    // multiply a UQ112x112 by a UQ112x112, returning a UQ112x112\n    // lossy\n    function muluq(uq112x112 memory self, uq112x112 memory other) internal pure returns (uq112x112 memory) {\n        if (self._x == 0 || other._x == 0) {\n            return uq112x112(0);\n        }\n        uint112 upper_self = uint112(self._x >> RESOLUTION); // * 2^0\n        uint112 lower_self = uint112(self._x & LOWER_MASK); // * 2^-112\n        uint112 upper_other = uint112(other._x >> RESOLUTION); // * 2^0\n        uint112 lower_other = uint112(other._x & LOWER_MASK); // * 2^-112\n\n        // partial products\n        uint224 upper = uint224(upper_self) * upper_other; // * 2^0\n        uint224 lower = uint224(lower_self) * lower_other; // * 2^-224\n        uint224 uppers_lowero = uint224(upper_self) * lower_other; // * 2^-112\n        uint224 uppero_lowers = uint224(upper_other) * lower_self; // * 2^-112\n\n        // so the bit shift does not overflow\n        require(upper <= uint112(-1), 'FixedPoint::muluq: upper overflow');\n\n        // this cannot exceed 256 bits, all values are 224 bits\n        uint256 sum = uint256(upper << RESOLUTION) + uppers_lowero + uppero_lowers + (lower >> RESOLUTION);\n\n        // so the cast does not overflow\n        require(sum <= uint224(-1), 'FixedPoint::muluq: sum overflow');\n\n        return uq112x112(uint224(sum));\n    }\n\n    // divide a UQ112x112 by a UQ112x112, returning a UQ112x112\n    function divuq(uq112x112 memory self, uq112x112 memory other) internal pure returns (uq112x112 memory) {\n        require(other._x > 0, 'FixedPoint::divuq: division by zero');\n        if (self._x == other._x) {\n            return uq112x112(uint224(Q112));\n        }\n        if (self._x <= uint144(-1)) {\n            uint256 value = (uint256(self._x) << RESOLUTION) / other._x;\n            require(value <= uint224(-1), 'FixedPoint::divuq: overflow');\n            return uq112x112(uint224(value));\n        }\n\n        uint256 result = FullMath.mulDiv(Q112, self._x, other._x);\n        require(result <= uint224(-1), 'FixedPoint::divuq: overflow');\n        return uq112x112(uint224(result));\n    }\n\n    // returns a UQ112x112 which represents the ratio of the numerator to the denominator\n    // can be lossy\n    function fraction(uint256 numerator, uint256 denominator) internal pure returns (uq112x112 memory) {\n        require(denominator > 0, 'FixedPoint::fraction: division by zero');\n        if (numerator == 0) return FixedPoint.uq112x112(0);\n\n        if (numerator <= uint144(-1)) {\n            uint256 result = (numerator << RESOLUTION) / denominator;\n            require(result <= uint224(-1), 'FixedPoint::fraction: overflow');\n            return uq112x112(uint224(result));\n        } else {\n            uint256 result = FullMath.mulDiv(numerator, Q112, denominator);\n            require(result <= uint224(-1), 'FixedPoint::fraction: overflow');\n            return uq112x112(uint224(result));\n        }\n    }\n\n    // take the reciprocal of a UQ112x112\n    // reverts on overflow\n    // lossy\n    function reciprocal(uq112x112 memory self) internal pure returns (uq112x112 memory) {\n        require(self._x != 0, 'FixedPoint::reciprocal: reciprocal of zero');\n        require(self._x != 1, 'FixedPoint::reciprocal: overflow');\n        return uq112x112(uint224(Q224 / self._x));\n    }\n\n    // square root of a UQ112x112\n    // lossy between 0/1 and 40 bits\n    function sqrt(uq112x112 memory self) internal pure returns (uq112x112 memory) {\n        if (self._x <= uint144(-1)) {\n            return uq112x112(uint224(Babylonian.sqrt(uint256(self._x) << 112)));\n        }\n\n        uint8 safeShiftBits = 255 - BitMath.mostSignificantBit(self._x);\n        safeShiftBits -= safeShiftBits % 2;\n        return uq112x112(uint224(Babylonian.sqrt(uint256(self._x) << safeShiftBits) << ((112 - safeShiftBits) / 2)));\n    }\n}\n"
    },
    "@uniswap/lib/contracts/libraries/FullMath.sol": {
      "content": "// SPDX-License-Identifier: CC-BY-4.0\npragma solidity >=0.4.0;\n\n// taken from https://medium.com/coinmonks/math-in-solidity-part-3-percents-and-proportions-4db014e080b1\n// license is CC-BY-4.0\nlibrary FullMath {\n    function fullMul(uint256 x, uint256 y) internal pure returns (uint256 l, uint256 h) {\n        uint256 mm = mulmod(x, y, uint256(-1));\n        l = x * y;\n        h = mm - l;\n        if (mm < l) h -= 1;\n    }\n\n    function fullDiv(\n        uint256 l,\n        uint256 h,\n        uint256 d\n    ) private pure returns (uint256) {\n        uint256 pow2 = d & -d;\n        d /= pow2;\n        l /= pow2;\n        l += h * ((-pow2) / pow2 + 1);\n        uint256 r = 1;\n        r *= 2 - d * r;\n        r *= 2 - d * r;\n        r *= 2 - d * r;\n        r *= 2 - d * r;\n        r *= 2 - d * r;\n        r *= 2 - d * r;\n        r *= 2 - d * r;\n        r *= 2 - d * r;\n        return l * r;\n    }\n\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 d\n    ) internal pure returns (uint256) {\n        (uint256 l, uint256 h) = fullMul(x, y);\n\n        uint256 mm = mulmod(x, y, d);\n        if (mm > l) h -= 1;\n        l -= mm;\n\n        if (h == 0) return l / d;\n\n        require(h < d, 'FullMath: FULLDIV_OVERFLOW');\n        return fullDiv(l, h, d);\n    }\n}\n"
    },
    "@uniswap/lib/contracts/libraries/TransferHelper.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\n\npragma solidity >=0.6.0;\n\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\nlibrary TransferHelper {\n    function safeApprove(\n        address token,\n        address to,\n        uint256 value\n    ) internal {\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\n        require(\n            success && (data.length == 0 || abi.decode(data, (bool))),\n            'TransferHelper::safeApprove: approve failed'\n        );\n    }\n\n    function safeTransfer(\n        address token,\n        address to,\n        uint256 value\n    ) internal {\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\n        require(\n            success && (data.length == 0 || abi.decode(data, (bool))),\n            'TransferHelper::safeTransfer: transfer failed'\n        );\n    }\n\n    function safeTransferFrom(\n        address token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\n        require(\n            success && (data.length == 0 || abi.decode(data, (bool))),\n            'TransferHelper::transferFrom: transferFrom failed'\n        );\n    }\n\n    function safeTransferETH(address to, uint256 value) internal {\n        (bool success, ) = to.call{value: value}(new bytes(0));\n        require(success, 'TransferHelper::safeTransferETH: ETH transfer failed');\n    }\n}\n"
    },
    "contracts/ButterERC1155.sol": {
      "content": "pragma solidity =0.6.6;\n\nimport \"./interfaces/IButterERC1155.sol\";\nimport \"./libraries/SafeMath.sol\";\nimport \"./ERC1155.sol\";\n\ncontract ButterERC1155 is IButterERC1155, ERC1155Mintable {\n\tusing SafeMath for uint;\n\n\tuint8 public constant decimals = 18;\n\tbytes32 public override DOMAIN_SEPARATOR;\n\tstring public constant name = \"ButterDex\";\n\tconstructor() public ERC1155Mintable() {\n\t\tuint chainId;\n\t\tassembly {\n\t\t\tchainId := chainid()\n\t\t}\n\t\tDOMAIN_SEPARATOR = keccak256(\n\t\t\tabi.encode(\n\t\t\t\tkeccak256(\n\t\t\t\t\t\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\"\n\t\t\t\t),\n\t\t\t\tkeccak256(bytes(name)),\n\t\t\t\tkeccak256(bytes(\"1\")),\n\t\t\t\tchainId,\n\t\t\t\taddress(this)\n\t\t\t)\n\t\t);\n\t}\n\n\tfunction calculateNFTId(\n\t\tuint256 tickLimit,\n\t\tuint256 blockNumber\n\t) public view override returns (uint256) {\n\t\t// TODO: implement this\n\t\treturn 0;\n\t}\n\n\tfunction mint(\n\t\taddress to,\n\t\tuint256 tickLimit,\n\t\tuint256 value\n\t) external override {\n\t\t// TODO: implement this\n\t\tuint id = calculateNFTId(tickLimit, block.number);\n\t\taddress[] memory recipients = new address[](1);\n\t\trecipients[0] = to;\n\t\tuint256[] memory values = new uint256[](1);\n\t\tvalues[0] = value;\n\t\t_mint(id, recipients, values);\n\t}\n}\n"
    },
    "contracts/ButterERC20.sol": {
      "content": "pragma solidity =0.6.6;\n\nimport './interfaces/IButterERC20.sol';\nimport './libraries/SafeMath.sol';\n\nabstract contract ButterERC20 is IButterERC20 {\n    using SafeMath for uint;\n\n    string public constant override name = 'Uniswap V2';\n    string public constant override symbol = 'UNI-V2';\n    uint8 public constant override decimals = 18;\n    uint  public override totalSupply;\n    mapping(address => uint) public override balanceOf;\n    mapping(address => mapping(address => uint)) public override allowance;\n\n    bytes32 public override DOMAIN_SEPARATOR;\n    // keccak256(\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\");\n    bytes32 public constant override PERMIT_TYPEHASH = 0x6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9;\n    mapping(address => uint) public override nonces;\n\n    event Approval(address indexed owner, address indexed spender, uint value);\n    event Transfer(address indexed from, address indexed to, uint value);\n\n    constructor() public {\n        uint chainId;\n        assembly {\n            chainId := chainid()\n        }\n        DOMAIN_SEPARATOR = keccak256(\n            abi.encode(\n                keccak256('EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)'),\n                keccak256(bytes(name)),\n                keccak256(bytes('1')),\n                chainId,\n                address(this)\n            )\n        );\n    }\n\n    function _mint(address to, uint value) internal {\n        totalSupply = totalSupply.add(value);\n        balanceOf[to] = balanceOf[to].add(value);\n        emit Transfer(address(0), to, value);\n    }\n\n    function _burn(address from, uint value) internal {\n        balanceOf[from] = balanceOf[from].sub(value);\n        totalSupply = totalSupply.sub(value);\n        emit Transfer(from, address(0), value);\n    }\n\n    function _approve(address owner, address spender, uint value) private {\n        allowance[owner][spender] = value;\n        emit Approval(owner, spender, value);\n    }\n\n    function _transfer(address from, address to, uint value) private {\n        balanceOf[from] = balanceOf[from].sub(value);\n        balanceOf[to] = balanceOf[to].add(value);\n        emit Transfer(from, to, value);\n    }\n\n    function approve(address spender, uint value) external override returns (bool) {\n        _approve(msg.sender, spender, value);\n        return true;\n    }\n\n    function transfer(address to, uint value) external override returns (bool) {\n        _transfer(msg.sender, to, value);\n        return true;\n    }\n\n    function transferFrom(address from, address to, uint value) external override returns (bool) {\n        if (allowance[from][msg.sender] != uint(-1)) {\n            allowance[from][msg.sender] = allowance[from][msg.sender].sub(value);\n        }\n        _transfer(from, to, value);\n        return true;\n    }\n\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external override {\n        require(deadline >= block.timestamp, 'Butter: EXPIRED');\n        bytes32 digest = keccak256(\n            abi.encodePacked(\n                '\\x19\\x01',\n                DOMAIN_SEPARATOR,\n                keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, value, nonces[owner]++, deadline))\n            )\n        );\n        address recoveredAddress = ecrecover(digest, v, r, s);\n        require(recoveredAddress != address(0) && recoveredAddress == owner, 'Butter: INVALID_SIGNATURE');\n        _approve(owner, spender, value);\n    }\n}\n"
    },
    "contracts/ButterFactory.sol": {
      "content": "pragma solidity =0.6.6;\n\nimport './interfaces/IButterFactory.sol';\nimport './ButterPair.sol';\n\ncontract ButterFactory is IButterFactory {\n    address public override feeTo;\n    address public override feeToSetter;\n    bytes32 public constant INIT_CODE_HASH = keccak256(abi.encodePacked(type(ButterPair).creationCode));\n\n    mapping(address => mapping(address => address)) public override getPair;\n    address[] public override allPairs;\n\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\n\n    constructor(address _feeToSetter) public {\n        feeToSetter = _feeToSetter;\n    }\n\n    function allPairsLength() external view override returns (uint) {\n        return allPairs.length;\n    }\n\n    function createPair(address tokenA, address tokenB) external override returns (address pair) {\n        require(tokenA != tokenB, 'Butter: IDENTICAL_ADDRESSES');\n        (address token0, address token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\n        require(token0 != address(0), 'Butter: ZERO_ADDRESS');\n        require(getPair[token0][token1] == address(0), 'Butter: PAIR_EXISTS'); // single check is sufficient\n        bytes memory bytecode = type(ButterPair).creationCode;\n        bytes32 salt = keccak256(abi.encodePacked(token0, token1));\n        assembly {\n            pair := create2(0, add(bytecode, 32), mload(bytecode), salt)\n        }\n        IButterPair(pair).initialize(token0, token1);\n        getPair[token0][token1] = pair;\n        getPair[token1][token0] = pair; // populate mapping in the reverse direction\n        allPairs.push(pair);\n        emit PairCreated(token0, token1, pair, allPairs.length);\n    }\n\n    function setFeeTo(address _feeTo) external override {\n        require(msg.sender == feeToSetter, 'Butter: FORBIDDEN');\n        feeTo = _feeTo;\n    }\n\n    function setFeeToSetter(address _feeToSetter) external override {\n        require(msg.sender == feeToSetter, 'Butter: FORBIDDEN');\n        feeToSetter = _feeToSetter;\n    }\n}\n"
    },
    "contracts/ButterPair.sol": {
      "content": "pragma solidity =0.6.6;\n\nimport \"./interfaces/IButterPair.sol\";\nimport \"./ButterERC20.sol\";\nimport \"./libraries/Math.sol\";\nimport \"./libraries/UQ112x112.sol\";\nimport \"./interfaces/IERC20.sol\";\nimport \"./interfaces/IButterFactory.sol\";\nimport \"./interfaces/IButterCallee.sol\";\nimport \"./interfaces/IButterERC1155.sol\";\n\nimport \"./libraries/LowGasSafeMath.sol\";\nimport \"./libraries/SafeCast.sol\";\nimport \"./libraries/Tick.sol\";\nimport \"./libraries/TickBitmap.sol\";\n\nimport \"./ButterERC1155.sol\";\n\ncontract ButterPair is IButterPair, ButterERC20 {\n\tusing SafeMath for uint;\n\tusing UQ112x112 for uint224;\n\n\tusing Tick for mapping(int24 => Tick.Info);\n\tusing TickBitmap for mapping(int16 => uint256);\n\n\tuint public constant override MINIMUM_LIQUIDITY = 10 ** 3;\n\tbytes4 private constant SELECTOR =\n\t\tbytes4(keccak256(bytes(\"transfer(address,uint256)\")));\n\n\taddress public override factory;\n\taddress public override token0;\n\taddress public override token1;\n\n\tIButterERC1155 public token0SwapShare;\n\tIButterERC1155 public token1SwapShare;\n\n\tuint112 private reserve0; // uses single storage slot, accessible via getReserves\n\tuint112 private reserve1; // uses single storage slot, accessible via getReserves\n\tuint112 private pendingReserve0; // uses single storage slot, accessible via getReserves\n\tuint112 private pendingReserve1; // uses single storage slot, accessible via getReserves\n\tuint32 private blockTimestampLast; // uses single storage slot, accessible via getReserves\n\n\tuint public override price0CumulativeLast;\n\tuint public override price1CumulativeLast;\n\tuint public override kLast; // reserve0 * reserve1, as of immediately after the most recent liquidity event\n\n\tstruct Slot0 {\n\t\tuint160 lastBlock;\n\t\tint24 lastSellTick;\n\t\tint24 lastBuyTick;\n\t}\n\n\tint24 public immutable tickSpacing = 10; // TODO: set on deployment\n\tSlot0 public slot0;\n\n\tmapping(int24 => Tick.Info) public ticks;\n\tmapping(int16 => uint256) public tickBitmap;\n\n\tuint private unlocked = 1;\n\tmodifier lock() {\n\t\trequire(unlocked == 1, \"Butter: LOCKED\");\n\t\tunlocked = 0;\n\t\t_;\n\t\tunlocked = 1;\n\t}\n\n\tfunction getReserves()\n\t\tpublic\n\t\tview\n\t\toverride\n\t\treturns (\n\t\t\tuint112 _reserve0,\n\t\t\tuint112 _reserve1,\n\t\t\tuint112 _pendingReserve0,\n\t\t\tuint112 _pendingReserve1,\n\t\t\tuint32 _blockTimestampLast\n\t\t)\n\t{\n\t\t_reserve0 = reserve0;\n\t\t_reserve1 = reserve1;\n\t\t_pendingReserve0 = pendingReserve0;\n\t\t_pendingReserve1 = pendingReserve1;\n\t\t_blockTimestampLast = blockTimestampLast;\n\t}\n\n\tfunction _safeTransfer(address token, address to, uint value) private {\n\t\t(bool success, bytes memory data) = token.call(\n\t\t\tabi.encodeWithSelector(SELECTOR, to, value)\n\t\t);\n\t\trequire(\n\t\t\tsuccess && (data.length == 0 || abi.decode(data, (bool))),\n\t\t\t\"Butter: TRANSFER_FAILED\"\n\t\t);\n\t}\n\n\tevent Mint(address indexed sender, uint amount0, uint amount1);\n\tevent Burn(\n\t\taddress indexed sender,\n\t\tuint amount0,\n\t\tuint amount1,\n\t\taddress indexed to\n\t);\n\tevent Swap(\n\t\taddress indexed sender,\n\t\tuint amount0In,\n\t\tuint amount1In,\n\t\tuint amount0Out,\n\t\tuint amount1Out,\n\t\taddress indexed to\n\t);\n\tevent SwapIntention(\n\t\taddress indexed sender,\n\t\tuint amount0In,\n\t\tuint amount1In,\n\t\taddress indexed to\n\t);\n\tevent Sync(uint112 reserve0, uint112 reserve1);\n\n\tconstructor() public {\n\t\tfactory = msg.sender;\n\t\t// token0SwapShare = new ButterERC1155(address(this), token0);\n\t\t// token1SwapShare = new ButterERC1155(address(this), token1);\n\t}\n\n\t// called once by the factory at time of deployment\n\tfunction initialize(address _token0, address _token1) external override {\n\t\trequire(msg.sender == factory, \"Butter: FORBIDDEN\"); // sufficient check\n\t\ttoken0 = _token0;\n\t\ttoken1 = _token1;\n\t}\n\n\tfunction _doClearing() private {}\n\n\t// update reserves and, on the first call per block, price accumulators\n\tfunction _update(\n\t\tuint balance0,\n\t\tuint balance1,\n\t\tuint112 _reserve0,\n\t\tuint112 _reserve1,\n\t\tuint112 _pendingReserve0,\n\t\tuint112 _pendingReserve1\n\t) private {\n\t\trequire(\n\t\t\tbalance0 <= uint112(-1) && balance1 <= uint112(-1),\n\t\t\t\"Butter: OVERFLOW\"\n\t\t);\n\t\tuint32 blockTimestamp = uint32(block.timestamp % 2 ** 32);\n\t\tuint32 timeElapsed = blockTimestamp - blockTimestampLast; // overflow is desired\n\t\tif (timeElapsed > 0 && _reserve0 != 0 && _reserve1 != 0) {\n\t\t\t// * never overflows, and + overflow is desired\n\t\t\tprice0CumulativeLast +=\n\t\t\t\tuint(UQ112x112.encode(_reserve1).uqdiv(_reserve0)) *\n\t\t\t\ttimeElapsed;\n\t\t\tprice1CumulativeLast +=\n\t\t\t\tuint(UQ112x112.encode(_reserve0).uqdiv(_reserve1)) *\n\t\t\t\ttimeElapsed;\n\t\t}\n\t\treserve0 = uint112(balance0);\n\t\treserve1 = uint112(balance1);\n\t\tpendingReserve0 = uint112(_pendingReserve0);\n\t\tpendingReserve1 = uint112(_pendingReserve1);\n\t\tblockTimestampLast = blockTimestamp;\n\t\temit Sync(reserve0, reserve1);\n\t}\n\n\t// this low-level function should be called from a contract which performs important safety checks\n\tfunction mint(address to) external override lock returns (uint liquidity) {\n\t\t(\n\t\t\tuint112 _reserve0,\n\t\t\tuint112 _reserve1,\n\t\t\tuint112 _pendingReserve0,\n\t\t\tuint112 _pendingReserve1,\n\n\t\t) = getReserves(); // gas savings\n\t\tuint balance0 = IERC20(token0).balanceOf(address(this));\n\t\tuint balance1 = IERC20(token1).balanceOf(address(this));\n\t\tuint amount0 = balance0.sub(_reserve0);\n\t\tuint amount1 = balance1.sub(_reserve1);\n\t\tuint _totalSupply = totalSupply; // gas savings, must be defined here since totalSupply can update in _mintFee\n\t\tif (_totalSupply == 0) {\n\t\t\tliquidity = Math.sqrt(amount0.mul(amount1)).sub(MINIMUM_LIQUIDITY);\n\t\t\t_mint(address(0), MINIMUM_LIQUIDITY); // permanently lock the first MINIMUM_LIQUIDITY tokens\n\t\t} else {\n\t\t\tliquidity = Math.min(\n\t\t\t\tamount0.mul(_totalSupply) / _reserve0,\n\t\t\t\tamount1.mul(_totalSupply) / _reserve1\n\t\t\t);\n\t\t}\n\t\trequire(liquidity > 0, \"Butter: INSUFFICIENT_LIQUIDITY_MINTED\");\n\t\t_mint(to, liquidity);\n\n\t\t_update(\n\t\t\tbalance0,\n\t\t\tbalance1,\n\t\t\t_reserve0,\n\t\t\t_reserve1,\n\t\t\t_pendingReserve0,\n\t\t\t_pendingReserve1\n\t\t);\n\t\temit Mint(msg.sender, amount0, amount1);\n\t}\n\n\t// this low-level function should be called from a contract which performs important safety checks\n\tfunction burn(\n\t\taddress to\n\t) external override lock returns (uint amount0, uint amount1) {\n\t\t(\n\t\t\tuint112 _reserve0,\n\t\t\tuint112 _reserve1,\n\t\t\tuint112 _pendingReserve0,\n\t\t\tuint112 _pendingReserve1,\n\n\t\t) = getReserves(); // gas savings\n\t\taddress _token0 = token0; // gas savings\n\t\taddress _token1 = token1; // gas savings\n\t\tuint balance0 = IERC20(_token0).balanceOf(address(this));\n\t\tuint balance1 = IERC20(_token1).balanceOf(address(this));\n\t\tuint liquidity = balanceOf[address(this)];\n\n\t\tuint _totalSupply = totalSupply; // gas savings, must be defined here since totalSupply can update in _mintFee\n\t\tamount0 = liquidity.mul(balance0) / _totalSupply; // using balances ensures pro-rata distribution\n\t\tamount1 = liquidity.mul(balance1) / _totalSupply; // using balances ensures pro-rata distribution\n\t\trequire(\n\t\t\tamount0 > 0 && amount1 > 0,\n\t\t\t\"Butter: INSUFFICIENT_LIQUIDITY_BURNED\"\n\t\t);\n\t\t_burn(address(this), liquidity);\n\t\t_safeTransfer(_token0, to, amount0);\n\t\t_safeTransfer(_token1, to, amount1);\n\t\tbalance0 = IERC20(_token0).balanceOf(address(this));\n\t\tbalance1 = IERC20(_token1).balanceOf(address(this));\n\n\t\t_update(\n\t\t\tbalance0,\n\t\t\tbalance1,\n\t\t\t_reserve0,\n\t\t\t_reserve1,\n\t\t\t_pendingReserve0,\n\t\t\t_pendingReserve1\n\t\t);\n\t\temit Burn(msg.sender, amount0, amount1, to);\n\t}\n\n\t// this low-level function should be called from a contract which performs important safety checks\n\tfunction swap(\n\t\tuint amount0OutLimit,\n\t\tuint amount1OutLimit,\n\t\taddress to,\n\t\tbytes calldata data\n\t) external override lock {\n\t\trequire(\n\t\t\tamount0OutLimit > 0 || amount1OutLimit > 0,\n\t\t\t\"Butter: INSUFFICIENT_OUTPUT_AMOUNT\"\n\t\t);\n\t\trequire(\n\t\t\t!(amount0OutLimit > 0 && amount1OutLimit > 0),\n\t\t\t\"Butter: INVALID_OUTPUT_AMOUNT\"\n\t\t);\n\t\t// TODO: check amount0OutLimit, amount1OutLimit\n\n\t\t_doClearing();\n\n\t\t(\n\t\t\tuint112 _reserve0,\n\t\t\tuint112 _reserve1,\n\t\t\tuint112 _pendingReserve0,\n\t\t\tuint112 _pendingReserve1,\n\n\t\t) = getReserves(); // gas savings\n\n\t\tuint balance0;\n\t\tuint balance1;\n\t\t{\n\t\t\t// scope for _token{0,1}, avoids stack too deep errors\n\t\t\taddress _token0 = token0;\n\t\t\taddress _token1 = token1;\n\t\t\trequire(to != _token0 && to != _token1, \"Butter: INVALID_TO\");\n\t\t\tbalance0 = IERC20(_token0).balanceOf(address(this));\n\t\t\tbalance1 = IERC20(_token1).balanceOf(address(this));\n\t\t}\n\t\tuint amount0In = balance0 > _reserve0 + _pendingReserve0\n\t\t\t? balance0 - (_reserve0 + _pendingReserve0)\n\t\t\t: 0;\n\t\tuint amount1In = balance1 > _reserve1 + _pendingReserve1\n\t\t\t? balance1 - (_reserve1 + _pendingReserve1)\n\t\t\t: 0;\n\t\trequire(\n\t\t\tamount0In <= uint112(-1) && amount1In <= uint112(-1),\n\t\t\t\"Butter: OVERFLOW\"\n\t\t);\n\n\t\t_pendingReserve0 = _pendingReserve0 + uint112(amount0In);\n\t\t_pendingReserve1 = _pendingReserve1 + uint112(amount1In);\n\t\trequire(\n\t\t\tamount0In > 0 || amount1In > 0,\n\t\t\t\"Butter: INSUFFICIENT_INPUT_AMOUNT\"\n\t\t);\n\t\trequire(\n\t\t\t!(amount0In > 0 && amount1In > 0),\n\t\t\t\"Butter: INVALID_INPUT_AMOUNT\"\n\t\t);\n\n\t\tif (amount0In > 0) {\n\t\t\ttoken0SwapShare.mint(to, amount1OutLimit, amount0In);\n\t\t}\n\t\tif (amount1In > 0) {\n\t\t\ttoken1SwapShare.mint(to, amount0OutLimit, amount1In);\n\t\t}\n\n\t\t// // Update TICKs\n\t\t// flippedLower = ticks.update(\n\t\t//         tickLower,\n\t\t//         tick,\n\t\t//         liquidityDelta,\n\t\t//         _feeGrowthGlobal0X128,\n\t\t//         _feeGrowthGlobal1X128,\n\t\t//         secondsPerLiquidityCumulativeX128,\n\t\t//         tickCumulative,\n\t\t//         time,\n\t\t//         false,\n\t\t//         maxLiquidityPerTick\n\t\t//     );\n\t\t//     flippedUpper = ticks.update(\n\t\t//         tickUpper,\n\t\t//         tick,\n\t\t//         liquidityDelta,\n\t\t//         _feeGrowthGlobal0X128,\n\t\t//         _feeGrowthGlobal1X128,\n\t\t//         secondsPerLiquidityCumulativeX128,\n\t\t//         tickCumulative,\n\t\t//         time,\n\t\t//         true,\n\t\t//         maxLiquidityPerTick\n\t\t//     );\n\n\t\t//     if (flippedLower) {\n\t\t//         tickBitmap.flipTick(tickLower, tickSpacing);\n\t\t//     }\n\t\t//     if (flippedUpper) {\n\t\t//         tickBitmap.flipTick(tickUpper, tickSpacing);\n\t\t//     }\n\n\t\t_update(\n\t\t\tbalance0,\n\t\t\tbalance1,\n\t\t\t_reserve0,\n\t\t\t_reserve1,\n\t\t\t_pendingReserve0,\n\t\t\t_pendingReserve1\n\t\t);\n\t\temit SwapIntention(msg.sender, amount0In, amount1In, to);\n\t}\n\n\t// function swap(\n\t// \tuint amount0Out,\n\t// \tuint amount1Out,\n\t// \taddress to,\n\t// \tbytes calldata data\n\t// ) external override lock {\n\t// \trequire(\n\t// \t\tamount0Out > 0 || amount1Out > 0,\n\t// \t\t\"Butter: INSUFFICIENT_OUTPUT_AMOUNT\"\n\t// \t);\n\t// \trequire(\n\t// \t\t!(amount0Out > 0 && amount1Out > 0),\n\t// \t\t\"Butter: INVALID_OUTPUT_AMOUNT\"\n\t// \t);\n\n\t// \t_doClearing();\n\n\t// \t(uint112 _reserve0, uint112 _reserve1, ) = getReserves(); // gas savings\n\t// \trequire(\n\t// \t\tamount0Out < _reserve0 && amount1Out < _reserve1,\n\t// \t\t\"Butter: INSUFFICIENT_LIQUIDITY\"\n\t// \t);\n\n\t// \tuint balance0;\n\t// \tuint balance1;\n\t// \t{\n\t// \t\t// scope for _token{0,1}, avoids stack too deep errors\n\t// \t\taddress _token0 = token0;\n\t// \t\taddress _token1 = token1;\n\t// \t\trequire(to != _token0 && to != _token1, \"Butter: INVALID_TO\");\n\t// \t\tif (amount0Out > 0) _safeTransfer(_token0, to, amount0Out); // optimistically transfer tokens\n\t// \t\tif (amount1Out > 0) _safeTransfer(_token1, to, amount1Out); // optimistically transfer tokens\n\t// \t\tif (data.length > 0)\n\t// \t\t\tIButterCallee(to).uniswapV2Call(\n\t// \t\t\t\tmsg.sender,\n\t// \t\t\t\tamount0Out,\n\t// \t\t\t\tamount1Out,\n\t// \t\t\t\tdata\n\t// \t\t\t);\n\t// \t\tbalance0 = IERC20(_token0).balanceOf(address(this));\n\t// \t\tbalance1 = IERC20(_token1).balanceOf(address(this));\n\t// \t}\n\t// \tuint amount0In = balance0 > _reserve0 - amount0Out\n\t// \t\t? balance0 - (_reserve0 - amount0Out)\n\t// \t\t: 0;\n\t// \tuint amount1In = balance1 > _reserve1 - amount1Out\n\t// \t\t? balance1 - (_reserve1 - amount1Out)\n\t// \t\t: 0;\n\t// \trequire(\n\t// \t\tamount0In > 0 || amount1In > 0,\n\t// \t\t\"Butter: INSUFFICIENT_INPUT_AMOUNT\"\n\t// \t);\n\t// \t{\n\t// \t\t// scope for reserve{0,1}Adjusted, avoids stack too deep errors\n\t// \t\tuint balance0Adjusted = balance0.mul(1000).sub(amount0In.mul(3));\n\t// \t\tuint balance1Adjusted = balance1.mul(1000).sub(amount1In.mul(3));\n\t// \t\trequire(\n\t// \t\t\tbalance0Adjusted.mul(balance1Adjusted) >=\n\t// \t\t\t\tuint(_reserve0).mul(_reserve1).mul(1000 ** 2),\n\t// \t\t\t\"Butter: K\"\n\t// \t\t);\n\t// \t}\n\n\t// \t_update(balance0, balance1, _reserve0, _reserve1);\n\t// \temit Swap(msg.sender, amount0In, amount1In, amount0Out, amount1Out, to);\n\t// }\n\n\t// force balances to match reserves\n\tfunction skim(address to) external override lock {\n\t\taddress _token0 = token0; // gas savings\n\t\taddress _token1 = token1; // gas savings\n\t\t_safeTransfer(\n\t\t\t_token0,\n\t\t\tto,\n\t\t\tIERC20(_token0).balanceOf(address(this)).sub(reserve0)\n\t\t);\n\t\t_safeTransfer(\n\t\t\t_token1,\n\t\t\tto,\n\t\t\tIERC20(_token1).balanceOf(address(this)).sub(reserve1)\n\t\t);\n\t}\n\n\t// force reserves to match balances\n\tfunction sync() external override lock {\n\t\t_update(\n\t\t\tIERC20(token0).balanceOf(address(this)),\n\t\t\tIERC20(token1).balanceOf(address(this)),\n\t\t\treserve0,\n\t\t\treserve1,\n\t\t\tpendingReserve0,\n\t\t\tpendingReserve1\n\t\t);\n\t}\n}\n"
    },
    "contracts/ButterRouter02.sol": {
      "content": "pragma solidity =0.6.6;\n\nimport \"./interfaces/IButterFactory.sol\";\nimport \"@uniswap/lib/contracts/libraries/TransferHelper.sol\";\n\nimport \"./interfaces/IButterRouter02.sol\";\nimport \"./libraries/ButterLibrary.sol\";\nimport \"./libraries/SafeMath.sol\";\nimport \"./interfaces/IERC20.sol\";\nimport \"./interfaces/IWETH.sol\";\n\ncontract ButterRouter02 is IButterRouter02 {\n\tusing SafeMath for uint;\n\n\taddress public immutable override factory;\n\taddress public immutable override WETH;\n\n\tmodifier ensure(uint deadline) {\n\t\trequire(deadline >= block.timestamp, \"ButterRouter: EXPIRED\");\n\t\t_;\n\t}\n\n\tconstructor(address _factory, address _WETH) public {\n\t\tfactory = _factory;\n\t\tWETH = _WETH;\n\t}\n\n\treceive() external payable {\n\t\tassert(msg.sender == WETH); // only accept ETH via fallback from the WETH contract\n\t}\n\n\t// **** ADD LIQUIDITY ****\n\tfunction _addLiquidity(\n\t\taddress tokenA,\n\t\taddress tokenB,\n\t\tuint amountADesired,\n\t\tuint amountBDesired,\n\t\tuint amountAMin,\n\t\tuint amountBMin\n\t) internal virtual returns (uint amountA, uint amountB) {\n\t\t// create the pair if it doesn't exist yet\n\t\tif (IButterFactory(factory).getPair(tokenA, tokenB) == address(0)) {\n\t\t\tIButterFactory(factory).createPair(tokenA, tokenB);\n\t\t}\n\t\t(uint reserveA, uint reserveB) = ButterLibrary.getReserves(\n\t\t\tfactory,\n\t\t\ttokenA,\n\t\t\ttokenB\n\t\t);\n\t\tif (reserveA == 0 && reserveB == 0) {\n\t\t\t(amountA, amountB) = (amountADesired, amountBDesired);\n\t\t} else {\n\t\t\tuint amountBOptimal = ButterLibrary.quote(\n\t\t\t\tamountADesired,\n\t\t\t\treserveA,\n\t\t\t\treserveB\n\t\t\t);\n\t\t\tif (amountBOptimal <= amountBDesired) {\n\t\t\t\trequire(\n\t\t\t\t\tamountBOptimal >= amountBMin,\n\t\t\t\t\t\"ButterRouter: INSUFFICIENT_B_AMOUNT\"\n\t\t\t\t);\n\t\t\t\t(amountA, amountB) = (amountADesired, amountBOptimal);\n\t\t\t} else {\n\t\t\t\tuint amountAOptimal = ButterLibrary.quote(\n\t\t\t\t\tamountBDesired,\n\t\t\t\t\treserveB,\n\t\t\t\t\treserveA\n\t\t\t\t);\n\t\t\t\tassert(amountAOptimal <= amountADesired);\n\t\t\t\trequire(\n\t\t\t\t\tamountAOptimal >= amountAMin,\n\t\t\t\t\t\"ButterRouter: INSUFFICIENT_A_AMOUNT\"\n\t\t\t\t);\n\t\t\t\t(amountA, amountB) = (amountAOptimal, amountBDesired);\n\t\t\t}\n\t\t}\n\t}\n\tfunction addLiquidity(\n\t\taddress tokenA,\n\t\taddress tokenB,\n\t\tuint amountADesired,\n\t\tuint amountBDesired,\n\t\tuint amountAMin,\n\t\tuint amountBMin,\n\t\taddress to,\n\t\tuint deadline\n\t)\n\t\texternal\n\t\tvirtual\n\t\toverride\n\t\tensure(deadline)\n\t\treturns (uint amountA, uint amountB, uint liquidity)\n\t{\n\t\t(amountA, amountB) = _addLiquidity(\n\t\t\ttokenA,\n\t\t\ttokenB,\n\t\t\tamountADesired,\n\t\t\tamountBDesired,\n\t\t\tamountAMin,\n\t\t\tamountBMin\n\t\t);\n\t\taddress pair = ButterLibrary.pairFor(factory, tokenA, tokenB);\n\t\tTransferHelper.safeTransferFrom(tokenA, msg.sender, pair, amountA);\n\t\tTransferHelper.safeTransferFrom(tokenB, msg.sender, pair, amountB);\n\t\tliquidity = IButterPair(pair).mint(to);\n\t}\n\tfunction addLiquidityETH(\n\t\taddress token,\n\t\tuint amountTokenDesired,\n\t\tuint amountTokenMin,\n\t\tuint amountETHMin,\n\t\taddress to,\n\t\tuint deadline\n\t)\n\t\texternal\n\t\tpayable\n\t\tvirtual\n\t\toverride\n\t\tensure(deadline)\n\t\treturns (uint amountToken, uint amountETH, uint liquidity)\n\t{\n\t\t(amountToken, amountETH) = _addLiquidity(\n\t\t\ttoken,\n\t\t\tWETH,\n\t\t\tamountTokenDesired,\n\t\t\tmsg.value,\n\t\t\tamountTokenMin,\n\t\t\tamountETHMin\n\t\t);\n\t\taddress pair = ButterLibrary.pairFor(factory, token, WETH);\n\t\tTransferHelper.safeTransferFrom(token, msg.sender, pair, amountToken);\n\t\tIWETH(WETH).deposit{ value: amountETH }();\n\t\tassert(IWETH(WETH).transfer(pair, amountETH));\n\t\tliquidity = IButterPair(pair).mint(to);\n\t\t// refund dust eth, if any\n\t\tif (msg.value > amountETH)\n\t\t\tTransferHelper.safeTransferETH(msg.sender, msg.value - amountETH);\n\t}\n\n\t// **** REMOVE LIQUIDITY ****\n\tfunction removeLiquidity(\n\t\taddress tokenA,\n\t\taddress tokenB,\n\t\tuint liquidity,\n\t\tuint amountAMin,\n\t\tuint amountBMin,\n\t\taddress to,\n\t\tuint deadline\n\t)\n\t\tpublic\n\t\tvirtual\n\t\toverride\n\t\tensure(deadline)\n\t\treturns (uint amountA, uint amountB)\n\t{\n\t\taddress pair = ButterLibrary.pairFor(factory, tokenA, tokenB);\n\t\tIButterPair(pair).transferFrom(msg.sender, pair, liquidity); // send liquidity to pair\n\t\t(uint amount0, uint amount1) = IButterPair(pair).burn(to);\n\t\t(address token0, ) = ButterLibrary.sortTokens(tokenA, tokenB);\n\t\t(amountA, amountB) = tokenA == token0\n\t\t\t? (amount0, amount1)\n\t\t\t: (amount1, amount0);\n\t\trequire(amountA >= amountAMin, \"ButterRouter: INSUFFICIENT_A_AMOUNT\");\n\t\trequire(amountB >= amountBMin, \"ButterRouter: INSUFFICIENT_B_AMOUNT\");\n\t}\n\tfunction removeLiquidityETH(\n\t\taddress token,\n\t\tuint liquidity,\n\t\tuint amountTokenMin,\n\t\tuint amountETHMin,\n\t\taddress to,\n\t\tuint deadline\n\t)\n\t\tpublic\n\t\tvirtual\n\t\toverride\n\t\tensure(deadline)\n\t\treturns (uint amountToken, uint amountETH)\n\t{\n\t\t(amountToken, amountETH) = removeLiquidity(\n\t\t\ttoken,\n\t\t\tWETH,\n\t\t\tliquidity,\n\t\t\tamountTokenMin,\n\t\t\tamountETHMin,\n\t\t\taddress(this),\n\t\t\tdeadline\n\t\t);\n\t\tTransferHelper.safeTransfer(token, to, amountToken);\n\t\tIWETH(WETH).withdraw(amountETH);\n\t\tTransferHelper.safeTransferETH(to, amountETH);\n\t}\n\tfunction removeLiquidityWithPermit(\n\t\taddress tokenA,\n\t\taddress tokenB,\n\t\tuint liquidity,\n\t\tuint amountAMin,\n\t\tuint amountBMin,\n\t\taddress to,\n\t\tuint deadline,\n\t\tbool approveMax,\n\t\tuint8 v,\n\t\tbytes32 r,\n\t\tbytes32 s\n\t) external virtual override returns (uint amountA, uint amountB) {\n\t\taddress pair = ButterLibrary.pairFor(factory, tokenA, tokenB);\n\t\tuint value = approveMax ? uint(-1) : liquidity;\n\t\tIButterPair(pair).permit(\n\t\t\tmsg.sender,\n\t\t\taddress(this),\n\t\t\tvalue,\n\t\t\tdeadline,\n\t\t\tv,\n\t\t\tr,\n\t\t\ts\n\t\t);\n\t\t(amountA, amountB) = removeLiquidity(\n\t\t\ttokenA,\n\t\t\ttokenB,\n\t\t\tliquidity,\n\t\t\tamountAMin,\n\t\t\tamountBMin,\n\t\t\tto,\n\t\t\tdeadline\n\t\t);\n\t}\n\tfunction removeLiquidityETHWithPermit(\n\t\taddress token,\n\t\tuint liquidity,\n\t\tuint amountTokenMin,\n\t\tuint amountETHMin,\n\t\taddress to,\n\t\tuint deadline,\n\t\tbool approveMax,\n\t\tuint8 v,\n\t\tbytes32 r,\n\t\tbytes32 s\n\t) external virtual override returns (uint amountToken, uint amountETH) {\n\t\taddress pair = ButterLibrary.pairFor(factory, token, WETH);\n\t\tuint value = approveMax ? uint(-1) : liquidity;\n\t\tIButterPair(pair).permit(\n\t\t\tmsg.sender,\n\t\t\taddress(this),\n\t\t\tvalue,\n\t\t\tdeadline,\n\t\t\tv,\n\t\t\tr,\n\t\t\ts\n\t\t);\n\t\t(amountToken, amountETH) = removeLiquidityETH(\n\t\t\ttoken,\n\t\t\tliquidity,\n\t\t\tamountTokenMin,\n\t\t\tamountETHMin,\n\t\t\tto,\n\t\t\tdeadline\n\t\t);\n\t}\n\n\t// **** REMOVE LIQUIDITY (supporting fee-on-transfer tokens) ****\n\tfunction removeLiquidityETHSupportingFeeOnTransferTokens(\n\t\taddress token,\n\t\tuint liquidity,\n\t\tuint amountTokenMin,\n\t\tuint amountETHMin,\n\t\taddress to,\n\t\tuint deadline\n\t) public virtual override ensure(deadline) returns (uint amountETH) {\n\t\t(, amountETH) = removeLiquidity(\n\t\t\ttoken,\n\t\t\tWETH,\n\t\t\tliquidity,\n\t\t\tamountTokenMin,\n\t\t\tamountETHMin,\n\t\t\taddress(this),\n\t\t\tdeadline\n\t\t);\n\t\tTransferHelper.safeTransfer(\n\t\t\ttoken,\n\t\t\tto,\n\t\t\tIERC20(token).balanceOf(address(this))\n\t\t);\n\t\tIWETH(WETH).withdraw(amountETH);\n\t\tTransferHelper.safeTransferETH(to, amountETH);\n\t}\n\tfunction removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\n\t\taddress token,\n\t\tuint liquidity,\n\t\tuint amountTokenMin,\n\t\tuint amountETHMin,\n\t\taddress to,\n\t\tuint deadline,\n\t\tbool approveMax,\n\t\tuint8 v,\n\t\tbytes32 r,\n\t\tbytes32 s\n\t) external virtual override returns (uint amountETH) {\n\t\taddress pair = ButterLibrary.pairFor(factory, token, WETH);\n\t\tuint value = approveMax ? uint(-1) : liquidity;\n\t\tIButterPair(pair).permit(\n\t\t\tmsg.sender,\n\t\t\taddress(this),\n\t\t\tvalue,\n\t\t\tdeadline,\n\t\t\tv,\n\t\t\tr,\n\t\t\ts\n\t\t);\n\t\tamountETH = removeLiquidityETHSupportingFeeOnTransferTokens(\n\t\t\ttoken,\n\t\t\tliquidity,\n\t\t\tamountTokenMin,\n\t\t\tamountETHMin,\n\t\t\tto,\n\t\t\tdeadline\n\t\t);\n\t}\n\n\t// **** SWAP ****\n\t// requires the initial amount to have already been sent to the first pair\n\tfunction _swap(\n\t\tuint[] memory amounts,\n\t\taddress[] memory path,\n\t\taddress _to\n\t) internal virtual {\n\t\tfor (uint i; i < path.length - 1; i++) {\n\t\t\t(address input, address output) = (path[i], path[i + 1]);\n\t\t\t(address token0, ) = ButterLibrary.sortTokens(input, output);\n\t\t\tuint amountOut = amounts[i + 1];\n\t\t\t(uint amount0Out, uint amount1Out) = input == token0\n\t\t\t\t? (uint(0), amountOut)\n\t\t\t\t: (amountOut, uint(0));\n\t\t\taddress to = i < path.length - 2\n\t\t\t\t? ButterLibrary.pairFor(factory, output, path[i + 2])\n\t\t\t\t: _to;\n\t\t\tIButterPair(ButterLibrary.pairFor(factory, input, output)).swap(\n\t\t\t\tamount0Out,\n\t\t\t\tamount1Out,\n\t\t\t\tto,\n\t\t\t\tnew bytes(0)\n\t\t\t);\n\t\t}\n\t}\n\tfunction swapExactTokensForTokens(\n\t\tuint amountIn,\n\t\tuint amountOutMin,\n\t\taddress[] calldata path,\n\t\taddress to,\n\t\tuint deadline\n\t)\n\t\texternal\n\t\tvirtual\n\t\toverride\n\t\tensure(deadline)\n\t\treturns (uint[] memory amounts)\n\t{\n\t\tamounts = ButterLibrary.getAmountsOut(factory, amountIn, path);\n\t\trequire(\n\t\t\tamounts[amounts.length - 1] >= amountOutMin,\n\t\t\t\"ButterRouter: INSUFFICIENT_OUTPUT_AMOUNT\"\n\t\t);\n\t\tTransferHelper.safeTransferFrom(\n\t\t\tpath[0],\n\t\t\tmsg.sender,\n\t\t\tButterLibrary.pairFor(factory, path[0], path[1]),\n\t\t\tamounts[0]\n\t\t);\n\t\t_swap(amounts, path, to);\n\t}\n\t// function swapTokensForExactTokens(\n\t//     uint amountOut,\n\t//     uint amountInMax,\n\t//     address[] calldata path,\n\t//     address to,\n\t//     uint deadline\n\t// ) external virtual override ensure(deadline) returns (uint[] memory amounts) {\n\t//     amounts = ButterLibrary.getAmountsIn(factory, amountOut, path);\n\t//     require(amounts[0] <= amountInMax, 'ButterRouter: EXCESSIVE_INPUT_AMOUNT');\n\t//     TransferHelper.safeTransferFrom(\n\t//         path[0], msg.sender, ButterLibrary.pairFor(factory, path[0], path[1]), amounts[0]\n\t//     );\n\t//     _swap(amounts, path, to);\n\t// }\n\tfunction swapExactETHForTokens(\n\t\tuint amountOutMin,\n\t\taddress[] calldata path,\n\t\taddress to,\n\t\tuint deadline\n\t)\n\t\texternal\n\t\tpayable\n\t\tvirtual\n\t\toverride\n\t\tensure(deadline)\n\t\treturns (uint[] memory amounts)\n\t{\n\t\trequire(path[0] == WETH, \"ButterRouter: INVALID_PATH\");\n\t\tamounts = ButterLibrary.getAmountsOut(factory, msg.value, path);\n\t\trequire(\n\t\t\tamounts[amounts.length - 1] >= amountOutMin,\n\t\t\t\"ButterRouter: INSUFFICIENT_OUTPUT_AMOUNT\"\n\t\t);\n\t\tIWETH(WETH).deposit{ value: amounts[0] }();\n\t\tassert(\n\t\t\tIWETH(WETH).transfer(\n\t\t\t\tButterLibrary.pairFor(factory, path[0], path[1]),\n\t\t\t\tamounts[0]\n\t\t\t)\n\t\t);\n\t\t_swap(amounts, path, to);\n\t}\n\t// function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n\t//     external\n\t//     virtual\n\t//     override\n\t//     ensure(deadline)\n\t//     returns (uint[] memory amounts)\n\t// {\n\t//     require(path[path.length - 1] == WETH, 'ButterRouter: INVALID_PATH');\n\t//     amounts = ButterLibrary.getAmountsIn(factory, amountOut, path);\n\t//     require(amounts[0] <= amountInMax, 'ButterRouter: EXCESSIVE_INPUT_AMOUNT');\n\t//     TransferHelper.safeTransferFrom(\n\t//         path[0], msg.sender, ButterLibrary.pairFor(factory, path[0], path[1]), amounts[0]\n\t//     );\n\t//     _swap(amounts, path, address(this));\n\t//     IWETH(WETH).withdraw(amounts[amounts.length - 1]);\n\t//     TransferHelper.safeTransferETH(to, amounts[amounts.length - 1]);\n\t// }\n\tfunction swapExactTokensForETH(\n\t\tuint amountIn,\n\t\tuint amountOutMin,\n\t\taddress[] calldata path,\n\t\taddress to,\n\t\tuint deadline\n\t)\n\t\texternal\n\t\tvirtual\n\t\toverride\n\t\tensure(deadline)\n\t\treturns (uint[] memory amounts)\n\t{\n\t\trequire(path[path.length - 1] == WETH, \"ButterRouter: INVALID_PATH\");\n\t\tamounts = ButterLibrary.getAmountsOut(factory, amountIn, path);\n\t\trequire(\n\t\t\tamounts[amounts.length - 1] >= amountOutMin,\n\t\t\t\"ButterRouter: INSUFFICIENT_OUTPUT_AMOUNT\"\n\t\t);\n\t\tTransferHelper.safeTransferFrom(\n\t\t\tpath[0],\n\t\t\tmsg.sender,\n\t\t\tButterLibrary.pairFor(factory, path[0], path[1]),\n\t\t\tamounts[0]\n\t\t);\n\t\t_swap(amounts, path, address(this));\n\t\tIWETH(WETH).withdraw(amounts[amounts.length - 1]);\n\t\tTransferHelper.safeTransferETH(to, amounts[amounts.length - 1]);\n\t}\n\t// function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\n\t//     external\n\t//     virtual\n\t//     override\n\t//     payable\n\t//     ensure(deadline)\n\t//     returns (uint[] memory amounts)\n\t// {\n\t//     require(path[0] == WETH, 'ButterRouter: INVALID_PATH');\n\t//     amounts = ButterLibrary.getAmountsIn(factory, amountOut, path);\n\t//     require(amounts[0] <= msg.value, 'ButterRouter: EXCESSIVE_INPUT_AMOUNT');\n\t//     IWETH(WETH).deposit{value: amounts[0]}();\n\t//     assert(IWETH(WETH).transfer(ButterLibrary.pairFor(factory, path[0], path[1]), amounts[0]));\n\t//     _swap(amounts, path, to);\n\t//     // refund dust eth, if any\n\t//     if (msg.value > amounts[0]) TransferHelper.safeTransferETH(msg.sender, msg.value - amounts[0]);\n\t// }\n\n\t// **** SWAP (supporting fee-on-transfer tokens) ****\n\t// requires the initial amount to have already been sent to the first pair\n\tfunction _swapSupportingFeeOnTransferTokens(\n\t\taddress[] memory path,\n\t\taddress _to\n\t) internal virtual {\n\t\tfor (uint i; i < path.length - 1; i++) {\n\t\t\t(address input, address output) = (path[i], path[i + 1]);\n\t\t\t(address token0, ) = ButterLibrary.sortTokens(input, output);\n\t\t\tIButterPair pair = IButterPair(\n\t\t\t\tButterLibrary.pairFor(factory, input, output)\n\t\t\t);\n\t\t\tuint amountInput;\n\t\t\tuint amountOutput;\n\t\t\t{\n\t\t\t\t// scope to avoid stack too deep errors\n\t\t\t\t(uint reserve0, uint reserve1, , , ) = pair.getReserves();\n\t\t\t\t(uint reserveInput, uint reserveOutput) = input == token0\n\t\t\t\t\t? (reserve0, reserve1)\n\t\t\t\t\t: (reserve1, reserve0);\n\t\t\t\tamountInput = IERC20(input).balanceOf(address(pair)).sub(\n\t\t\t\t\treserveInput\n\t\t\t\t);\n\t\t\t\tamountOutput = ButterLibrary.getAmountOut(\n\t\t\t\t\tamountInput,\n\t\t\t\t\treserveInput,\n\t\t\t\t\treserveOutput\n\t\t\t\t);\n\t\t\t}\n\t\t\t(uint amount0Out, uint amount1Out) = input == token0\n\t\t\t\t? (uint(0), amountOutput)\n\t\t\t\t: (amountOutput, uint(0));\n\t\t\taddress to = i < path.length - 2\n\t\t\t\t? ButterLibrary.pairFor(factory, output, path[i + 2])\n\t\t\t\t: _to;\n\t\t\tpair.swap(amount0Out, amount1Out, to, new bytes(0));\n\t\t}\n\t}\n\t// function swapExactTokensForTokensSupportingFeeOnTransferTokens(\n\t//     uint amountIn,\n\t//     uint amountOutMin,\n\t//     address[] calldata path,\n\t//     address to,\n\t//     uint deadline\n\t// ) external virtual override ensure(deadline) {\n\t//     TransferHelper.safeTransferFrom(\n\t//         path[0], msg.sender, ButterLibrary.pairFor(factory, path[0], path[1]), amountIn\n\t//     );\n\t//     uint balanceBefore = IERC20(path[path.length - 1]).balanceOf(to);\n\t//     _swapSupportingFeeOnTransferTokens(path, to);\n\t//     require(\n\t//         IERC20(path[path.length - 1]).balanceOf(to).sub(balanceBefore) >= amountOutMin,\n\t//         'ButterRouter: INSUFFICIENT_OUTPUT_AMOUNT'\n\t//     );\n\t// }\n\t// function swapExactETHForTokensSupportingFeeOnTransferTokens(\n\t//     uint amountOutMin,\n\t//     address[] calldata path,\n\t//     address to,\n\t//     uint deadline\n\t// )\n\t//     external\n\t//     virtual\n\t//     override\n\t//     payable\n\t//     ensure(deadline)\n\t// {\n\t//     require(path[0] == WETH, 'ButterRouter: INVALID_PATH');\n\t//     uint amountIn = msg.value;\n\t//     IWETH(WETH).deposit{value: amountIn}();\n\t//     assert(IWETH(WETH).transfer(ButterLibrary.pairFor(factory, path[0], path[1]), amountIn));\n\t//     uint balanceBefore = IERC20(path[path.length - 1]).balanceOf(to);\n\t//     _swapSupportingFeeOnTransferTokens(path, to);\n\t//     require(\n\t//         IERC20(path[path.length - 1]).balanceOf(to).sub(balanceBefore) >= amountOutMin,\n\t//         'ButterRouter: INSUFFICIENT_OUTPUT_AMOUNT'\n\t//     );\n\t// }\n\t// function swapExactTokensForETHSupportingFeeOnTransferTokens(\n\t//     uint amountIn,\n\t//     uint amountOutMin,\n\t//     address[] calldata path,\n\t//     address to,\n\t//     uint deadline\n\t// )\n\t//     external\n\t//     virtual\n\t//     override\n\t//     ensure(deadline)\n\t// {\n\t//     require(path[path.length - 1] == WETH, 'ButterRouter: INVALID_PATH');\n\t//     TransferHelper.safeTransferFrom(\n\t//         path[0], msg.sender, ButterLibrary.pairFor(factory, path[0], path[1]), amountIn\n\t//     );\n\t//     _swapSupportingFeeOnTransferTokens(path, address(this));\n\t//     uint amountOut = IERC20(WETH).balanceOf(address(this));\n\t//     require(amountOut >= amountOutMin, 'ButterRouter: INSUFFICIENT_OUTPUT_AMOUNT');\n\t//     IWETH(WETH).withdraw(amountOut);\n\t//     TransferHelper.safeTransferETH(to, amountOut);\n\t// }\n\n\t// **** LIBRARY FUNCTIONS ****\n\tfunction quote(\n\t\tuint amountA,\n\t\tuint reserveA,\n\t\tuint reserveB\n\t) public pure virtual override returns (uint amountB) {\n\t\treturn ButterLibrary.quote(amountA, reserveA, reserveB);\n\t}\n\n\tfunction getAmountOut(\n\t\tuint amountIn,\n\t\tuint reserveIn,\n\t\tuint reserveOut\n\t) public pure virtual override returns (uint amountOut) {\n\t\treturn ButterLibrary.getAmountOut(amountIn, reserveIn, reserveOut);\n\t}\n\n\tfunction getAmountIn(\n\t\tuint amountOut,\n\t\tuint reserveIn,\n\t\tuint reserveOut\n\t) public pure virtual override returns (uint amountIn) {\n\t\treturn ButterLibrary.getAmountIn(amountOut, reserveIn, reserveOut);\n\t}\n\n\tfunction getAmountsOut(\n\t\tuint amountIn,\n\t\taddress[] memory path\n\t) public view virtual override returns (uint[] memory amounts) {\n\t\treturn ButterLibrary.getAmountsOut(factory, amountIn, path);\n\t}\n\n\tfunction getAmountsIn(\n\t\tuint amountOut,\n\t\taddress[] memory path\n\t) public view virtual override returns (uint[] memory amounts) {\n\t\treturn ButterLibrary.getAmountsIn(factory, amountOut, path);\n\t}\n}\n"
    },
    "contracts/ERC1155.sol": {
      "content": "pragma solidity >=0.5.0;\n\nimport \"./libraries/SafeMath.sol\";\nimport \"./libraries/Address.sol\";\nimport \"./interfaces/IERC1155.sol\";\n\n// A sample implementation of core ERC1155 function.\ncontract ERC1155 is IERC1155 {\n    using SafeMath for uint256;\n    using Address for address;\n    \n    bytes4 constant internal ERC1155_ACCEPTED = 0xf23a6e61; // bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))\n    bytes4 constant internal ERC1155_BATCH_ACCEPTED = 0xbc197c81; // bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))\n\n    // id => (owner => balance)\n    mapping (uint256 => mapping(address => uint256)) internal balances;\n\n    // owner => (operator => approved)\n    mapping (address => mapping(address => bool)) internal operatorApproval;\n\n/////////////////////////////////////////// ERC165 //////////////////////////////////////////////\n\n    /*\n        bytes4(keccak256('supportsInterface(bytes4)'));\n    */\n    bytes4 constant private INTERFACE_SIGNATURE_ERC165 = 0x01ffc9a7;\n\n    /*\n        bytes4(keccak256(\"safeTransferFrom(address,address,uint256,uint256,bytes)\")) ^\n        bytes4(keccak256(\"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)\")) ^\n        bytes4(keccak256(\"balanceOf(address,uint256)\")) ^\n        bytes4(keccak256(\"balanceOfBatch(address[],uint256[])\")) ^\n        bytes4(keccak256(\"setApprovalForAll(address,bool)\")) ^\n        bytes4(keccak256(\"isApprovedForAll(address,address)\"));\n    */\n    bytes4 constant private INTERFACE_SIGNATURE_ERC1155 = 0xd9b67a26;\n\n    function supportsInterface(bytes4 _interfaceId)\n    public\n    view\n    virtual\n    override\n    returns (bool) {\n         if (_interfaceId == INTERFACE_SIGNATURE_ERC165 ||\n             _interfaceId == INTERFACE_SIGNATURE_ERC1155) {\n            return true;\n         }\n\n         return false;\n    }\n\n/////////////////////////////////////////// ERC1155 //////////////////////////////////////////////\n\n    /**\n        @notice Transfers `_value` amount of an `_id` from the `_from` address to the `_to` address specified (with safety call).\n        @dev Caller must be approved to manage the tokens being transferred out of the `_from` account (see \"Approval\" section of the standard).\n        MUST revert if `_to` is the zero address.\n        MUST revert if balance of holder for token `_id` is lower than the `_value` sent.\n        MUST revert on any other error.\n        MUST emit the `TransferSingle` event to reflect the balance change (see \"Safe Transfer Rules\" section of the standard).\n        After the above conditions are met, this function MUST check if `_to` is a smart contract (e.g. code size > 0). If so, it MUST call `onERC1155Received` on `_to` and act appropriately (see \"Safe Transfer Rules\" section of the standard).\n        @param _from    Source address\n        @param _to      Target address\n        @param _id      ID of the token type\n        @param _value   Transfer amount\n        @param _data    Additional data with no specified format, MUST be sent unaltered in call to `onERC1155Received` on `_to`\n    */\n    function safeTransferFrom(address _from, address _to, uint256 _id, uint256 _value, bytes calldata _data) external override {\n\n        require(_to != address(0x0), \"_to must be non-zero.\");\n        require(_from == msg.sender || operatorApproval[_from][msg.sender] == true, \"Need operator approval for 3rd party transfers.\");\n\n        // SafeMath will throw with insuficient funds _from\n        // or if _id is not valid (balance will be 0)\n        balances[_id][_from] = balances[_id][_from].sub(_value);\n        balances[_id][_to]   = _value.add(balances[_id][_to]);\n\n        // MUST emit event\n        emit TransferSingle(msg.sender, _from, _to, _id, _value);\n\n        // Now that the balance is updated and the event was emitted,\n        // call onERC1155Received if the destination is a contract.\n        if (_to.isContract()) {\n            _doSafeTransferAcceptanceCheck(msg.sender, _from, _to, _id, _value, _data);\n        }\n    }\n\n    /**\n        @notice Transfers `_values` amount(s) of `_ids` from the `_from` address to the `_to` address specified (with safety call).\n        @dev Caller must be approved to manage the tokens being transferred out of the `_from` account (see \"Approval\" section of the standard).\n        MUST revert if `_to` is the zero address.\n        MUST revert if length of `_ids` is not the same as length of `_values`.\n        MUST revert if any of the balance(s) of the holder(s) for token(s) in `_ids` is lower than the respective amount(s) in `_values` sent to the recipient.\n        MUST revert on any other error.\n        MUST emit `TransferSingle` or `TransferBatch` event(s) such that all the balance changes are reflected (see \"Safe Transfer Rules\" section of the standard).\n        Balance changes and events MUST follow the ordering of the arrays (_ids[0]/_values[0] before _ids[1]/_values[1], etc).\n        After the above conditions for the transfer(s) in the batch are met, this function MUST check if `_to` is a smart contract (e.g. code size > 0). If so, it MUST call the relevant `ERC1155TokenReceiver` hook(s) on `_to` and act appropriately (see \"Safe Transfer Rules\" section of the standard).\n        @param _from    Source address\n        @param _to      Target address\n        @param _ids     IDs of each token type (order and length must match _values array)\n        @param _values  Transfer amounts per token type (order and length must match _ids array)\n        @param _data    Additional data with no specified format, MUST be sent unaltered in call to the `ERC1155TokenReceiver` hook(s) on `_to`\n    */\n    function safeBatchTransferFrom(address _from, address _to, uint256[] calldata _ids, uint256[] calldata _values, bytes calldata _data) external override {\n\n        // MUST Throw on errors\n        require(_to != address(0x0), \"destination address must be non-zero.\");\n        require(_ids.length == _values.length, \"_ids and _values array length must match.\");\n        require(_from == msg.sender || operatorApproval[_from][msg.sender] == true, \"Need operator approval for 3rd party transfers.\");\n\n        for (uint256 i = 0; i < _ids.length; ++i) {\n            uint256 id = _ids[i];\n            uint256 value = _values[i];\n\n            // SafeMath will throw with insuficient funds _from\n            // or if _id is not valid (balance will be 0)\n            balances[id][_from] = balances[id][_from].sub(value);\n            balances[id][_to]   = value.add(balances[id][_to]);\n        }\n\n        // Note: instead of the below batch versions of event and acceptance check you MAY have emitted a TransferSingle\n        // event and a subsequent call to _doSafeTransferAcceptanceCheck in above loop for each balance change instead.\n        // Or emitted a TransferSingle event for each in the loop and then the single _doSafeBatchTransferAcceptanceCheck below.\n        // However it is implemented the balance changes and events MUST match when a check (i.e. calling an external contract) is done.\n\n        // MUST emit event\n        emit TransferBatch(msg.sender, _from, _to, _ids, _values);\n\n        // Now that the balances are updated and the events are emitted,\n        // call onERC1155BatchReceived if the destination is a contract.\n        if (_to.isContract()) {\n            _doSafeBatchTransferAcceptanceCheck(msg.sender, _from, _to, _ids, _values, _data);\n        }\n    }\n\n    /**\n        @notice Get the balance of an account's Tokens.\n        @param _owner  The address of the token holder\n        @param _id     ID of the Token\n        @return        The _owner's balance of the Token type requested\n     */\n    function balanceOf(address _owner, uint256 _id) external view override returns (uint256) {\n        // The balance of any account can be calculated from the Transfer events history.\n        // However, since we need to keep the balances to validate transfer request,\n        // there is no extra cost to also provide a query function.\n        return balances[_id][_owner];\n    }\n\n\n    /**\n        @notice Get the balance of multiple account/token pairs\n        @param _owners The addresses of the token holders\n        @param _ids    ID of the Tokens\n        @return        The _owner's balance of the Token types requested (i.e. balance for each (owner, id) pair)\n     */\n    function balanceOfBatch(address[] calldata _owners, uint256[] calldata _ids) external view override returns (uint256[] memory) {\n\n        require(_owners.length == _ids.length);\n\n        uint256[] memory balances_ = new uint256[](_owners.length);\n\n        for (uint256 i = 0; i < _owners.length; ++i) {\n            balances_[i] = balances[_ids[i]][_owners[i]];\n        }\n\n        return balances_;\n    }\n\n    /**\n        @notice Enable or disable approval for a third party (\"operator\") to manage all of the caller's tokens.\n        @dev MUST emit the ApprovalForAll event on success.\n        @param _operator  Address to add to the set of authorized operators\n        @param _approved  True if the operator is approved, false to revoke approval\n    */\n    function setApprovalForAll(address _operator, bool _approved) external override {\n        operatorApproval[msg.sender][_operator] = _approved;\n        emit ApprovalForAll(msg.sender, _operator, _approved);\n    }\n\n    /**\n        @notice Queries the approval status of an operator for a given owner.\n        @param _owner     The owner of the Tokens\n        @param _operator  Address of authorized operator\n        @return           True if the operator is approved, false if not\n    */\n    function isApprovedForAll(address _owner, address _operator) external view override returns (bool) {\n        return operatorApproval[_owner][_operator];\n    }\n\n/////////////////////////////////////////// Internal //////////////////////////////////////////////\n\n    function _doSafeTransferAcceptanceCheck(address _operator, address _from, address _to, uint256 _id, uint256 _value, bytes memory _data) internal {\n\n        // If this was a hybrid standards solution you would have to check ERC165(_to).supportsInterface(0x4e2312e0) here but as this is a pure implementation of an ERC-1155 token set as recommended by\n        // the standard, it is not necessary. The below should revert in all failure cases i.e. _to isn't a receiver, or it is and either returns an unknown value or it reverts in the call to indicate non-acceptance.\n\n\n        // Note: if the below reverts in the onERC1155Received function of the _to address you will have an undefined revert reason returned rather than the one in the require test.\n        // If you want predictable revert reasons consider using low level _to.call() style instead so the revert does not bubble up and you can revert yourself on the ERC1155_ACCEPTED test.\n        require(ERC1155TokenReceiver(_to).onERC1155Received(_operator, _from, _id, _value, _data) == ERC1155_ACCEPTED, \"contract returned an unknown value from onERC1155Received\");\n    }\n\n    function _doSafeBatchTransferAcceptanceCheck(address _operator, address _from, address _to, uint256[] memory _ids, uint256[] memory _values, bytes memory _data) internal {\n\n        // If this was a hybrid standards solution you would have to check ERC165(_to).supportsInterface(0x4e2312e0) here but as this is a pure implementation of an ERC-1155 token set as recommended by\n        // the standard, it is not necessary. The below should revert in all failure cases i.e. _to isn't a receiver, or it is and either returns an unknown value or it reverts in the call to indicate non-acceptance.\n\n        // Note: if the below reverts in the onERC1155BatchReceived function of the _to address you will have an undefined revert reason returned rather than the one in the require test.\n        // If you want predictable revert reasons consider using low level _to.call() style instead so the revert does not bubble up and you can revert yourself on the ERC1155_BATCH_ACCEPTED test.\n        require(ERC1155TokenReceiver(_to).onERC1155BatchReceived(_operator, _from, _ids, _values, _data) == ERC1155_BATCH_ACCEPTED, \"contract returned an unknown value from onERC1155BatchReceived\");\n    }\n}\n\n/**\n    @dev Mintable form of ERC1155\n    Shows how easy it is to mint new items.\n*/\ncontract ERC1155Mintable is ERC1155 {\n\n    bytes4 constant private INTERFACE_SIGNATURE_URI = 0x0e89341c;\n\n    // id => creators\n    mapping (uint256 => address) public creators;\n\n    function supportsInterface(bytes4 _interfaceId)\n    public\n    view\n    override\n    returns (bool) {\n        if (_interfaceId == INTERFACE_SIGNATURE_URI) {\n            return true;\n        } else {\n            return super.supportsInterface(_interfaceId);\n        }\n    }\n\n    // Creates a new token type and assings _initialSupply to minter\n    function _create(uint256 _id, uint256 _initialSupply) internal {\n        creators[_id] = msg.sender;\n        balances[_id][msg.sender] = _initialSupply;\n\n        // Transfer event with mint semantic\n        emit TransferSingle(msg.sender, address(0x0), msg.sender, _id, _initialSupply);\n    }\n\n    // Batch mint tokens. Assign directly to _to[].\n    function _mint(uint256 _id, address[] memory _to, uint256[] memory _quantities) internal {\n\n        for (uint256 i = 0; i < _to.length; ++i) {\n\n            address to = _to[i];\n            uint256 quantity = _quantities[i];\n\n            // Grant the items to the caller\n            balances[_id][to] = quantity.add(balances[_id][to]);\n\n            // Emit the Transfer/Mint event.\n            // the 0x0 source address implies a mint\n            // It will also provide the circulating supply info.\n            emit TransferSingle(msg.sender, address(0x0), to, _id, quantity);\n\n            if (to.isContract()) {\n                _doSafeTransferAcceptanceCheck(msg.sender, msg.sender, to, _id, quantity, '');\n            }\n        }\n    }\n\n    function _burn(uint256 _id, address[] memory _from, uint256[] memory _quantities) internal {\n\n        for (uint256 i = 0; i < _from.length; ++i) {\n\n            address from = _from[i];\n            uint256 quantity = _quantities[i];\n\n            // Will throw if intent to burn more than balance\n            balances[_id][from] = balances[_id][from].sub(quantity);\n\n            // Emit Transfer/Mint event\n            // the 0x0 destination address implies a burn\n            // It will also provide the circulating supply info.\n            emit TransferSingle(msg.sender, from, address(0x0), _id, quantity);\n        }\n    }\n}"
    },
    "contracts/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.6.0 <0.9.0;\n\nimport \"./interfaces/IERC20.sol\";\nimport \"./libraries/SafeMath.sol\";\n\ncontract ERC20 is IERC20 {\n\tusing SafeMath for uint256;\n\tevent Transfer(address indexed from, address indexed to, uint256 value);\n\tevent Approval(\n\t\taddress indexed owner,\n\t\taddress indexed spender,\n\t\tuint256 value\n\t);\n\n\tuint256 public override totalSupply;\n\tmapping(address => uint256) public override balanceOf;\n\tmapping(address => mapping(address => uint256)) public override allowance;\n\tstring public override name;\n\tstring public override symbol;\n\tuint8 public override decimals;\n\n\tconstructor(\n\t\tstring memory _name,\n\t\tstring memory _symbol,\n\t\tuint8 _decimals\n\t) public {\n\t\tname = _name;\n\t\tsymbol = _symbol;\n\t\tdecimals = _decimals;\n\t}\n\n\tfunction transfer(\n\t\taddress recipient,\n\t\tuint256 amount\n\t) external override returns (bool) {\n\t\tbalanceOf[msg.sender] = balanceOf[msg.sender].sub(amount);\n\t\tbalanceOf[recipient] = balanceOf[recipient].add(amount);\n\t\temit Transfer(msg.sender, recipient, amount);\n\t\treturn true;\n\t}\n\n\tfunction approve(\n\t\taddress spender,\n\t\tuint256 amount\n\t) external override returns (bool) {\n\t\tallowance[msg.sender][spender] = amount;\n\t\temit Approval(msg.sender, spender, amount);\n\t\treturn true;\n\t}\n\n\tfunction transferFrom(\n\t\taddress sender,\n\t\taddress recipient,\n\t\tuint256 amount\n\t) external override returns (bool) {\n\t\tallowance[sender][msg.sender] = allowance[sender][msg.sender].sub(\n\t\t\tamount\n\t\t);\n\t\tbalanceOf[sender] = balanceOf[sender].sub(amount);\n\t\tbalanceOf[recipient] = balanceOf[recipient].add(amount);\n\t\temit Transfer(sender, recipient, amount);\n\t\treturn true;\n\t}\n\n\tfunction _mint(address to, uint256 amount) internal {\n\t\tbalanceOf[to] = balanceOf[to].add(amount);\n\t\ttotalSupply = totalSupply.add(amount);\n\t\temit Transfer(address(0), to, amount);\n\t}\n\n\tfunction _burn(address from, uint256 amount) internal {\n\t\tbalanceOf[from] = balanceOf[from].sub(amount);\n\t\ttotalSupply = totalSupply.sub(amount);\n\t\temit Transfer(from, address(0), amount);\n\t}\n\n\tfunction mint(address to, uint256 amount) external {\n\t\t_mint(to, amount);\n\t}\n\n\tfunction burn(address from, uint256 amount) external {\n\t\t_burn(from, amount);\n\t}\n}\n"
    },
    "contracts/interfaces/IButterCallee.sol": {
      "content": "pragma solidity >=0.5.0;\n\ninterface IButterCallee {\n    function uniswapV2Call(address sender, uint amount0, uint amount1, bytes calldata data) external;\n}\n"
    },
    "contracts/interfaces/IButterERC1155.sol": {
      "content": "pragma solidity >=0.5.0;\n\nimport \"./IERC1155.sol\";\ninterface IButterERC1155 is IERC1155 {\n\tfunction DOMAIN_SEPARATOR() external view returns (bytes32);\n\t// function PERMIT_TYPEHASH() external pure returns (bytes32);\n\t// function nonces(address owner) external view returns (uint);\n\tfunction calculateNFTId(\n\t\tuint256 blockNumber,\n\t\tuint256 tickLimit\n\t) external view returns (uint256);\n\n\t// function permit(\n\t// \taddress owner,\n\t// \tuint256 id,\n\t// \taddress spender,\n\t// \tuint value,\n\t// \tuint deadline,\n\t// \tuint8 v,\n\t// \tbytes32 r,\n\t// \tbytes32 s\n\t// ) external;\n\n\tfunction mint(address to, uint256 tickLimit, uint256 value) external;\n}\n"
    },
    "contracts/interfaces/IButterERC20.sol": {
      "content": "pragma solidity >=0.5.0;\n\ninterface IButterERC20 {\n    event Approval(address indexed owner, address indexed spender, uint value);\n    event Transfer(address indexed from, address indexed to, uint value);\n\n    function name() external pure returns (string memory);\n    function symbol() external pure returns (string memory);\n    function decimals() external pure returns (uint8);\n    function totalSupply() external view returns (uint);\n    function balanceOf(address owner) external view returns (uint);\n    function allowance(address owner, address spender) external view returns (uint);\n\n    function approve(address spender, uint value) external returns (bool);\n    function transfer(address to, uint value) external returns (bool);\n    function transferFrom(address from, address to, uint value) external returns (bool);\n\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\n    function nonces(address owner) external view returns (uint);\n\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\n}\n"
    },
    "contracts/interfaces/IButterFactory.sol": {
      "content": "pragma solidity >=0.5.0;\n\ninterface IButterFactory {\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\n\n    function feeTo() external view returns (address);\n    function feeToSetter() external view returns (address);\n\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\n    function allPairs(uint) external view returns (address pair);\n    function allPairsLength() external view returns (uint);\n\n    function createPair(address tokenA, address tokenB) external returns (address pair);\n\n    function setFeeTo(address) external;\n    function setFeeToSetter(address) external;\n}\n"
    },
    "contracts/interfaces/IButterPair.sol": {
      "content": "pragma solidity >=0.5.0;\n\nimport \"./IButterERC20.sol\";\ninterface IButterPair is IButterERC20 {\n\tevent Mint(address indexed sender, uint amount0, uint amount1);\n\tevent Burn(\n\t\taddress indexed sender,\n\t\tuint amount0,\n\t\tuint amount1,\n\t\taddress indexed to\n\t);\n\tevent SwapIntention(\n\t\taddress indexed sender,\n\t\tuint amount0In,\n\t\tuint amount1In,\n\t\taddress indexed to\n\t);\n\tevent Swap(\n\t\taddress indexed sender,\n\t\tuint amount0In,\n\t\tuint amount1In,\n\t\tuint amount0Out,\n\t\tuint amount1Out,\n\t\taddress indexed to\n\t);\n\tevent Sync(uint112 reserve0, uint112 reserve1);\n\n\tfunction MINIMUM_LIQUIDITY() external pure returns (uint);\n\tfunction factory() external view returns (address);\n\tfunction token0() external view returns (address);\n\tfunction token1() external view returns (address);\n\tfunction getReserves()\n\t\texternal\n\t\tview\n\t\treturns (\n\t\t\tuint112 reserve0,\n\t\t\tuint112 reserve1,\n\t\t\tuint112 _pendingReserve0,\n\t\t\tuint112 _pendingReserve1,\n\t\t\tuint32 blockTimestampLast\n\t\t);\n\tfunction price0CumulativeLast() external view returns (uint);\n\tfunction price1CumulativeLast() external view returns (uint);\n\tfunction kLast() external view returns (uint);\n\n\tfunction mint(address to) external returns (uint liquidity);\n\tfunction burn(address to) external returns (uint amount0, uint amount1);\n\tfunction swap(\n\t\tuint amount0Out,\n\t\tuint amount1Out,\n\t\taddress to,\n\t\tbytes calldata data\n\t) external;\n\tfunction skim(address to) external;\n\tfunction sync() external;\n\n\tfunction initialize(address, address) external;\n}\n"
    },
    "contracts/interfaces/IButterRouter01.sol": {
      "content": "pragma solidity >=0.6.2;\n\ninterface IButterRouter01 {\n    function factory() external pure returns (address);\n    function WETH() external pure returns (address);\n\n    function addLiquidity(\n        address tokenA,\n        address tokenB,\n        uint amountADesired,\n        uint amountBDesired,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB, uint liquidity);\n    function addLiquidityETH(\n        address token,\n        uint amountTokenDesired,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\n    function removeLiquidity(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityETH(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountToken, uint amountETH);\n    function removeLiquidityWithPermit(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityETHWithPermit(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountToken, uint amountETH);\n    function swapExactTokensForTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    // function swapTokensForExactTokens(\n    //     uint amountOut,\n    //     uint amountInMax,\n    //     address[] calldata path,\n    //     address to,\n    //     uint deadline\n    // ) external returns (uint[] memory amounts);\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\n        external\n        payable\n        returns (uint[] memory amounts);\n    // function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n    //     external\n    //     returns (uint[] memory amounts);\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n        external\n        returns (uint[] memory amounts);\n    // function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\n    //     external\n    //     payable\n    //     returns (uint[] memory amounts);\n\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\n}\n"
    },
    "contracts/interfaces/IButterRouter02.sol": {
      "content": "pragma solidity >=0.6.2;\n\nimport './IButterRouter01.sol';\n\ninterface IButterRouter02 is IButterRouter01 {\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountETH);\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountETH);\n\n    // function swapExactTokensForTokensSupportingFeeOnTransferTokens(\n    //     uint amountIn,\n    //     uint amountOutMin,\n    //     address[] calldata path,\n    //     address to,\n    //     uint deadline\n    // ) external;\n    // function swapExactETHForTokensSupportingFeeOnTransferTokens(\n    //     uint amountOutMin,\n    //     address[] calldata path,\n    //     address to,\n    //     uint deadline\n    // ) external payable;\n    // function swapExactTokensForETHSupportingFeeOnTransferTokens(\n    //     uint amountIn,\n    //     uint amountOutMin,\n    //     address[] calldata path,\n    //     address to,\n    //     uint deadline\n    // ) external;\n}\n"
    },
    "contracts/interfaces/IERC1155.sol": {
      "content": "pragma solidity >=0.5.0;\n\n/**\n * @title ERC165\n * @dev https://github.com/ethereum/EIPs/blob/master/EIPS/eip-165.md\n */\ninterface ERC165 {\n\n    /**\n     * @notice Query if a contract implements an interface\n     * @param _interfaceId The interface identifier, as specified in ERC-165\n     * @dev Interface identification is specified in ERC-165. This function\n     * uses less than 30,000 gas.\n     */\n    function supportsInterface(bytes4 _interfaceId)\n    external\n    view\n    returns (bool);\n}\n\n/**\n    @title ERC-1155 Multi Token Standard\n    @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-1155.md\n    Note: The ERC-165 identifier for this interface is 0xd9b67a26.\n */\ninterface IERC1155 is ERC165 {\n    /**\n        @dev Either `TransferSingle` or `TransferBatch` MUST emit when tokens are transferred, including zero value transfers as well as minting or burning (see \"Safe Transfer Rules\" section of the standard).\n        The `_operator` argument MUST be msg.sender.\n        The `_from` argument MUST be the address of the holder whose balance is decreased.\n        The `_to` argument MUST be the address of the recipient whose balance is increased.\n        The `_id` argument MUST be the token type being transferred.\n        The `_value` argument MUST be the number of tokens the holder balance is decreased by and match what the recipient balance is increased by.\n        When minting/creating tokens, the `_from` argument MUST be set to `0x0` (i.e. zero address).\n        When burning/destroying tokens, the `_to` argument MUST be set to `0x0` (i.e. zero address).\n    */\n    event TransferSingle(address indexed _operator, address indexed _from, address indexed _to, uint256 _id, uint256 _value);\n\n    /**\n        @dev Either `TransferSingle` or `TransferBatch` MUST emit when tokens are transferred, including zero value transfers as well as minting or burning (see \"Safe Transfer Rules\" section of the standard).\n        The `_operator` argument MUST be msg.sender.\n        The `_from` argument MUST be the address of the holder whose balance is decreased.\n        The `_to` argument MUST be the address of the recipient whose balance is increased.\n        The `_ids` argument MUST be the list of tokens being transferred.\n        The `_values` argument MUST be the list of number of tokens (matching the list and order of tokens specified in _ids) the holder balance is decreased by and match what the recipient balance is increased by.\n        When minting/creating tokens, the `_from` argument MUST be set to `0x0` (i.e. zero address).\n        When burning/destroying tokens, the `_to` argument MUST be set to `0x0` (i.e. zero address).\n    */\n    event TransferBatch(address indexed _operator, address indexed _from, address indexed _to, uint256[] _ids, uint256[] _values);\n\n    /**\n        @dev MUST emit when approval for a second party/operator address to manage all tokens for an owner address is enabled or disabled (absense of an event assumes disabled).\n    */\n    event ApprovalForAll(address indexed _owner, address indexed _operator, bool _approved);\n\n    /**\n        @dev MUST emit when the URI is updated for a token ID.\n        URIs are defined in RFC 3986.\n        The URI MUST point a JSON file that conforms to the \"ERC-1155 Metadata URI JSON Schema\".\n    */\n    event URI(string _value, uint256 indexed _id);\n\n    /**\n        @notice Transfers `_value` amount of an `_id` from the `_from` address to the `_to` address specified (with safety call).\n        @dev Caller must be approved to manage the tokens being transferred out of the `_from` account (see \"Approval\" section of the standard).\n        MUST revert if `_to` is the zero address.\n        MUST revert if balance of holder for token `_id` is lower than the `_value` sent.\n        MUST revert on any other error.\n        MUST emit the `TransferSingle` event to reflect the balance change (see \"Safe Transfer Rules\" section of the standard).\n        After the above conditions are met, this function MUST check if `_to` is a smart contract (e.g. code size > 0). If so, it MUST call `onERC1155Received` on `_to` and act appropriately (see \"Safe Transfer Rules\" section of the standard).\n        @param _from    Source address\n        @param _to      Target address\n        @param _id      ID of the token type\n        @param _value   Transfer amount\n        @param _data    Additional data with no specified format, MUST be sent unaltered in call to `onERC1155Received` on `_to`\n    */\n    function safeTransferFrom(address _from, address _to, uint256 _id, uint256 _value, bytes calldata _data) external;\n\n    /**\n        @notice Transfers `_values` amount(s) of `_ids` from the `_from` address to the `_to` address specified (with safety call).\n        @dev Caller must be approved to manage the tokens being transferred out of the `_from` account (see \"Approval\" section of the standard).\n        MUST revert if `_to` is the zero address.\n        MUST revert if length of `_ids` is not the same as length of `_values`.\n        MUST revert if any of the balance(s) of the holder(s) for token(s) in `_ids` is lower than the respective amount(s) in `_values` sent to the recipient.\n        MUST revert on any other error.\n        MUST emit `TransferSingle` or `TransferBatch` event(s) such that all the balance changes are reflected (see \"Safe Transfer Rules\" section of the standard).\n        Balance changes and events MUST follow the ordering of the arrays (_ids[0]/_values[0] before _ids[1]/_values[1], etc).\n        After the above conditions for the transfer(s) in the batch are met, this function MUST check if `_to` is a smart contract (e.g. code size > 0). If so, it MUST call the relevant `ERC1155TokenReceiver` hook(s) on `_to` and act appropriately (see \"Safe Transfer Rules\" section of the standard).\n        @param _from    Source address\n        @param _to      Target address\n        @param _ids     IDs of each token type (order and length must match _values array)\n        @param _values  Transfer amounts per token type (order and length must match _ids array)\n        @param _data    Additional data with no specified format, MUST be sent unaltered in call to the `ERC1155TokenReceiver` hook(s) on `_to`\n    */\n    function safeBatchTransferFrom(address _from, address _to, uint256[] calldata _ids, uint256[] calldata _values, bytes calldata _data) external;\n\n    /**\n        @notice Get the balance of an account's Tokens.\n        @param _owner  The address of the token holder\n        @param _id     ID of the Token\n        @return        The _owner's balance of the Token type requested\n     */\n    function balanceOf(address _owner, uint256 _id) external view returns (uint256);\n\n    /**\n        @notice Get the balance of multiple account/token pairs\n        @param _owners The addresses of the token holders\n        @param _ids    ID of the Tokens\n        @return        The _owner's balance of the Token types requested (i.e. balance for each (owner, id) pair)\n     */\n    function balanceOfBatch(address[] calldata _owners, uint256[] calldata _ids) external view returns (uint256[] memory);\n\n    /**\n        @notice Enable or disable approval for a third party (\"operator\") to manage all of the caller's tokens.\n        @dev MUST emit the ApprovalForAll event on success.\n        @param _operator  Address to add to the set of authorized operators\n        @param _approved  True if the operator is approved, false to revoke approval\n    */\n    function setApprovalForAll(address _operator, bool _approved) external;\n\n    /**\n        @notice Queries the approval status of an operator for a given owner.\n        @param _owner     The owner of the Tokens\n        @param _operator  Address of authorized operator\n        @return           True if the operator is approved, false if not\n    */\n    function isApprovedForAll(address _owner, address _operator) external view returns (bool);\n}\n\n/**\n    Note: The ERC-165 identifier for this interface is 0x4e2312e0.\n*/\ninterface ERC1155TokenReceiver {\n    /**\n        @notice Handle the receipt of a single ERC1155 token type.\n        @dev An ERC1155-compliant smart contract MUST call this function on the token recipient contract, at the end of a `safeTransferFrom` after the balance has been updated.\n        This function MUST return `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` (i.e. 0xf23a6e61) if it accepts the transfer.\n        This function MUST revert if it rejects the transfer.\n        Return of any other value than the prescribed keccak256 generated value MUST result in the transaction being reverted by the caller.\n        @param _operator  The address which initiated the transfer (i.e. msg.sender)\n        @param _from      The address which previously owned the token\n        @param _id        The ID of the token being transferred\n        @param _value     The amount of tokens being transferred\n        @param _data      Additional data with no specified format\n        @return           `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))`\n    */\n    function onERC1155Received(address _operator, address _from, uint256 _id, uint256 _value, bytes calldata _data) external returns(bytes4);\n\n    /**\n        @notice Handle the receipt of multiple ERC1155 token types.\n        @dev An ERC1155-compliant smart contract MUST call this function on the token recipient contract, at the end of a `safeBatchTransferFrom` after the balances have been updated.\n        This function MUST return `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` (i.e. 0xbc197c81) if it accepts the transfer(s).\n        This function MUST revert if it rejects the transfer(s).\n        Return of any other value than the prescribed keccak256 generated value MUST result in the transaction being reverted by the caller.\n        @param _operator  The address which initiated the batch transfer (i.e. msg.sender)\n        @param _from      The address which previously owned the token\n        @param _ids       An array containing ids of each token being transferred (order and length must match _values array)\n        @param _values    An array containing amounts of each token being transferred (order and length must match _ids array)\n        @param _data      Additional data with no specified format\n        @return           `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))`\n    */\n    function onERC1155BatchReceived(address _operator, address _from, uint256[] calldata _ids, uint256[] calldata _values, bytes calldata _data) external returns(bytes4);\n}"
    },
    "contracts/interfaces/IERC20.sol": {
      "content": "pragma solidity >=0.5.0;\n\ninterface IERC20 {\n    event Approval(address indexed owner, address indexed spender, uint value);\n    event Transfer(address indexed from, address indexed to, uint value);\n\n    function name() external view returns (string memory);\n    function symbol() external view returns (string memory);\n    function decimals() external view returns (uint8);\n    function totalSupply() external view returns (uint);\n    function balanceOf(address owner) external view returns (uint);\n    function allowance(address owner, address spender) external view returns (uint);\n\n    function approve(address spender, uint value) external returns (bool);\n    function transfer(address to, uint value) external returns (bool);\n    function transferFrom(address from, address to, uint value) external returns (bool);\n}\n"
    },
    "contracts/interfaces/IUniswapV2ERC20.sol": {
      "content": "pragma solidity >=0.5.0;\n\ninterface IUniswapV2ERC20 {\n    event Approval(address indexed owner, address indexed spender, uint value);\n    event Transfer(address indexed from, address indexed to, uint value);\n\n    function name() external pure returns (string memory);\n    function symbol() external pure returns (string memory);\n    function decimals() external pure returns (uint8);\n    function totalSupply() external view returns (uint);\n    function balanceOf(address owner) external view returns (uint);\n    function allowance(address owner, address spender) external view returns (uint);\n\n    function approve(address spender, uint value) external returns (bool);\n    function transfer(address to, uint value) external returns (bool);\n    function transferFrom(address from, address to, uint value) external returns (bool);\n\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\n    function nonces(address owner) external view returns (uint);\n\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\n}"
    },
    "contracts/interfaces/IUniswapV2Pair.sol": {
      "content": "pragma solidity >=0.5.0;\n\nimport \"./IUniswapV2ERC20.sol\";\n\ninterface IUniswapV2Pair is IUniswapV2ERC20 {\n    event Mint(address indexed sender, uint amount0, uint amount1);\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\n    event Swap(\n        address indexed sender,\n        uint amount0In,\n        uint amount1In,\n        uint amount0Out,\n        uint amount1Out,\n        address indexed to\n    );\n    event Sync(uint112 reserve0, uint112 reserve1);\n\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\n    function factory() external view returns (address);\n    function token0() external view returns (address);\n    function token1() external view returns (address);\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\n    function price0CumulativeLast() external view returns (uint);\n    function price1CumulativeLast() external view returns (uint);\n    function kLast() external view returns (uint);\n\n    function mint(address to) external returns (uint liquidity);\n    function burn(address to) external returns (uint amount0, uint amount1);\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\n    function skim(address to) external;\n    function sync() external;\n\n    function initialize(address, address) external;\n}\n"
    },
    "contracts/interfaces/IWETH.sol": {
      "content": "pragma solidity >=0.5.0;\n\ninterface IWETH {\n    function deposit() external payable;\n    function transfer(address to, uint value) external returns (bool);\n    function withdraw(uint) external;\n}\n"
    },
    "contracts/libraries/Address.sol": {
      "content": "pragma solidity >=0.5.0;\n\n\n/**\n * Utility library of inline functions on addresses\n */\nlibrary Address {\n\n    /**\n     * Returns whether the target address is a contract\n     * @dev This function will return false if invoked during the constructor of a contract,\n     * as the code is not actually created until after the constructor finishes.\n     * @param account address of the account to check\n     * @return whether the target address is a contract\n     */\n    function isContract(address account) internal view returns (bool) {\n        uint256 size;\n        // XXX Currently there is no better way to check if there is a contract in an address\n        // than to check the size of the code at that address.\n        // See https://ethereum.stackexchange.com/a/14016/36603\n        // for more details about how this works.\n        // TODO Check this again before the Serenity release, because all addresses will be\n        // contracts then.\n        // solium-disable-next-line security/no-inline-assembly\n        assembly { size := extcodesize(account) }\n        return size > 0;\n    }\n\n}\n"
    },
    "contracts/libraries/BitMath.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title BitMath\n/// @dev This library provides functionality for computing bit properties of an unsigned integer\nlibrary BitMath {\n\t/// @notice Returns the index of the most significant bit of the number,\n\t///     where the least significant bit is at index 0 and the most significant bit is at index 255\n\t/// @dev The function satisfies the property:\n\t///     x >= 2**mostSignificantBit(x) and x < 2**(mostSignificantBit(x)+1)\n\t/// @param x the value for which to compute the most significant bit, must be greater than 0\n\t/// @return r the index of the most significant bit\n\tfunction mostSignificantBit(uint256 x) internal pure returns (uint8 r) {\n\t\trequire(x > 0);\n\n\t\tif (x >= 0x100000000000000000000000000000000) {\n\t\t\tx >>= 128;\n\t\t\tr += 128;\n\t\t}\n\t\tif (x >= 0x10000000000000000) {\n\t\t\tx >>= 64;\n\t\t\tr += 64;\n\t\t}\n\t\tif (x >= 0x100000000) {\n\t\t\tx >>= 32;\n\t\t\tr += 32;\n\t\t}\n\t\tif (x >= 0x10000) {\n\t\t\tx >>= 16;\n\t\t\tr += 16;\n\t\t}\n\t\tif (x >= 0x100) {\n\t\t\tx >>= 8;\n\t\t\tr += 8;\n\t\t}\n\t\tif (x >= 0x10) {\n\t\t\tx >>= 4;\n\t\t\tr += 4;\n\t\t}\n\t\tif (x >= 0x4) {\n\t\t\tx >>= 2;\n\t\t\tr += 2;\n\t\t}\n\t\tif (x >= 0x2) r += 1;\n\t}\n\n\t/// @notice Returns the index of the least significant bit of the number,\n\t///     where the least significant bit is at index 0 and the most significant bit is at index 255\n\t/// @dev The function satisfies the property:\n\t///     (x & 2**leastSignificantBit(x)) != 0 and (x & (2**(leastSignificantBit(x)) - 1)) == 0)\n\t/// @param x the value for which to compute the least significant bit, must be greater than 0\n\t/// @return r the index of the least significant bit\n\tfunction leastSignificantBit(uint256 x) internal pure returns (uint8 r) {\n\t\trequire(x > 0);\n\n\t\tr = 255;\n\t\tif (x & uint256(-1) > 0) {\n\t\t\tr -= 128;\n\t\t} else {\n\t\t\tx >>= 128;\n\t\t}\n\t\tif (x & uint64(-1) > 0) {\n\t\t\tr -= 64;\n\t\t} else {\n\t\t\tx >>= 64;\n\t\t}\n\t\tif (x & uint32(-1) > 0) {\n\t\t\tr -= 32;\n\t\t} else {\n\t\t\tx >>= 32;\n\t\t}\n\t\tif (x & uint16(-1) > 0) {\n\t\t\tr -= 16;\n\t\t} else {\n\t\t\tx >>= 16;\n\t\t}\n\t\tif (x & uint8(-1) > 0) {\n\t\t\tr -= 8;\n\t\t} else {\n\t\t\tx >>= 8;\n\t\t}\n\t\tif (x & 0xf > 0) {\n\t\t\tr -= 4;\n\t\t} else {\n\t\t\tx >>= 4;\n\t\t}\n\t\tif (x & 0x3 > 0) {\n\t\t\tr -= 2;\n\t\t} else {\n\t\t\tx >>= 2;\n\t\t}\n\t\tif (x & 0x1 > 0) r -= 1;\n\t}\n}\n"
    },
    "contracts/libraries/ButterLibrary.sol": {
      "content": "pragma solidity >=0.5.0;\n\nimport \"../interfaces/IButterPair.sol\";\n\nimport \"./SafeMath.sol\";\n\nlibrary ButterLibrary {\n\tusing SafeMath for uint;\n\n\t// returns sorted token addresses, used to handle return values from pairs sorted in this order\n\tfunction sortTokens(\n\t\taddress tokenA,\n\t\taddress tokenB\n\t) internal pure returns (address token0, address token1) {\n\t\trequire(tokenA != tokenB, \"ButterLibrary: IDENTICAL_ADDRESSES\");\n\t\t(token0, token1) = tokenA < tokenB\n\t\t\t? (tokenA, tokenB)\n\t\t\t: (tokenB, tokenA);\n\t\trequire(token0 != address(0), \"ButterLibrary: ZERO_ADDRESS\");\n\t}\n\n\t// calculates the CREATE2 address for a pair without making any external calls\n\tfunction pairFor(\n\t\taddress factory,\n\t\taddress tokenA,\n\t\taddress tokenB\n\t) internal pure returns (address pair) {\n\t\t(address token0, address token1) = sortTokens(tokenA, tokenB);\n\t\tpair = address(\n\t\t\tuint(\n\t\t\t\tkeccak256(\n\t\t\t\t\tabi.encodePacked(\n\t\t\t\t\t\thex\"ff\",\n\t\t\t\t\t\tfactory,\n\t\t\t\t\t\tkeccak256(abi.encodePacked(token0, token1)),\n\t\t\t\t\t\thex\"bd453c3b70eca359ba7be49a87c127fbd47c6ccf8208bb3159d50081c3d0aae4\" // init code hash\n\t\t\t\t\t)\n\t\t\t\t)\n\t\t\t)\n\t\t);\n\t}\n\n\t// fetches and sorts the reserves for a pair\n\tfunction getReserves(\n\t\taddress factory,\n\t\taddress tokenA,\n\t\taddress tokenB\n\t) internal view returns (uint reserveA, uint reserveB) {\n\t\t(address token0, ) = sortTokens(tokenA, tokenB);\n\t\t(uint reserve0, uint reserve1, , , ) = IButterPair(\n\t\t\tpairFor(factory, tokenA, tokenB)\n\t\t).getReserves();\n\t\t(reserveA, reserveB) = tokenA == token0\n\t\t\t? (reserve0, reserve1)\n\t\t\t: (reserve1, reserve0);\n\t}\n\n\t// given some amount of an asset and pair reserves, returns an equivalent amount of the other asset\n\tfunction quote(\n\t\tuint amountA,\n\t\tuint reserveA,\n\t\tuint reserveB\n\t) internal pure returns (uint amountB) {\n\t\trequire(amountA > 0, \"ButterLibrary: INSUFFICIENT_AMOUNT\");\n\t\trequire(\n\t\t\treserveA > 0 && reserveB > 0,\n\t\t\t\"ButterLibrary: INSUFFICIENT_LIQUIDITY\"\n\t\t);\n\t\tamountB = amountA.mul(reserveB) / reserveA;\n\t}\n\n\t// given an input amount of an asset and pair reserves, returns the maximum output amount of the other asset\n\tfunction getAmountOut(\n\t\tuint amountIn,\n\t\tuint reserveIn,\n\t\tuint reserveOut\n\t) internal pure returns (uint amountOut) {\n\t\trequire(amountIn > 0, \"ButterLibrary: INSUFFICIENT_INPUT_AMOUNT\");\n\t\trequire(\n\t\t\treserveIn > 0 && reserveOut > 0,\n\t\t\t\"ButterLibrary: INSUFFICIENT_LIQUIDITY\"\n\t\t);\n\t\tuint amountInWithFee = amountIn.mul(997);\n\t\tuint numerator = amountInWithFee.mul(reserveOut);\n\t\tuint denominator = reserveIn.mul(1000).add(amountInWithFee);\n\t\tamountOut = numerator / denominator;\n\t}\n\n\t// given an output amount of an asset and pair reserves, returns a required input amount of the other asset\n\tfunction getAmountIn(\n\t\tuint amountOut,\n\t\tuint reserveIn,\n\t\tuint reserveOut\n\t) internal pure returns (uint amountIn) {\n\t\trequire(amountOut > 0, \"ButterLibrary: INSUFFICIENT_OUTPUT_AMOUNT\");\n\t\trequire(\n\t\t\treserveIn > 0 && reserveOut > 0,\n\t\t\t\"ButterLibrary: INSUFFICIENT_LIQUIDITY\"\n\t\t);\n\t\tuint numerator = reserveIn.mul(amountOut).mul(1000);\n\t\tuint denominator = reserveOut.sub(amountOut).mul(997);\n\t\tamountIn = (numerator / denominator).add(1);\n\t}\n\n\t// performs chained getAmountOut calculations on any number of pairs\n\tfunction getAmountsOut(\n\t\taddress factory,\n\t\tuint amountIn,\n\t\taddress[] memory path\n\t) internal view returns (uint[] memory amounts) {\n\t\trequire(path.length >= 2, \"ButterLibrary: INVALID_PATH\");\n\t\tamounts = new uint[](path.length);\n\t\tamounts[0] = amountIn;\n\t\tfor (uint i; i < path.length - 1; i++) {\n\t\t\t(uint reserveIn, uint reserveOut) = getReserves(\n\t\t\t\tfactory,\n\t\t\t\tpath[i],\n\t\t\t\tpath[i + 1]\n\t\t\t);\n\t\t\tamounts[i + 1] = getAmountOut(amounts[i], reserveIn, reserveOut);\n\t\t}\n\t}\n\n\t// performs chained getAmountIn calculations on any number of pairs\n\tfunction getAmountsIn(\n\t\taddress factory,\n\t\tuint amountOut,\n\t\taddress[] memory path\n\t) internal view returns (uint[] memory amounts) {\n\t\trequire(path.length >= 2, \"ButterLibrary: INVALID_PATH\");\n\t\tamounts = new uint[](path.length);\n\t\tamounts[amounts.length - 1] = amountOut;\n\t\tfor (uint i = path.length - 1; i > 0; i--) {\n\t\t\t(uint reserveIn, uint reserveOut) = getReserves(\n\t\t\t\tfactory,\n\t\t\t\tpath[i - 1],\n\t\t\t\tpath[i]\n\t\t\t);\n\t\t\tamounts[i - 1] = getAmountIn(amounts[i], reserveIn, reserveOut);\n\t\t}\n\t}\n}\n"
    },
    "contracts/libraries/ButterLiquidityMathLibrary.sol": {
      "content": "pragma solidity >=0.5.0;\n\nimport '../interfaces/IButterPair.sol';\nimport '../interfaces/IButterFactory.sol';\nimport '@uniswap/lib/contracts/libraries/Babylonian.sol';\nimport '@uniswap/lib/contracts/libraries/FullMath.sol';\n\nimport './SafeMath.sol';\nimport './ButterLibrary.sol';\n\n// library containing some math for dealing with the liquidity shares of a pair, e.g. computing their exact value\n// in terms of the underlying tokens\nlibrary ButterLiquidityMathLibrary {\n    using SafeMath for uint256;\n\n    // computes the direction and magnitude of the profit-maximizing trade\n    function computeProfitMaximizingTrade(\n        uint256 truePriceTokenA,\n        uint256 truePriceTokenB,\n        uint256 reserveA,\n        uint256 reserveB\n    ) pure internal returns (bool aToB, uint256 amountIn) {\n        aToB = FullMath.mulDiv(reserveA, truePriceTokenB, reserveB) < truePriceTokenA;\n\n        uint256 invariant = reserveA.mul(reserveB);\n\n        uint256 leftSide = Babylonian.sqrt(\n            FullMath.mulDiv(\n                invariant.mul(1000),\n                aToB ? truePriceTokenA : truePriceTokenB,\n                (aToB ? truePriceTokenB : truePriceTokenA).mul(997)\n            )\n        );\n        uint256 rightSide = (aToB ? reserveA.mul(1000) : reserveB.mul(1000)) / 997;\n\n        if (leftSide < rightSide) return (false, 0);\n\n        // compute the amount that must be sent to move the price to the profit-maximizing price\n        amountIn = leftSide.sub(rightSide);\n    }\n\n    // gets the reserves after an arbitrage moves the price to the profit-maximizing ratio given an externally observed true price\n    function getReservesAfterArbitrage(\n        address factory,\n        address tokenA,\n        address tokenB,\n        uint256 truePriceTokenA,\n        uint256 truePriceTokenB\n    ) view internal returns (uint256 reserveA, uint256 reserveB) {\n        // first get reserves before the swap\n        (reserveA, reserveB) = ButterLibrary.getReserves(factory, tokenA, tokenB);\n\n        require(reserveA > 0 && reserveB > 0, 'ButterArbitrageLibrary: ZERO_PAIR_RESERVES');\n\n        // then compute how much to swap to arb to the true price\n        (bool aToB, uint256 amountIn) = computeProfitMaximizingTrade(truePriceTokenA, truePriceTokenB, reserveA, reserveB);\n\n        if (amountIn == 0) {\n            return (reserveA, reserveB);\n        }\n\n        // now affect the trade to the reserves\n        if (aToB) {\n            uint amountOut = ButterLibrary.getAmountOut(amountIn, reserveA, reserveB);\n            reserveA += amountIn;\n            reserveB -= amountOut;\n        } else {\n            uint amountOut = ButterLibrary.getAmountOut(amountIn, reserveB, reserveA);\n            reserveB += amountIn;\n            reserveA -= amountOut;\n        }\n    }\n\n    // computes liquidity value given all the parameters of the pair\n    function computeLiquidityValue(\n        uint256 reservesA,\n        uint256 reservesB,\n        uint256 totalSupply,\n        uint256 liquidityAmount,\n        bool feeOn,\n        uint kLast\n    ) internal pure returns (uint256 tokenAAmount, uint256 tokenBAmount) {\n        if (feeOn && kLast > 0) {\n            uint rootK = Babylonian.sqrt(reservesA.mul(reservesB));\n            uint rootKLast = Babylonian.sqrt(kLast);\n            if (rootK > rootKLast) {\n                uint numerator1 = totalSupply;\n                uint numerator2 = rootK.sub(rootKLast);\n                uint denominator = rootK.mul(5).add(rootKLast);\n                uint feeLiquidity = FullMath.mulDiv(numerator1, numerator2, denominator);\n                totalSupply = totalSupply.add(feeLiquidity);\n            }\n        }\n        return (reservesA.mul(liquidityAmount) / totalSupply, reservesB.mul(liquidityAmount) / totalSupply);\n    }\n\n    // get all current parameters from the pair and compute value of a liquidity amount\n    // **note this is subject to manipulation, e.g. sandwich attacks**. prefer passing a manipulation resistant price to\n    // #getLiquidityValueAfterArbitrageToPrice\n    function getLiquidityValue(\n        address factory,\n        address tokenA,\n        address tokenB,\n        uint256 liquidityAmount\n    ) internal view returns (uint256 tokenAAmount, uint256 tokenBAmount) {\n        (uint256 reservesA, uint256 reservesB) = ButterLibrary.getReserves(factory, tokenA, tokenB);\n        IButterPair pair = IButterPair(ButterLibrary.pairFor(factory, tokenA, tokenB));\n        bool feeOn = IButterFactory(factory).feeTo() != address(0);\n        uint kLast = feeOn ? pair.kLast() : 0;\n        uint totalSupply = pair.totalSupply();\n        return computeLiquidityValue(reservesA, reservesB, totalSupply, liquidityAmount, feeOn, kLast);\n    }\n\n    // given two tokens, tokenA and tokenB, and their \"true price\", i.e. the observed ratio of value of token A to token B,\n    // and a liquidity amount, returns the value of the liquidity in terms of tokenA and tokenB\n    function getLiquidityValueAfterArbitrageToPrice(\n        address factory,\n        address tokenA,\n        address tokenB,\n        uint256 truePriceTokenA,\n        uint256 truePriceTokenB,\n        uint256 liquidityAmount\n    ) internal view returns (\n        uint256 tokenAAmount,\n        uint256 tokenBAmount\n    ) {\n        bool feeOn = IButterFactory(factory).feeTo() != address(0);\n        IButterPair pair = IButterPair(ButterLibrary.pairFor(factory, tokenA, tokenB));\n        uint kLast = feeOn ? pair.kLast() : 0;\n        uint totalSupply = pair.totalSupply();\n\n        // this also checks that totalSupply > 0\n        require(totalSupply >= liquidityAmount && liquidityAmount > 0, 'ComputeLiquidityValue: LIQUIDITY_AMOUNT');\n\n        (uint reservesA, uint reservesB) = getReservesAfterArbitrage(factory, tokenA, tokenB, truePriceTokenA, truePriceTokenB);\n\n        return computeLiquidityValue(reservesA, reservesB, totalSupply, liquidityAmount, feeOn, kLast);\n    }\n}\n"
    },
    "contracts/libraries/ButterOracleLibrary.sol": {
      "content": "pragma solidity >=0.5.0;\n\nimport \"../interfaces/IButterPair.sol\";\nimport \"@uniswap/lib/contracts/libraries/FixedPoint.sol\";\n\n// library with helper methods for oracles that are concerned with computing average prices\nlibrary ButterOracleLibrary {\n\tusing FixedPoint for *;\n\n\t// helper function that returns the current block timestamp within the range of uint32, i.e. [0, 2**32 - 1]\n\tfunction currentBlockTimestamp() internal view returns (uint32) {\n\t\treturn uint32(block.timestamp % 2 ** 32);\n\t}\n\n\t// produces the cumulative price using counterfactuals to save gas and avoid a call to sync.\n\tfunction currentCumulativePrices(\n\t\taddress pair\n\t)\n\t\tinternal\n\t\tview\n\t\treturns (\n\t\t\tuint price0Cumulative,\n\t\t\tuint price1Cumulative,\n\t\t\tuint32 blockTimestamp\n\t\t)\n\t{\n\t\tblockTimestamp = currentBlockTimestamp();\n\t\tprice0Cumulative = IButterPair(pair).price0CumulativeLast();\n\t\tprice1Cumulative = IButterPair(pair).price1CumulativeLast();\n\n\t\t// if time has elapsed since the last update on the pair, mock the accumulated price values\n\t\t(\n\t\t\tuint112 reserve0,\n\t\t\tuint112 reserve1,\n\t\t\tuint112 _reserve0Pending,\n\t\t\tuint112 _reserve1Pending,\n\t\t\tuint32 blockTimestampLast\n\t\t) = IButterPair(pair).getReserves();\n\t\tif (blockTimestampLast != blockTimestamp) {\n\t\t\t// subtraction overflow is desired\n\t\t\tuint32 timeElapsed = blockTimestamp - blockTimestampLast;\n\t\t\t// addition overflow is desired\n\t\t\t// counterfactual\n\t\t\tprice0Cumulative +=\n\t\t\t\tuint(FixedPoint.fraction(reserve1, reserve0)._x) *\n\t\t\t\ttimeElapsed;\n\t\t\t// counterfactual\n\t\t\tprice1Cumulative +=\n\t\t\t\tuint(FixedPoint.fraction(reserve0, reserve1)._x) *\n\t\t\t\ttimeElapsed;\n\t\t}\n\t}\n}\n"
    },
    "contracts/libraries/FixedPoint96.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.4.0;\n\n/// @title FixedPoint96\n/// @notice A library for handling binary fixed point numbers, see https://en.wikipedia.org/wiki/Q_(number_format)\n/// @dev Used in SqrtPriceMath.sol\nlibrary FixedPoint96 {\n    uint8 internal constant RESOLUTION = 96;\n    uint256 internal constant Q96 = 0x1000000000000000000000000;\n}\n"
    },
    "contracts/libraries/FullMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.4.0 <0.8.0;\n\n/// @title Contains 512-bit math functions\n/// @notice Facilitates multiplication and division that can have overflow of an intermediate value without any loss of precision\n/// @dev Handles \"phantom overflow\" i.e., allows multiplication and division where an intermediate value overflows 256 bits\nlibrary FullMath {\n\t/// @notice Calculates floor(a×b÷denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n\t/// @param a The multiplicand\n\t/// @param b The multiplier\n\t/// @param denominator The divisor\n\t/// @return result The 256-bit result\n\t/// @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv\n\tfunction mulDiv(\n\t\tuint256 a,\n\t\tuint256 b,\n\t\tuint256 denominator\n\t) internal pure returns (uint256 result) {\n\t\t// 512-bit multiply [prod1 prod0] = a * b\n\t\t// Compute the product mod 2**256 and mod 2**256 - 1\n\t\t// then use the Chinese Remainder Theorem to reconstruct\n\t\t// the 512 bit result. The result is stored in two 256\n\t\t// variables such that product = prod1 * 2**256 + prod0\n\t\tuint256 prod0; // Least significant 256 bits of the product\n\t\tuint256 prod1; // Most significant 256 bits of the product\n\t\tassembly {\n\t\t\tlet mm := mulmod(a, b, not(0))\n\t\t\tprod0 := mul(a, b)\n\t\t\tprod1 := sub(sub(mm, prod0), lt(mm, prod0))\n\t\t}\n\n\t\t// Handle non-overflow cases, 256 by 256 division\n\t\tif (prod1 == 0) {\n\t\t\trequire(denominator > 0);\n\t\t\tassembly {\n\t\t\t\tresult := div(prod0, denominator)\n\t\t\t}\n\t\t\treturn result;\n\t\t}\n\n\t\t// Make sure the result is less than 2**256.\n\t\t// Also prevents denominator == 0\n\t\trequire(denominator > prod1);\n\n\t\t///////////////////////////////////////////////\n\t\t// 512 by 256 division.\n\t\t///////////////////////////////////////////////\n\n\t\t// Make division exact by subtracting the remainder from [prod1 prod0]\n\t\t// Compute remainder using mulmod\n\t\tuint256 remainder;\n\t\tassembly {\n\t\t\tremainder := mulmod(a, b, denominator)\n\t\t}\n\t\t// Subtract 256 bit number from 512 bit number\n\t\tassembly {\n\t\t\tprod1 := sub(prod1, gt(remainder, prod0))\n\t\t\tprod0 := sub(prod0, remainder)\n\t\t}\n\n\t\t// Factor powers of two out of denominator\n\t\t// Compute largest power of two divisor of denominator.\n\t\t// Always >= 1.\n\t\tuint256 twos = -denominator & denominator;\n\t\t// Divide denominator by power of two\n\t\tassembly {\n\t\t\tdenominator := div(denominator, twos)\n\t\t}\n\n\t\t// Divide [prod1 prod0] by the factors of two\n\t\tassembly {\n\t\t\tprod0 := div(prod0, twos)\n\t\t}\n\t\t// Shift in bits from prod1 into prod0. For this we need\n\t\t// to flip `twos` such that it is 2**256 / twos.\n\t\t// If twos is zero, then it becomes one\n\t\tassembly {\n\t\t\ttwos := add(div(sub(0, twos), twos), 1)\n\t\t}\n\t\tprod0 |= prod1 * twos;\n\n\t\t// Invert denominator mod 2**256\n\t\t// Now that denominator is an odd number, it has an inverse\n\t\t// modulo 2**256 such that denominator * inv = 1 mod 2**256.\n\t\t// Compute the inverse by starting with a seed that is correct\n\t\t// correct for four bits. That is, denominator * inv = 1 mod 2**4\n\t\tuint256 inv = (3 * denominator) ^ 2;\n\t\t// Now use Newton-Raphson iteration to improve the precision.\n\t\t// Thanks to Hensel's lifting lemma, this also works in modular\n\t\t// arithmetic, doubling the correct bits in each step.\n\t\tinv *= 2 - denominator * inv; // inverse mod 2**8\n\t\tinv *= 2 - denominator * inv; // inverse mod 2**16\n\t\tinv *= 2 - denominator * inv; // inverse mod 2**32\n\t\tinv *= 2 - denominator * inv; // inverse mod 2**64\n\t\tinv *= 2 - denominator * inv; // inverse mod 2**128\n\t\tinv *= 2 - denominator * inv; // inverse mod 2**256\n\n\t\t// Because the division is now exact we can divide by multiplying\n\t\t// with the modular inverse of denominator. This will give us the\n\t\t// correct result modulo 2**256. Since the precoditions guarantee\n\t\t// that the outcome is less than 2**256, this is the final result.\n\t\t// We don't need to compute the high bits of the result and prod1\n\t\t// is no longer required.\n\t\tresult = prod0 * inv;\n\t\treturn result;\n\t}\n\n\t/// @notice Calculates ceil(a×b÷denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n\t/// @param a The multiplicand\n\t/// @param b The multiplier\n\t/// @param denominator The divisor\n\t/// @return result The 256-bit result\n\tfunction mulDivRoundingUp(\n\t\tuint256 a,\n\t\tuint256 b,\n\t\tuint256 denominator\n\t) internal pure returns (uint256 result) {\n\t\tresult = mulDiv(a, b, denominator);\n\t\tif (mulmod(a, b, denominator) > 0) {\n\t\t\trequire(result < uint256(-1));\n\t\t\tresult++;\n\t\t}\n\t}\n}\n"
    },
    "contracts/libraries/LiquidityMath.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Math library for liquidity\nlibrary LiquidityMath {\n    /// @notice Add a signed liquidity delta to liquidity and revert if it overflows or underflows\n    /// @param x The liquidity before change\n    /// @param y The delta by which liquidity should be changed\n    /// @return z The liquidity delta\n    function addDelta(uint128 x, int128 y) internal pure returns (uint128 z) {\n        if (y < 0) {\n            require((z = x - uint128(-y)) < x, 'LS');\n        } else {\n            require((z = x + uint128(y)) >= x, 'LA');\n        }\n    }\n}\n"
    },
    "contracts/libraries/LowGasSafeMath.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.6.0;\n\n/// @title Optimized overflow and underflow safe math operations\n/// @notice Contains methods for doing math operations that revert on overflow or underflow for minimal gas cost\nlibrary LowGasSafeMath {\n    /// @notice Returns x + y, reverts if sum overflows uint256\n    /// @param x The augend\n    /// @param y The addend\n    /// @return z The sum of x and y\n    function add(uint256 x, uint256 y) internal pure returns (uint256 z) {\n        require((z = x + y) >= x);\n    }\n\n    /// @notice Returns x - y, reverts if underflows\n    /// @param x The minuend\n    /// @param y The subtrahend\n    /// @return z The difference of x and y\n    function sub(uint256 x, uint256 y) internal pure returns (uint256 z) {\n        require((z = x - y) <= x);\n    }\n\n    /// @notice Returns x * y, reverts if overflows\n    /// @param x The multiplicand\n    /// @param y The multiplier\n    /// @return z The product of x and y\n    function mul(uint256 x, uint256 y) internal pure returns (uint256 z) {\n        require(x == 0 || (z = x * y) / x == y);\n    }\n\n    /// @notice Returns x + y, reverts if overflows or underflows\n    /// @param x The augend\n    /// @param y The addend\n    /// @return z The sum of x and y\n    function add(int256 x, int256 y) internal pure returns (int256 z) {\n        require((z = x + y) >= x == (y >= 0));\n    }\n\n    /// @notice Returns x - y, reverts if overflows or underflows\n    /// @param x The minuend\n    /// @param y The subtrahend\n    /// @return z The difference of x and y\n    function sub(int256 x, int256 y) internal pure returns (int256 z) {\n        require((z = x - y) <= x == (y >= 0));\n    }\n}\n"
    },
    "contracts/libraries/Math.sol": {
      "content": "pragma solidity =0.6.6;\n\n// a library for performing various math operations\n\nlibrary Math {\n    function min(uint x, uint y) internal pure returns (uint z) {\n        z = x < y ? x : y;\n    }\n\n    // babylonian method (https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method)\n    function sqrt(uint y) internal pure returns (uint z) {\n        if (y > 3) {\n            z = y;\n            uint x = y / 2 + 1;\n            while (x < z) {\n                z = x;\n                x = (y / x + x) / 2;\n            }\n        } else if (y != 0) {\n            z = 1;\n        }\n    }\n}\n"
    },
    "contracts/libraries/SafeCast.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Safe casting methods\n/// @notice Contains methods for safely casting between types\nlibrary SafeCast {\n    /// @notice Cast a uint256 to a uint160, revert on overflow\n    /// @param y The uint256 to be downcasted\n    /// @return z The downcasted integer, now type uint160\n    function toUint160(uint256 y) internal pure returns (uint160 z) {\n        require((z = uint160(y)) == y);\n    }\n\n    /// @notice Cast a int256 to a int128, revert on overflow or underflow\n    /// @param y The int256 to be downcasted\n    /// @return z The downcasted integer, now type int128\n    function toInt128(int256 y) internal pure returns (int128 z) {\n        require((z = int128(y)) == y);\n    }\n\n    /// @notice Cast a uint256 to a int256, revert on overflow\n    /// @param y The uint256 to be casted\n    /// @return z The casted integer, now type int256\n    function toInt256(uint256 y) internal pure returns (int256 z) {\n        require(y < 2**255);\n        z = int256(y);\n    }\n}\n"
    },
    "contracts/libraries/SafeMath.sol": {
      "content": "pragma solidity =0.6.6;\n\n// a library for performing overflow-safe math, courtesy of DappHub (https://github.com/dapphub/ds-math)\n\nlibrary SafeMath {\n    function add(uint x, uint y) internal pure returns (uint z) {\n        require((z = x + y) >= x, 'ds-math-add-overflow');\n    }\n\n    function sub(uint x, uint y) internal pure returns (uint z) {\n        require((z = x - y) <= x, 'ds-math-sub-underflow');\n    }\n\n    function mul(uint x, uint y) internal pure returns (uint z) {\n        require(y == 0 || (z = x * y) / y == x, 'ds-math-mul-overflow');\n    }\n}\n"
    },
    "contracts/libraries/SqrtPriceMath.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity >=0.5.0;\n\nimport \"./LowGasSafeMath.sol\";\nimport \"./SafeCast.sol\";\n\nimport \"./FullMath.sol\";\nimport \"./UnsafeMath.sol\";\nimport \"./FixedPoint96.sol\";\n\n/// @title Functions based on Q64.96 sqrt price and liquidity\n/// @notice Contains the math that uses square root of price as a Q64.96 and liquidity to compute deltas\nlibrary SqrtPriceMath {\n\tusing LowGasSafeMath for uint256;\n\tusing SafeCast for uint256;\n\n\t/// @notice Gets the next sqrt price given a delta of token0\n\t/// @dev Always rounds up, because in the exact output case (increasing price) we need to move the price at least\n\t/// far enough to get the desired output amount, and in the exact input case (decreasing price) we need to move the\n\t/// price less in order to not send too much output.\n\t/// The most precise formula for this is liquidity * sqrtPX96 / (liquidity +- amount * sqrtPX96),\n\t/// if this is impossible because of overflow, we calculate liquidity / (liquidity / sqrtPX96 +- amount).\n\t/// @param sqrtPX96 The starting price, i.e. before accounting for the token0 delta\n\t/// @param liquidity The amount of usable liquidity\n\t/// @param amount How much of token0 to add or remove from virtual reserves\n\t/// @param add Whether to add or remove the amount of token0\n\t/// @return The price after adding or removing amount, depending on add\n\tfunction getNextSqrtPriceFromAmount0RoundingUp(\n\t\tuint160 sqrtPX96,\n\t\tuint128 liquidity,\n\t\tuint256 amount,\n\t\tbool add\n\t) internal pure returns (uint160) {\n\t\t// we short circuit amount == 0 because the result is otherwise not guaranteed to equal the input price\n\t\tif (amount == 0) return sqrtPX96;\n\t\tuint256 numerator1 = uint256(liquidity) << FixedPoint96.RESOLUTION;\n\n\t\tif (add) {\n\t\t\tuint256 product;\n\t\t\tif ((product = amount * sqrtPX96) / amount == sqrtPX96) {\n\t\t\t\tuint256 denominator = numerator1 + product;\n\t\t\t\tif (denominator >= numerator1)\n\t\t\t\t\t// always fits in 160 bits\n\t\t\t\t\treturn\n\t\t\t\t\t\tuint160(\n\t\t\t\t\t\t\tFullMath.mulDivRoundingUp(\n\t\t\t\t\t\t\t\tnumerator1,\n\t\t\t\t\t\t\t\tsqrtPX96,\n\t\t\t\t\t\t\t\tdenominator\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t);\n\t\t\t}\n\n\t\t\treturn\n\t\t\t\tuint160(\n\t\t\t\t\tUnsafeMath.divRoundingUp(\n\t\t\t\t\t\tnumerator1,\n\t\t\t\t\t\t(numerator1 / sqrtPX96).add(amount)\n\t\t\t\t\t)\n\t\t\t\t);\n\t\t} else {\n\t\t\tuint256 product;\n\t\t\t// if the product overflows, we know the denominator underflows\n\t\t\t// in addition, we must check that the denominator does not underflow\n\t\t\trequire(\n\t\t\t\t(product = amount * sqrtPX96) / amount == sqrtPX96 &&\n\t\t\t\t\tnumerator1 > product\n\t\t\t);\n\t\t\tuint256 denominator = numerator1 - product;\n\t\t\treturn\n\t\t\t\tFullMath\n\t\t\t\t\t.mulDivRoundingUp(numerator1, sqrtPX96, denominator)\n\t\t\t\t\t.toUint160();\n\t\t}\n\t}\n\n\t/// @notice Gets the next sqrt price given a delta of token1\n\t/// @dev Always rounds down, because in the exact output case (decreasing price) we need to move the price at least\n\t/// far enough to get the desired output amount, and in the exact input case (increasing price) we need to move the\n\t/// price less in order to not send too much output.\n\t/// The formula we compute is within <1 wei of the lossless version: sqrtPX96 +- amount / liquidity\n\t/// @param sqrtPX96 The starting price, i.e., before accounting for the token1 delta\n\t/// @param liquidity The amount of usable liquidity\n\t/// @param amount How much of token1 to add, or remove, from virtual reserves\n\t/// @param add Whether to add, or remove, the amount of token1\n\t/// @return The price after adding or removing `amount`\n\tfunction getNextSqrtPriceFromAmount1RoundingDown(\n\t\tuint160 sqrtPX96,\n\t\tuint128 liquidity,\n\t\tuint256 amount,\n\t\tbool add\n\t) internal pure returns (uint160) {\n\t\t// if we're adding (subtracting), rounding down requires rounding the quotient down (up)\n\t\t// in both cases, avoid a mulDiv for most inputs\n\t\tif (add) {\n\t\t\tuint256 quotient = (\n\t\t\t\tamount <= uint256(-1)\n\t\t\t\t\t? (amount << FixedPoint96.RESOLUTION) / liquidity\n\t\t\t\t\t: FullMath.mulDiv(amount, FixedPoint96.Q96, liquidity)\n\t\t\t);\n\n\t\t\treturn uint256(sqrtPX96).add(quotient).toUint160();\n\t\t} else {\n\t\t\tuint256 quotient = (\n\t\t\t\tamount <= uint160(-1)\n\t\t\t\t\t? UnsafeMath.divRoundingUp(\n\t\t\t\t\t\tamount << FixedPoint96.RESOLUTION,\n\t\t\t\t\t\tliquidity\n\t\t\t\t\t)\n\t\t\t\t\t: FullMath.mulDivRoundingUp(\n\t\t\t\t\t\tamount,\n\t\t\t\t\t\tFixedPoint96.Q96,\n\t\t\t\t\t\tliquidity\n\t\t\t\t\t)\n\t\t\t);\n\n\t\t\trequire(sqrtPX96 > quotient);\n\t\t\t// always fits 160 bits\n\t\t\treturn uint160(sqrtPX96 - quotient);\n\t\t}\n\t}\n\n\t/// @notice Gets the next sqrt price given an input amount of token0 or token1\n\t/// @dev Throws if price or liquidity are 0, or if the next price is out of bounds\n\t/// @param sqrtPX96 The starting price, i.e., before accounting for the input amount\n\t/// @param liquidity The amount of usable liquidity\n\t/// @param amountIn How much of token0, or token1, is being swapped in\n\t/// @param zeroForOne Whether the amount in is token0 or token1\n\t/// @return sqrtQX96 The price after adding the input amount to token0 or token1\n\tfunction getNextSqrtPriceFromInput(\n\t\tuint160 sqrtPX96,\n\t\tuint128 liquidity,\n\t\tuint256 amountIn,\n\t\tbool zeroForOne\n\t) internal pure returns (uint160 sqrtQX96) {\n\t\trequire(sqrtPX96 > 0);\n\t\trequire(liquidity > 0);\n\n\t\t// round to make sure that we don't pass the target price\n\t\treturn\n\t\t\tzeroForOne\n\t\t\t\t? getNextSqrtPriceFromAmount0RoundingUp(\n\t\t\t\t\tsqrtPX96,\n\t\t\t\t\tliquidity,\n\t\t\t\t\tamountIn,\n\t\t\t\t\ttrue\n\t\t\t\t)\n\t\t\t\t: getNextSqrtPriceFromAmount1RoundingDown(\n\t\t\t\t\tsqrtPX96,\n\t\t\t\t\tliquidity,\n\t\t\t\t\tamountIn,\n\t\t\t\t\ttrue\n\t\t\t\t);\n\t}\n\n\t/// @notice Gets the next sqrt price given an output amount of token0 or token1\n\t/// @dev Throws if price or liquidity are 0 or the next price is out of bounds\n\t/// @param sqrtPX96 The starting price before accounting for the output amount\n\t/// @param liquidity The amount of usable liquidity\n\t/// @param amountOut How much of token0, or token1, is being swapped out\n\t/// @param zeroForOne Whether the amount out is token0 or token1\n\t/// @return sqrtQX96 The price after removing the output amount of token0 or token1\n\tfunction getNextSqrtPriceFromOutput(\n\t\tuint160 sqrtPX96,\n\t\tuint128 liquidity,\n\t\tuint256 amountOut,\n\t\tbool zeroForOne\n\t) internal pure returns (uint160 sqrtQX96) {\n\t\trequire(sqrtPX96 > 0);\n\t\trequire(liquidity > 0);\n\n\t\t// round to make sure that we pass the target price\n\t\treturn\n\t\t\tzeroForOne\n\t\t\t\t? getNextSqrtPriceFromAmount1RoundingDown(\n\t\t\t\t\tsqrtPX96,\n\t\t\t\t\tliquidity,\n\t\t\t\t\tamountOut,\n\t\t\t\t\tfalse\n\t\t\t\t)\n\t\t\t\t: getNextSqrtPriceFromAmount0RoundingUp(\n\t\t\t\t\tsqrtPX96,\n\t\t\t\t\tliquidity,\n\t\t\t\t\tamountOut,\n\t\t\t\t\tfalse\n\t\t\t\t);\n\t}\n\n\t/// @notice Gets the amount0 delta between two prices\n\t/// @dev Calculates liquidity / sqrt(lower) - liquidity / sqrt(upper),\n\t/// i.e. liquidity * (sqrt(upper) - sqrt(lower)) / (sqrt(upper) * sqrt(lower))\n\t/// @param sqrtRatioAX96 A sqrt price\n\t/// @param sqrtRatioBX96 Another sqrt price\n\t/// @param liquidity The amount of usable liquidity\n\t/// @param roundUp Whether to round the amount up or down\n\t/// @return amount0 Amount of token0 required to cover a position of size liquidity between the two passed prices\n\tfunction getAmount0Delta(\n\t\tuint160 sqrtRatioAX96,\n\t\tuint160 sqrtRatioBX96,\n\t\tuint128 liquidity,\n\t\tbool roundUp\n\t) internal pure returns (uint256 amount0) {\n\t\tif (sqrtRatioAX96 > sqrtRatioBX96)\n\t\t\t(sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\n\n\t\tuint256 numerator1 = uint256(liquidity) << FixedPoint96.RESOLUTION;\n\t\tuint256 numerator2 = sqrtRatioBX96 - sqrtRatioAX96;\n\n\t\trequire(sqrtRatioAX96 > 0);\n\n\t\treturn\n\t\t\troundUp\n\t\t\t\t? UnsafeMath.divRoundingUp(\n\t\t\t\t\tFullMath.mulDivRoundingUp(\n\t\t\t\t\t\tnumerator1,\n\t\t\t\t\t\tnumerator2,\n\t\t\t\t\t\tsqrtRatioBX96\n\t\t\t\t\t),\n\t\t\t\t\tsqrtRatioAX96\n\t\t\t\t)\n\t\t\t\t: FullMath.mulDiv(numerator1, numerator2, sqrtRatioBX96) /\n\t\t\t\t\tsqrtRatioAX96;\n\t}\n\n\t/// @notice Gets the amount1 delta between two prices\n\t/// @dev Calculates liquidity * (sqrt(upper) - sqrt(lower))\n\t/// @param sqrtRatioAX96 A sqrt price\n\t/// @param sqrtRatioBX96 Another sqrt price\n\t/// @param liquidity The amount of usable liquidity\n\t/// @param roundUp Whether to round the amount up, or down\n\t/// @return amount1 Amount of token1 required to cover a position of size liquidity between the two passed prices\n\tfunction getAmount1Delta(\n\t\tuint160 sqrtRatioAX96,\n\t\tuint160 sqrtRatioBX96,\n\t\tuint128 liquidity,\n\t\tbool roundUp\n\t) internal pure returns (uint256 amount1) {\n\t\tif (sqrtRatioAX96 > sqrtRatioBX96)\n\t\t\t(sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\n\n\t\treturn\n\t\t\troundUp\n\t\t\t\t? FullMath.mulDivRoundingUp(\n\t\t\t\t\tliquidity,\n\t\t\t\t\tsqrtRatioBX96 - sqrtRatioAX96,\n\t\t\t\t\tFixedPoint96.Q96\n\t\t\t\t)\n\t\t\t\t: FullMath.mulDiv(\n\t\t\t\t\tliquidity,\n\t\t\t\t\tsqrtRatioBX96 - sqrtRatioAX96,\n\t\t\t\t\tFixedPoint96.Q96\n\t\t\t\t);\n\t}\n\n\t/// @notice Helper that gets signed token0 delta\n\t/// @param sqrtRatioAX96 A sqrt price\n\t/// @param sqrtRatioBX96 Another sqrt price\n\t/// @param liquidity The change in liquidity for which to compute the amount0 delta\n\t/// @return amount0 Amount of token0 corresponding to the passed liquidityDelta between the two prices\n\tfunction getAmount0Delta(\n\t\tuint160 sqrtRatioAX96,\n\t\tuint160 sqrtRatioBX96,\n\t\tint128 liquidity\n\t) internal pure returns (int256 amount0) {\n\t\treturn\n\t\t\tliquidity < 0\n\t\t\t\t? -getAmount0Delta(\n\t\t\t\t\tsqrtRatioAX96,\n\t\t\t\t\tsqrtRatioBX96,\n\t\t\t\t\tuint128(-liquidity),\n\t\t\t\t\tfalse\n\t\t\t\t).toInt256()\n\t\t\t\t: getAmount0Delta(\n\t\t\t\t\tsqrtRatioAX96,\n\t\t\t\t\tsqrtRatioBX96,\n\t\t\t\t\tuint128(liquidity),\n\t\t\t\t\ttrue\n\t\t\t\t).toInt256();\n\t}\n\n\t/// @notice Helper that gets signed token1 delta\n\t/// @param sqrtRatioAX96 A sqrt price\n\t/// @param sqrtRatioBX96 Another sqrt price\n\t/// @param liquidity The change in liquidity for which to compute the amount1 delta\n\t/// @return amount1 Amount of token1 corresponding to the passed liquidityDelta between the two prices\n\tfunction getAmount1Delta(\n\t\tuint160 sqrtRatioAX96,\n\t\tuint160 sqrtRatioBX96,\n\t\tint128 liquidity\n\t) internal pure returns (int256 amount1) {\n\t\treturn\n\t\t\tliquidity < 0\n\t\t\t\t? -getAmount1Delta(\n\t\t\t\t\tsqrtRatioAX96,\n\t\t\t\t\tsqrtRatioBX96,\n\t\t\t\t\tuint128(-liquidity),\n\t\t\t\t\tfalse\n\t\t\t\t).toInt256()\n\t\t\t\t: getAmount1Delta(\n\t\t\t\t\tsqrtRatioAX96,\n\t\t\t\t\tsqrtRatioBX96,\n\t\t\t\t\tuint128(liquidity),\n\t\t\t\t\ttrue\n\t\t\t\t).toInt256();\n\t}\n}\n"
    },
    "contracts/libraries/Tick.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity >=0.5.0 <0.8.0;\n\nimport \"./LowGasSafeMath.sol\";\nimport \"./SafeCast.sol\";\n\nimport \"./TickMath.sol\";\nimport \"./LiquidityMath.sol\";\n\n/// @title Tick\n/// @notice Contains functions for managing tick processes and relevant calculations\nlibrary Tick {\n\tusing LowGasSafeMath for int256;\n\tusing SafeCast for int256;\n\n\t// info stored for each initialized individual tick\n\tstruct Info {\n\t\t// the total position liquidity that references this tick\n\t\tuint128 liquidityGross;\n\t\t// amount of net liquidity added (subtracted) when tick is crossed from left to right (right to left),\n\t\tint128 liquidityNet;\n\t\t// the cumulative tick value on the other side of the tick\n\t\tint56 tickCumulativeOutside;\n\t\t// the seconds per unit of liquidity on the _other_ side of this tick (relative to the current tick)\n\t\t// only has relative meaning, not absolute — the value depends on when the tick is initialized\n\t\tuint160 secondsPerLiquidityOutsideX128;\n\t\t// the seconds spent on the other side of the tick (relative to the current tick)\n\t\t// only has relative meaning, not absolute — the value depends on when the tick is initialized\n\t\tuint32 secondsOutside;\n\t\t// true iff the tick is initialized, i.e. the value is exactly equivalent to the expression liquidityGross != 0\n\t\t// these 8 bits are set to prevent fresh sstores when crossing newly initialized ticks\n\t\tbool initialized;\n\t}\n\n\t/// @notice Derives max liquidity per tick from given tick spacing\n\t/// @dev Executed within the pool constructor\n\t/// @param tickSpacing The amount of required tick separation, realized in multiples of `tickSpacing`\n\t///     e.g., a tickSpacing of 3 requires ticks to be initialized every 3rd tick i.e., ..., -6, -3, 0, 3, 6, ...\n\t/// @return The max liquidity per tick\n\tfunction tickSpacingToMaxLiquidityPerTick(\n\t\tint24 tickSpacing\n\t) internal pure returns (uint128) {\n\t\tint24 minTick = (TickMath.MIN_TICK / tickSpacing) * tickSpacing;\n\t\tint24 maxTick = (TickMath.MAX_TICK / tickSpacing) * tickSpacing;\n\t\tuint24 numTicks = uint24((maxTick - minTick) / tickSpacing) + 1;\n\t\treturn uint128(-1) / numTicks;\n\t}\n\n\t/// @notice Updates a tick and returns true if the tick was flipped from initialized to uninitialized, or vice versa\n\t/// @param self The mapping containing all tick information for initialized ticks\n\t/// @param tick The tick that will be updated\n\t/// @param liquidityDelta A new amount of liquidity to be added (subtracted) when tick is crossed from left to right (right to left)\n\t/// @param upper true for updating a position's upper tick, or false for updating a position's lower tick\n\t/// @param maxLiquidity The maximum liquidity allocation for a single tick\n\t/// @return flipped Whether the tick was flipped from initialized to uninitialized, or vice versa\n\tfunction update(\n\t\tmapping(int24 => Tick.Info) storage self,\n\t\tint24 tick,\n\t\tint128 liquidityDelta,\n\t\tbool upper,\n\t\tuint128 maxLiquidity\n\t) internal returns (bool flipped) {\n\t\tTick.Info storage info = self[tick];\n\n\t\tuint128 liquidityGrossBefore = info.liquidityGross;\n\t\tuint128 liquidityGrossAfter = LiquidityMath.addDelta(\n\t\t\tliquidityGrossBefore,\n\t\t\tliquidityDelta\n\t\t);\n\n\t\trequire(liquidityGrossAfter <= maxLiquidity, \"LO\");\n\n\t\tflipped = (liquidityGrossAfter == 0) != (liquidityGrossBefore == 0);\n\n\t\tif (liquidityGrossBefore == 0) {\n\t\t\t// by convention, we assume that all growth before a tick was initialized happened _below_ the tick\n\t\t\tinfo.initialized = true;\n\t\t}\n\n\t\tinfo.liquidityGross = liquidityGrossAfter;\n\n\t\t// when the lower (upper) tick is crossed left to right (right to left), liquidity must be added (removed)\n\t\tinfo.liquidityNet = upper\n\t\t\t? int256(info.liquidityNet).sub(liquidityDelta).toInt128()\n\t\t\t: int256(info.liquidityNet).add(liquidityDelta).toInt128();\n\t}\n\n\t/// @notice Clears tick data\n\t/// @param self The mapping containing all initialized tick information for initialized ticks\n\t/// @param tick The tick that will be cleared\n\tfunction clear(\n\t\tmapping(int24 => Tick.Info) storage self,\n\t\tint24 tick\n\t) internal {\n\t\tdelete self[tick];\n\t}\n\n\t/// @notice Transitions to next tick as needed by price movement\n\t/// @param self The mapping containing all tick information for initialized ticks\n\t/// @param tick The destination tick of the transition\n\t/// @return liquidityNet The amount of liquidity added (subtracted) when tick is crossed from left to right (right to left)\n\tfunction cross(\n\t\tmapping(int24 => Tick.Info) storage self,\n\t\tint24 tick\n\t) internal returns (int128 liquidityNet) {\n\t\tTick.Info storage info = self[tick];\n\t\tliquidityNet = info.liquidityNet;\n\t}\n}\n"
    },
    "contracts/libraries/TickBitmap.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity >=0.5.0;\n\nimport \"./BitMath.sol\";\n\n/// @title Packed tick initialized state library\n/// @notice Stores a packed mapping of tick index to its initialized state\n/// @dev The mapping uses int16 for keys since ticks are represented as int24 and there are 256 (2^8) values per word.\nlibrary TickBitmap {\n\t/// @notice Computes the position in the mapping where the initialized bit for a tick lives\n\t/// @param tick The tick for which to compute the position\n\t/// @return wordPos The key in the mapping containing the word in which the bit is stored\n\t/// @return bitPos The bit position in the word where the flag is stored\n\tfunction position(\n\t\tint24 tick\n\t) private pure returns (int16 wordPos, uint8 bitPos) {\n\t\twordPos = int16(tick >> 8);\n\t\tbitPos = uint8(tick % 256);\n\t}\n\n\t/// @notice Flips the initialized state for a given tick from false to true, or vice versa\n\t/// @param self The mapping in which to flip the tick\n\t/// @param tick The tick to flip\n\t/// @param tickSpacing The spacing between usable ticks\n\tfunction flipTick(\n\t\tmapping(int16 => uint256) storage self,\n\t\tint24 tick,\n\t\tint24 tickSpacing\n\t) internal {\n\t\trequire(tick % tickSpacing == 0); // ensure that the tick is spaced\n\t\t(int16 wordPos, uint8 bitPos) = position(tick / tickSpacing);\n\t\tuint256 mask = 1 << bitPos;\n\t\tself[wordPos] ^= mask;\n\t}\n\n\t/// @notice Returns the next initialized tick contained in the same word (or adjacent word) as the tick that is either\n\t/// to the left (less than or equal to) or right (greater than) of the given tick\n\t/// @param self The mapping in which to compute the next initialized tick\n\t/// @param tick The starting tick\n\t/// @param tickSpacing The spacing between usable ticks\n\t/// @param lte Whether to search for the next initialized tick to the left (less than or equal to the starting tick)\n\t/// @return next The next initialized or uninitialized tick up to 256 ticks away from the current tick\n\t/// @return initialized Whether the next tick is initialized, as the function only searches within up to 256 ticks\n\tfunction nextInitializedTickWithinOneWord(\n\t\tmapping(int16 => uint256) storage self,\n\t\tint24 tick,\n\t\tint24 tickSpacing,\n\t\tbool lte\n\t) internal view returns (int24 next, bool initialized) {\n\t\tint24 compressed = tick / tickSpacing;\n\t\tif (tick < 0 && tick % tickSpacing != 0) compressed--; // round towards negative infinity\n\n\t\tif (lte) {\n\t\t\t(int16 wordPos, uint8 bitPos) = position(compressed);\n\t\t\t// all the 1s at or to the right of the current bitPos\n\t\t\tuint256 mask = (1 << bitPos) - 1 + (1 << bitPos);\n\t\t\tuint256 masked = self[wordPos] & mask;\n\n\t\t\t// if there are no initialized ticks to the right of or at the current tick, return rightmost in the word\n\t\t\tinitialized = masked != 0;\n\t\t\t// overflow/underflow is possible, but prevented externally by limiting both tickSpacing and tick\n\t\t\tnext = initialized\n\t\t\t\t? (compressed -\n\t\t\t\t\tint24(bitPos - BitMath.mostSignificantBit(masked))) *\n\t\t\t\t\ttickSpacing\n\t\t\t\t: (compressed - int24(bitPos)) * tickSpacing;\n\t\t} else {\n\t\t\t// start from the word of the next tick, since the current tick state doesn't matter\n\t\t\t(int16 wordPos, uint8 bitPos) = position(compressed + 1);\n\t\t\t// all the 1s at or to the left of the bitPos\n\t\t\tuint256 mask = ~((1 << bitPos) - 1);\n\t\t\tuint256 masked = self[wordPos] & mask;\n\n\t\t\t// if there are no initialized ticks to the left of the current tick, return leftmost in the word\n\t\t\tinitialized = masked != 0;\n\t\t\t// overflow/underflow is possible, but prevented externally by limiting both tickSpacing and tick\n\t\t\tnext = initialized\n\t\t\t\t? (compressed +\n\t\t\t\t\t1 +\n\t\t\t\t\tint24(BitMath.leastSignificantBit(masked) - bitPos)) *\n\t\t\t\t\ttickSpacing\n\t\t\t\t: (compressed + 1 + int24(uint8(-1) - bitPos)) * tickSpacing;\n\t\t}\n\t}\n}\n"
    },
    "contracts/libraries/TickMath.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0 <0.8.0;\n\n/// @title Math library for computing sqrt prices from ticks and vice versa\n/// @notice Computes sqrt price for ticks of size 1.0001, i.e. sqrt(1.0001^tick) as fixed point Q64.96 numbers. Supports\n/// prices between 2**-128 and 2**128\nlibrary TickMath {\n\t/// @dev The minimum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**-128\n\tint24 internal constant MIN_TICK = -887272;\n\t/// @dev The maximum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**128\n\tint24 internal constant MAX_TICK = -MIN_TICK;\n\n\t/// @dev The minimum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MIN_TICK)\n\tuint160 internal constant MIN_SQRT_RATIO = 4295128739;\n\t/// @dev The maximum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MAX_TICK)\n\tuint160 internal constant MAX_SQRT_RATIO =\n\t\t1461446703485210103287273052203988822378723970342;\n\n\t/// @notice Calculates sqrt(1.0001^tick) * 2^96\n\t/// @dev Throws if |tick| > max tick\n\t/// @param tick The input tick for the above formula\n\t/// @return sqrtPriceX96 A Fixed point Q64.96 number representing the sqrt of the ratio of the two assets (token1/token0)\n\t/// at the given tick\n\tfunction getSqrtRatioAtTick(\n\t\tint24 tick\n\t) internal pure returns (uint160 sqrtPriceX96) {\n\t\tuint256 absTick = tick < 0\n\t\t\t? uint256(-int256(tick))\n\t\t\t: uint256(int256(tick));\n\t\trequire(absTick <= uint256(MAX_TICK), \"T\");\n\n\t\tuint256 ratio = absTick & 0x1 != 0\n\t\t\t? 0xfffcb933bd6fad37aa2d162d1a594001\n\t\t\t: 0x100000000000000000000000000000000;\n\t\tif (absTick & 0x2 != 0)\n\t\t\tratio = (ratio * 0xfff97272373d413259a46990580e213a) >> 128;\n\t\tif (absTick & 0x4 != 0)\n\t\t\tratio = (ratio * 0xfff2e50f5f656932ef12357cf3c7fdcc) >> 128;\n\t\tif (absTick & 0x8 != 0)\n\t\t\tratio = (ratio * 0xffe5caca7e10e4e61c3624eaa0941cd0) >> 128;\n\t\tif (absTick & 0x10 != 0)\n\t\t\tratio = (ratio * 0xffcb9843d60f6159c9db58835c926644) >> 128;\n\t\tif (absTick & 0x20 != 0)\n\t\t\tratio = (ratio * 0xff973b41fa98c081472e6896dfb254c0) >> 128;\n\t\tif (absTick & 0x40 != 0)\n\t\t\tratio = (ratio * 0xff2ea16466c96a3843ec78b326b52861) >> 128;\n\t\tif (absTick & 0x80 != 0)\n\t\t\tratio = (ratio * 0xfe5dee046a99a2a811c461f1969c3053) >> 128;\n\t\tif (absTick & 0x100 != 0)\n\t\t\tratio = (ratio * 0xfcbe86c7900a88aedcffc83b479aa3a4) >> 128;\n\t\tif (absTick & 0x200 != 0)\n\t\t\tratio = (ratio * 0xf987a7253ac413176f2b074cf7815e54) >> 128;\n\t\tif (absTick & 0x400 != 0)\n\t\t\tratio = (ratio * 0xf3392b0822b70005940c7a398e4b70f3) >> 128;\n\t\tif (absTick & 0x800 != 0)\n\t\t\tratio = (ratio * 0xe7159475a2c29b7443b29c7fa6e889d9) >> 128;\n\t\tif (absTick & 0x1000 != 0)\n\t\t\tratio = (ratio * 0xd097f3bdfd2022b8845ad8f792aa5825) >> 128;\n\t\tif (absTick & 0x2000 != 0)\n\t\t\tratio = (ratio * 0xa9f746462d870fdf8a65dc1f90e061e5) >> 128;\n\t\tif (absTick & 0x4000 != 0)\n\t\t\tratio = (ratio * 0x70d869a156d2a1b890bb3df62baf32f7) >> 128;\n\t\tif (absTick & 0x8000 != 0)\n\t\t\tratio = (ratio * 0x31be135f97d08fd981231505542fcfa6) >> 128;\n\t\tif (absTick & 0x10000 != 0)\n\t\t\tratio = (ratio * 0x9aa508b5b7a84e1c677de54f3e99bc9) >> 128;\n\t\tif (absTick & 0x20000 != 0)\n\t\t\tratio = (ratio * 0x5d6af8dedb81196699c329225ee604) >> 128;\n\t\tif (absTick & 0x40000 != 0)\n\t\t\tratio = (ratio * 0x2216e584f5fa1ea926041bedfe98) >> 128;\n\t\tif (absTick & 0x80000 != 0)\n\t\t\tratio = (ratio * 0x48a170391f7dc42444e8fa2) >> 128;\n\n\t\tif (tick > 0) ratio = uint256(-1) / ratio;\n\n\t\t// this divides by 1<<32 rounding up to go from a Q128.128 to a Q128.96.\n\t\t// we then downcast because we know the result always fits within 160 bits due to our tick input constraint\n\t\t// we round up in the division so getTickAtSqrtRatio of the output price is always consistent\n\t\tsqrtPriceX96 = uint160(\n\t\t\t(ratio >> 32) + (ratio % (1 << 32) == 0 ? 0 : 1)\n\t\t);\n\t}\n\n\t/// @notice Calculates the greatest tick value such that getRatioAtTick(tick) <= ratio\n\t/// @dev Throws in case sqrtPriceX96 < MIN_SQRT_RATIO, as MIN_SQRT_RATIO is the lowest value getRatioAtTick may\n\t/// ever return.\n\t/// @param sqrtPriceX96 The sqrt ratio for which to compute the tick as a Q64.96\n\t/// @return tick The greatest tick for which the ratio is less than or equal to the input ratio\n\tfunction getTickAtSqrtRatio(\n\t\tuint160 sqrtPriceX96\n\t) internal pure returns (int24 tick) {\n\t\t// second inequality must be < because the price can never reach the price at the max tick\n\t\trequire(\n\t\t\tsqrtPriceX96 >= MIN_SQRT_RATIO && sqrtPriceX96 < MAX_SQRT_RATIO,\n\t\t\t\"R\"\n\t\t);\n\t\tuint256 ratio = uint256(sqrtPriceX96) << 32;\n\n\t\tuint256 r = ratio;\n\t\tuint256 msb = 0;\n\n\t\tassembly {\n\t\t\tlet f := shl(7, gt(r, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF))\n\t\t\tmsb := or(msb, f)\n\t\t\tr := shr(f, r)\n\t\t}\n\t\tassembly {\n\t\t\tlet f := shl(6, gt(r, 0xFFFFFFFFFFFFFFFF))\n\t\t\tmsb := or(msb, f)\n\t\t\tr := shr(f, r)\n\t\t}\n\t\tassembly {\n\t\t\tlet f := shl(5, gt(r, 0xFFFFFFFF))\n\t\t\tmsb := or(msb, f)\n\t\t\tr := shr(f, r)\n\t\t}\n\t\tassembly {\n\t\t\tlet f := shl(4, gt(r, 0xFFFF))\n\t\t\tmsb := or(msb, f)\n\t\t\tr := shr(f, r)\n\t\t}\n\t\tassembly {\n\t\t\tlet f := shl(3, gt(r, 0xFF))\n\t\t\tmsb := or(msb, f)\n\t\t\tr := shr(f, r)\n\t\t}\n\t\tassembly {\n\t\t\tlet f := shl(2, gt(r, 0xF))\n\t\t\tmsb := or(msb, f)\n\t\t\tr := shr(f, r)\n\t\t}\n\t\tassembly {\n\t\t\tlet f := shl(1, gt(r, 0x3))\n\t\t\tmsb := or(msb, f)\n\t\t\tr := shr(f, r)\n\t\t}\n\t\tassembly {\n\t\t\tlet f := gt(r, 0x1)\n\t\t\tmsb := or(msb, f)\n\t\t}\n\n\t\tif (msb >= 128) r = ratio >> (msb - 127);\n\t\telse r = ratio << (127 - msb);\n\n\t\tint256 log_2 = (int256(msb) - 128) << 64;\n\n\t\tassembly {\n\t\t\tr := shr(127, mul(r, r))\n\t\t\tlet f := shr(128, r)\n\t\t\tlog_2 := or(log_2, shl(63, f))\n\t\t\tr := shr(f, r)\n\t\t}\n\t\tassembly {\n\t\t\tr := shr(127, mul(r, r))\n\t\t\tlet f := shr(128, r)\n\t\t\tlog_2 := or(log_2, shl(62, f))\n\t\t\tr := shr(f, r)\n\t\t}\n\t\tassembly {\n\t\t\tr := shr(127, mul(r, r))\n\t\t\tlet f := shr(128, r)\n\t\t\tlog_2 := or(log_2, shl(61, f))\n\t\t\tr := shr(f, r)\n\t\t}\n\t\tassembly {\n\t\t\tr := shr(127, mul(r, r))\n\t\t\tlet f := shr(128, r)\n\t\t\tlog_2 := or(log_2, shl(60, f))\n\t\t\tr := shr(f, r)\n\t\t}\n\t\tassembly {\n\t\t\tr := shr(127, mul(r, r))\n\t\t\tlet f := shr(128, r)\n\t\t\tlog_2 := or(log_2, shl(59, f))\n\t\t\tr := shr(f, r)\n\t\t}\n\t\tassembly {\n\t\t\tr := shr(127, mul(r, r))\n\t\t\tlet f := shr(128, r)\n\t\t\tlog_2 := or(log_2, shl(58, f))\n\t\t\tr := shr(f, r)\n\t\t}\n\t\tassembly {\n\t\t\tr := shr(127, mul(r, r))\n\t\t\tlet f := shr(128, r)\n\t\t\tlog_2 := or(log_2, shl(57, f))\n\t\t\tr := shr(f, r)\n\t\t}\n\t\tassembly {\n\t\t\tr := shr(127, mul(r, r))\n\t\t\tlet f := shr(128, r)\n\t\t\tlog_2 := or(log_2, shl(56, f))\n\t\t\tr := shr(f, r)\n\t\t}\n\t\tassembly {\n\t\t\tr := shr(127, mul(r, r))\n\t\t\tlet f := shr(128, r)\n\t\t\tlog_2 := or(log_2, shl(55, f))\n\t\t\tr := shr(f, r)\n\t\t}\n\t\tassembly {\n\t\t\tr := shr(127, mul(r, r))\n\t\t\tlet f := shr(128, r)\n\t\t\tlog_2 := or(log_2, shl(54, f))\n\t\t\tr := shr(f, r)\n\t\t}\n\t\tassembly {\n\t\t\tr := shr(127, mul(r, r))\n\t\t\tlet f := shr(128, r)\n\t\t\tlog_2 := or(log_2, shl(53, f))\n\t\t\tr := shr(f, r)\n\t\t}\n\t\tassembly {\n\t\t\tr := shr(127, mul(r, r))\n\t\t\tlet f := shr(128, r)\n\t\t\tlog_2 := or(log_2, shl(52, f))\n\t\t\tr := shr(f, r)\n\t\t}\n\t\tassembly {\n\t\t\tr := shr(127, mul(r, r))\n\t\t\tlet f := shr(128, r)\n\t\t\tlog_2 := or(log_2, shl(51, f))\n\t\t\tr := shr(f, r)\n\t\t}\n\t\tassembly {\n\t\t\tr := shr(127, mul(r, r))\n\t\t\tlet f := shr(128, r)\n\t\t\tlog_2 := or(log_2, shl(50, f))\n\t\t}\n\n\t\tint256 log_sqrt10001 = log_2 * 255738958999603826347141; // 128.128 number\n\n\t\tint24 tickLow = int24(\n\t\t\t(log_sqrt10001 - 3402992956809132418596140100660247210) >> 128\n\t\t);\n\t\tint24 tickHi = int24(\n\t\t\t(log_sqrt10001 + 291339464771989622907027621153398088495) >> 128\n\t\t);\n\n\t\ttick = tickLow == tickHi\n\t\t\t? tickLow\n\t\t\t: getSqrtRatioAtTick(tickHi) <= sqrtPriceX96\n\t\t\t\t? tickHi\n\t\t\t\t: tickLow;\n\t}\n}\n"
    },
    "contracts/libraries/UniswapV2Library.sol": {
      "content": "pragma solidity >=0.5.0;\n\nimport '../interfaces/IUniswapV2Pair.sol';\n\nimport \"./SafeMath.sol\";\n\nlibrary UniswapV2Library {\n    using SafeMath for uint;\n\n    // returns sorted token addresses, used to handle return values from pairs sorted in this order\n    function sortTokens(address tokenA, address tokenB) internal pure returns (address token0, address token1) {\n        require(tokenA != tokenB, 'UniswapV2Library: IDENTICAL_ADDRESSES');\n        (token0, token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\n        require(token0 != address(0), 'UniswapV2Library: ZERO_ADDRESS');\n    }\n\n    // calculates the CREATE2 address for a pair without making any external calls\n    function pairFor(address factory, address tokenA, address tokenB) internal pure returns (address pair) {\n        (address token0, address token1) = sortTokens(tokenA, tokenB);\n        pair = address(uint(keccak256(abi.encodePacked(\n                hex'ff',\n                factory,\n                keccak256(abi.encodePacked(token0, token1)),\n                hex'b6780cc5e49e343cbe9eaac88fa5cbf52b567f104cb445f87075e22136c13f52' // init code hash\n            ))));\n    }\n\n    // fetches and sorts the reserves for a pair\n    function getReserves(address factory, address tokenA, address tokenB) internal view returns (uint reserveA, uint reserveB) {\n        (address token0,) = sortTokens(tokenA, tokenB);\n        (uint reserve0, uint reserve1,) = IUniswapV2Pair(pairFor(factory, tokenA, tokenB)).getReserves();\n        (reserveA, reserveB) = tokenA == token0 ? (reserve0, reserve1) : (reserve1, reserve0);\n    }\n\n    // given some amount of an asset and pair reserves, returns an equivalent amount of the other asset\n    function quote(uint amountA, uint reserveA, uint reserveB) internal pure returns (uint amountB) {\n        require(amountA > 0, 'UniswapV2Library: INSUFFICIENT_AMOUNT');\n        require(reserveA > 0 && reserveB > 0, 'UniswapV2Library: INSUFFICIENT_LIQUIDITY');\n        amountB = amountA.mul(reserveB) / reserveA;\n    }\n\n    // given an input amount of an asset and pair reserves, returns the maximum output amount of the other asset\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) internal pure returns (uint amountOut) {\n        require(amountIn > 0, 'UniswapV2Library: INSUFFICIENT_INPUT_AMOUNT');\n        require(reserveIn > 0 && reserveOut > 0, 'UniswapV2Library: INSUFFICIENT_LIQUIDITY');\n        uint amountInWithFee = amountIn.mul(997);\n        uint numerator = amountInWithFee.mul(reserveOut);\n        uint denominator = reserveIn.mul(1000).add(amountInWithFee);\n        amountOut = numerator / denominator;\n    }\n\n    // given an output amount of an asset and pair reserves, returns a required input amount of the other asset\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) internal pure returns (uint amountIn) {\n        require(amountOut > 0, 'UniswapV2Library: INSUFFICIENT_OUTPUT_AMOUNT');\n        require(reserveIn > 0 && reserveOut > 0, 'UniswapV2Library: INSUFFICIENT_LIQUIDITY');\n        uint numerator = reserveIn.mul(amountOut).mul(1000);\n        uint denominator = reserveOut.sub(amountOut).mul(997);\n        amountIn = (numerator / denominator).add(1);\n    }\n\n    // performs chained getAmountOut calculations on any number of pairs\n    function getAmountsOut(address factory, uint amountIn, address[] memory path) internal view returns (uint[] memory amounts) {\n        require(path.length >= 2, 'UniswapV2Library: INVALID_PATH');\n        amounts = new uint[](path.length);\n        amounts[0] = amountIn;\n        for (uint i; i < path.length - 1; i++) {\n            (uint reserveIn, uint reserveOut) = getReserves(factory, path[i], path[i + 1]);\n            amounts[i + 1] = getAmountOut(amounts[i], reserveIn, reserveOut);\n        }\n    }\n\n    // performs chained getAmountIn calculations on any number of pairs\n    function getAmountsIn(address factory, uint amountOut, address[] memory path) internal view returns (uint[] memory amounts) {\n        require(path.length >= 2, 'UniswapV2Library: INVALID_PATH');\n        amounts = new uint[](path.length);\n        amounts[amounts.length - 1] = amountOut;\n        for (uint i = path.length - 1; i > 0; i--) {\n            (uint reserveIn, uint reserveOut) = getReserves(factory, path[i - 1], path[i]);\n            amounts[i - 1] = getAmountIn(amounts[i], reserveIn, reserveOut);\n        }\n    }\n}\n"
    },
    "contracts/libraries/UnsafeMath.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Math functions that do not check inputs or outputs\n/// @notice Contains methods that perform common math functions but do not do any overflow or underflow checks\nlibrary UnsafeMath {\n    /// @notice Returns ceil(x / y)\n    /// @dev division by 0 has unspecified behavior, and must be checked externally\n    /// @param x The dividend\n    /// @param y The divisor\n    /// @return z The quotient, ceil(x / y)\n    function divRoundingUp(uint256 x, uint256 y) internal pure returns (uint256 z) {\n        assembly {\n            z := add(div(x, y), gt(mod(x, y), 0))\n        }\n    }\n}\n"
    },
    "contracts/libraries/UQ112x112.sol": {
      "content": "pragma solidity =0.6.6;\n\n// a library for handling binary fixed point numbers (https://en.wikipedia.org/wiki/Q_(number_format))\n\n// range: [0, 2**112 - 1]\n// resolution: 1 / 2**112\n\nlibrary UQ112x112 {\n    uint224 constant Q112 = 2**112;\n\n    // encode a uint112 as a UQ112x112\n    function encode(uint112 y) internal pure returns (uint224 z) {\n        z = uint224(y) * Q112; // never overflows\n    }\n\n    // divide a UQ112x112 by a uint112, returning a UQ112x112\n    function uqdiv(uint224 x, uint112 y) internal pure returns (uint224 z) {\n        z = x / uint224(y);\n    }\n}\n"
    },
    "contracts/Tokens.sol": {
      "content": "pragma solidity ^0.6.0;\n\nimport \"./ERC20.sol\";\nimport \"./WETH.sol\";\n\n\ncontract Token is ERC20(\"ButterDX\", \"BDX\", 18) {\n    constructor() public {\n        _mint(msg.sender, 1_000_000 * 10 ** 18);\n    }\n}\n\ncontract WrappedNativeToken is WETH9_ {\n}"
    },
    "contracts/WETH.sol": {
      "content": "// Copyright (C) 2015, 2016, 2017, 2019 Dapphub\n\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n\n// You should have received a copy of the GNU General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\npragma solidity >=0.6.0;\n\ncontract WETH9_ {\n    string public name     = \"Wrapped Ether\";\n    string public symbol   = \"WETH\";\n    uint8  public decimals = 18;\n\n    event  Approval(address indexed src, address indexed guy, uint wad);\n    event  Transfer(address indexed src, address indexed dst, uint wad);\n    event  Deposit(address indexed dst, uint wad);\n    event  Withdrawal(address indexed src, uint wad);\n\n    mapping (address => uint)                       public  balanceOf;\n    mapping (address => mapping (address => uint))  public  allowance;\n\n    receive() external payable {\n        deposit();\n    }\n    function deposit() public payable {\n        balanceOf[msg.sender] += msg.value;\n        emit Deposit(msg.sender, msg.value);\n    }\n    function withdraw(uint wad) public {\n        require(balanceOf[msg.sender] >= wad);\n        balanceOf[msg.sender] -= wad;\n        msg.sender.transfer(wad);\n        emit Withdrawal(msg.sender, wad);\n    }\n\n    function totalSupply() public view returns (uint) {\n        return address(this).balance;\n    }\n\n    function approve(address guy, uint wad) public returns (bool) {\n        allowance[msg.sender][guy] = wad;\n        emit Approval(msg.sender, guy, wad);\n        return true;\n    }\n\n    function transfer(address dst, uint wad) public returns (bool) {\n        return transferFrom(msg.sender, dst, wad);\n    }\n\n    function transferFrom(address src, address dst, uint wad)\n        public\n        returns (bool)\n    {\n        require(balanceOf[src] >= wad);\n\n        if (src != msg.sender && allowance[src][msg.sender] != uint(-1)) {\n            require(allowance[src][msg.sender] >= wad);\n            allowance[src][msg.sender] -= wad;\n        }\n\n        balanceOf[src] -= wad;\n        balanceOf[dst] += wad;\n\n        emit Transfer(src, dst, wad);\n\n        return true;\n    }\n}\n\n\n/*\n                    GNU GENERAL PUBLIC LICENSE\n                       Version 3, 29 June 2007\n\n Copyright (C) 2007 Free Software Foundation, Inc. <http://fsf.org/>\n Everyone is permitted to copy and distribute verbatim copies\n of this license document, but changing it is not allowed.\n\n                            Preamble\n\n  The GNU General Public License is a free, copyleft license for\nsoftware and other kinds of works.\n\n  The licenses for most software and other practical works are designed\nto take away your freedom to share and change the works.  By contrast,\nthe GNU General Public License is intended to guarantee your freedom to\nshare and change all versions of a program--to make sure it remains free\nsoftware for all its users.  We, the Free Software Foundation, use the\nGNU General Public License for most of our software; it applies also to\nany other work released this way by its authors.  You can apply it to\nyour programs, too.\n\n  When we speak of free software, we are referring to freedom, not\nprice.  Our General Public Licenses are designed to make sure that you\nhave the freedom to distribute copies of free software (and charge for\nthem if you wish), that you receive source code or can get it if you\nwant it, that you can change the software or use pieces of it in new\nfree programs, and that you know you can do these things.\n\n  To protect your rights, we need to prevent others from denying you\nthese rights or asking you to surrender the rights.  Therefore, you have\ncertain responsibilities if you distribute copies of the software, or if\nyou modify it: responsibilities to respect the freedom of others.\n\n  For example, if you distribute copies of such a program, whether\ngratis or for a fee, you must pass on to the recipients the same\nfreedoms that you received.  You must make sure that they, too, receive\nor can get the source code.  And you must show them these terms so they\nknow their rights.\n\n  Developers that use the GNU GPL protect your rights with two steps:\n(1) assert copyright on the software, and (2) offer you this License\ngiving you legal permission to copy, distribute and/or modify it.\n\n  For the developers' and authors' protection, the GPL clearly explains\nthat there is no warranty for this free software.  For both users' and\nauthors' sake, the GPL requires that modified versions be marked as\nchanged, so that their problems will not be attributed erroneously to\nauthors of previous versions.\n\n  Some devices are designed to deny users access to install or run\nmodified versions of the software inside them, although the manufacturer\ncan do so.  This is fundamentally incompatible with the aim of\nprotecting users' freedom to change the software.  The systematic\npattern of such abuse occurs in the area of products for individuals to\nuse, which is precisely where it is most unacceptable.  Therefore, we\nhave designed this version of the GPL to prohibit the practice for those\nproducts.  If such problems arise substantially in other domains, we\nstand ready to extend this provision to those domains in future versions\nof the GPL, as needed to protect the freedom of users.\n\n  Finally, every program is threatened constantly by software patents.\nStates should not allow patents to restrict development and use of\nsoftware on general-purpose computers, but in those that do, we wish to\navoid the special danger that patents applied to a free program could\nmake it effectively proprietary.  To prevent this, the GPL assures that\npatents cannot be used to render the program non-free.\n\n  The precise terms and conditions for copying, distribution and\nmodification follow.\n\n                       TERMS AND CONDITIONS\n\n  0. Definitions.\n\n  \"This License\" refers to version 3 of the GNU General Public License.\n\n  \"Copyright\" also means copyright-like laws that apply to other kinds of\nworks, such as semiconductor masks.\n\n  \"The Program\" refers to any copyrightable work licensed under this\nLicense.  Each licensee is addressed as \"you\".  \"Licensees\" and\n\"recipients\" may be individuals or organizations.\n\n  To \"modify\" a work means to copy from or adapt all or part of the work\nin a fashion requiring copyright permission, other than the making of an\nexact copy.  The resulting work is called a \"modified version\" of the\nearlier work or a work \"based on\" the earlier work.\n\n  A \"covered work\" means either the unmodified Program or a work based\non the Program.\n\n  To \"propagate\" a work means to do anything with it that, without\npermission, would make you directly or secondarily liable for\ninfringement under applicable copyright law, except executing it on a\ncomputer or modifying a private copy.  Propagation includes copying,\ndistribution (with or without modification), making available to the\npublic, and in some countries other activities as well.\n\n  To \"convey\" a work means any kind of propagation that enables other\nparties to make or receive copies.  Mere interaction with a user through\na computer network, with no transfer of a copy, is not conveying.\n\n  An interactive user interface displays \"Appropriate Legal Notices\"\nto the extent that it includes a convenient and prominently visible\nfeature that (1) displays an appropriate copyright notice, and (2)\ntells the user that there is no warranty for the work (except to the\nextent that warranties are provided), that licensees may convey the\nwork under this License, and how to view a copy of this License.  If\nthe interface presents a list of user commands or options, such as a\nmenu, a prominent item in the list meets this criterion.\n\n  1. Source Code.\n\n  The \"source code\" for a work means the preferred form of the work\nfor making modifications to it.  \"Object code\" means any non-source\nform of a work.\n\n  A \"Standard Interface\" means an interface that either is an official\nstandard defined by a recognized standards body, or, in the case of\ninterfaces specified for a particular programming language, one that\nis widely used among developers working in that language.\n\n  The \"System Libraries\" of an executable work include anything, other\nthan the work as a whole, that (a) is included in the normal form of\npackaging a Major Component, but which is not part of that Major\nComponent, and (b) serves only to enable use of the work with that\nMajor Component, or to implement a Standard Interface for which an\nimplementation is available to the public in source code form.  A\n\"Major Component\", in this context, means a major essential component\n(kernel, window system, and so on) of the specific operating system\n(if any) on which the executable work runs, or a compiler used to\nproduce the work, or an object code interpreter used to run it.\n\n  The \"Corresponding Source\" for a work in object code form means all\nthe source code needed to generate, install, and (for an executable\nwork) run the object code and to modify the work, including scripts to\ncontrol those activities.  However, it does not include the work's\nSystem Libraries, or general-purpose tools or generally available free\nprograms which are used unmodified in performing those activities but\nwhich are not part of the work.  For example, Corresponding Source\nincludes interface definition files associated with source files for\nthe work, and the source code for shared libraries and dynamically\nlinked subprograms that the work is specifically designed to require,\nsuch as by intimate data communication or control flow between those\nsubprograms and other parts of the work.\n\n  The Corresponding Source need not include anything that users\ncan regenerate automatically from other parts of the Corresponding\nSource.\n\n  The Corresponding Source for a work in source code form is that\nsame work.\n\n  2. Basic Permissions.\n\n  All rights granted under this License are granted for the term of\ncopyright on the Program, and are irrevocable provided the stated\nconditions are met.  This License explicitly affirms your unlimited\npermission to run the unmodified Program.  The output from running a\ncovered work is covered by this License only if the output, given its\ncontent, constitutes a covered work.  This License acknowledges your\nrights of fair use or other equivalent, as provided by copyright law.\n\n  You may make, run and propagate covered works that you do not\nconvey, without conditions so long as your license otherwise remains\nin force.  You may convey covered works to others for the sole purpose\nof having them make modifications exclusively for you, or provide you\nwith facilities for running those works, provided that you comply with\nthe terms of this License in conveying all material for which you do\nnot control copyright.  Those thus making or running the covered works\nfor you must do so exclusively on your behalf, under your direction\nand control, on terms that prohibit them from making any copies of\nyour copyrighted material outside their relationship with you.\n\n  Conveying under any other circumstances is permitted solely under\nthe conditions stated below.  Sublicensing is not allowed; section 10\nmakes it unnecessary.\n\n  3. Protecting Users' Legal Rights From Anti-Circumvention Law.\n\n  No covered work shall be deemed part of an effective technological\nmeasure under any applicable law fulfilling obligations under article\n11 of the WIPO copyright treaty adopted on 20 December 1996, or\nsimilar laws prohibiting or restricting circumvention of such\nmeasures.\n\n  When you convey a covered work, you waive any legal power to forbid\ncircumvention of technological measures to the extent such circumvention\nis effected by exercising rights under this License with respect to\nthe covered work, and you disclaim any intention to limit operation or\nmodification of the work as a means of enforcing, against the work's\nusers, your or third parties' legal rights to forbid circumvention of\ntechnological measures.\n\n  4. Conveying Verbatim Copies.\n\n  You may convey verbatim copies of the Program's source code as you\nreceive it, in any medium, provided that you conspicuously and\nappropriately publish on each copy an appropriate copyright notice;\nkeep intact all notices stating that this License and any\nnon-permissive terms added in accord with section 7 apply to the code;\nkeep intact all notices of the absence of any warranty; and give all\nrecipients a copy of this License along with the Program.\n\n  You may charge any price or no price for each copy that you convey,\nand you may offer support or warranty protection for a fee.\n\n  5. Conveying Modified Source Versions.\n\n  You may convey a work based on the Program, or the modifications to\nproduce it from the Program, in the form of source code under the\nterms of section 4, provided that you also meet all of these conditions:\n\n    a) The work must carry prominent notices stating that you modified\n    it, and giving a relevant date.\n\n    b) The work must carry prominent notices stating that it is\n    released under this License and any conditions added under section\n    7.  This requirement modifies the requirement in section 4 to\n    \"keep intact all notices\".\n\n    c) You must license the entire work, as a whole, under this\n    License to anyone who comes into possession of a copy.  This\n    License will therefore apply, along with any applicable section 7\n    additional terms, to the whole of the work, and all its parts,\n    regardless of how they are packaged.  This License gives no\n    permission to license the work in any other way, but it does not\n    invalidate such permission if you have separately received it.\n\n    d) If the work has interactive user interfaces, each must display\n    Appropriate Legal Notices; however, if the Program has interactive\n    interfaces that do not display Appropriate Legal Notices, your\n    work need not make them do so.\n\n  A compilation of a covered work with other separate and independent\nworks, which are not by their nature extensions of the covered work,\nand which are not combined with it such as to form a larger program,\nin or on a volume of a storage or distribution medium, is called an\n\"aggregate\" if the compilation and its resulting copyright are not\nused to limit the access or legal rights of the compilation's users\nbeyond what the individual works permit.  Inclusion of a covered work\nin an aggregate does not cause this License to apply to the other\nparts of the aggregate.\n\n  6. Conveying Non-Source Forms.\n\n  You may convey a covered work in object code form under the terms\nof sections 4 and 5, provided that you also convey the\nmachine-readable Corresponding Source under the terms of this License,\nin one of these ways:\n\n    a) Convey the object code in, or embodied in, a physical product\n    (including a physical distribution medium), accompanied by the\n    Corresponding Source fixed on a durable physical medium\n    customarily used for software interchange.\n\n    b) Convey the object code in, or embodied in, a physical product\n    (including a physical distribution medium), accompanied by a\n    written offer, valid for at least three years and valid for as\n    long as you offer spare parts or customer support for that product\n    model, to give anyone who possesses the object code either (1) a\n    copy of the Corresponding Source for all the software in the\n    product that is covered by this License, on a durable physical\n    medium customarily used for software interchange, for a price no\n    more than your reasonable cost of physically performing this\n    conveying of source, or (2) access to copy the\n    Corresponding Source from a network server at no charge.\n\n    c) Convey individual copies of the object code with a copy of the\n    written offer to provide the Corresponding Source.  This\n    alternative is allowed only occasionally and noncommercially, and\n    only if you received the object code with such an offer, in accord\n    with subsection 6b.\n\n    d) Convey the object code by offering access from a designated\n    place (gratis or for a charge), and offer equivalent access to the\n    Corresponding Source in the same way through the same place at no\n    further charge.  You need not require recipients to copy the\n    Corresponding Source along with the object code.  If the place to\n    copy the object code is a network server, the Corresponding Source\n    may be on a different server (operated by you or a third party)\n    that supports equivalent copying facilities, provided you maintain\n    clear directions next to the object code saying where to find the\n    Corresponding Source.  Regardless of what server hosts the\n    Corresponding Source, you remain obligated to ensure that it is\n    available for as long as needed to satisfy these requirements.\n\n    e) Convey the object code using peer-to-peer transmission, provided\n    you inform other peers where the object code and Corresponding\n    Source of the work are being offered to the general public at no\n    charge under subsection 6d.\n\n  A separable portion of the object code, whose source code is excluded\nfrom the Corresponding Source as a System Library, need not be\nincluded in conveying the object code work.\n\n  A \"User Product\" is either (1) a \"consumer product\", which means any\ntangible personal property which is normally used for personal, family,\nor household purposes, or (2) anything designed or sold for incorporation\ninto a dwelling.  In determining whether a product is a consumer product,\ndoubtful cases shall be resolved in favor of coverage.  For a particular\nproduct received by a particular user, \"normally used\" refers to a\ntypical or common use of that class of product, regardless of the status\nof the particular user or of the way in which the particular user\nactually uses, or expects or is expected to use, the product.  A product\nis a consumer product regardless of whether the product has substantial\ncommercial, industrial or non-consumer uses, unless such uses represent\nthe only significant mode of use of the product.\n\n  \"Installation Information\" for a User Product means any methods,\nprocedures, authorization keys, or other information required to install\nand execute modified versions of a covered work in that User Product from\na modified version of its Corresponding Source.  The information must\nsuffice to ensure that the continued functioning of the modified object\ncode is in no case prevented or interfered with solely because\nmodification has been made.\n\n  If you convey an object code work under this section in, or with, or\nspecifically for use in, a User Product, and the conveying occurs as\npart of a transaction in which the right of possession and use of the\nUser Product is transferred to the recipient in perpetuity or for a\nfixed term (regardless of how the transaction is characterized), the\nCorresponding Source conveyed under this section must be accompanied\nby the Installation Information.  But this requirement does not apply\nif neither you nor any third party retains the ability to install\nmodified object code on the User Product (for example, the work has\nbeen installed in ROM).\n\n  The requirement to provide Installation Information does not include a\nrequirement to continue to provide support service, warranty, or updates\nfor a work that has been modified or installed by the recipient, or for\nthe User Product in which it has been modified or installed.  Access to a\nnetwork may be denied when the modification itself materially and\nadversely affects the operation of the network or violates the rules and\nprotocols for communication across the network.\n\n  Corresponding Source conveyed, and Installation Information provided,\nin accord with this section must be in a format that is publicly\ndocumented (and with an implementation available to the public in\nsource code form), and must require no special password or key for\nunpacking, reading or copying.\n\n  7. Additional Terms.\n\n  \"Additional permissions\" are terms that supplement the terms of this\nLicense by making exceptions from one or more of its conditions.\nAdditional permissions that are applicable to the entire Program shall\nbe treated as though they were included in this License, to the extent\nthat they are valid under applicable law.  If additional permissions\napply only to part of the Program, that part may be used separately\nunder those permissions, but the entire Program remains governed by\nthis License without regard to the additional permissions.\n\n  When you convey a copy of a covered work, you may at your option\nremove any additional permissions from that copy, or from any part of\nit.  (Additional permissions may be written to require their own\nremoval in certain cases when you modify the work.)  You may place\nadditional permissions on material, added by you to a covered work,\nfor which you have or can give appropriate copyright permission.\n\n  Notwithstanding any other provision of this License, for material you\nadd to a covered work, you may (if authorized by the copyright holders of\nthat material) supplement the terms of this License with terms:\n\n    a) Disclaiming warranty or limiting liability differently from the\n    terms of sections 15 and 16 of this License; or\n\n    b) Requiring preservation of specified reasonable legal notices or\n    author attributions in that material or in the Appropriate Legal\n    Notices displayed by works containing it; or\n\n    c) Prohibiting misrepresentation of the origin of that material, or\n    requiring that modified versions of such material be marked in\n    reasonable ways as different from the original version; or\n\n    d) Limiting the use for publicity purposes of names of licensors or\n    authors of the material; or\n\n    e) Declining to grant rights under trademark law for use of some\n    trade names, trademarks, or service marks; or\n\n    f) Requiring indemnification of licensors and authors of that\n    material by anyone who conveys the material (or modified versions of\n    it) with contractual assumptions of liability to the recipient, for\n    any liability that these contractual assumptions directly impose on\n    those licensors and authors.\n\n  All other non-permissive additional terms are considered \"further\nrestrictions\" within the meaning of section 10.  If the Program as you\nreceived it, or any part of it, contains a notice stating that it is\ngoverned by this License along with a term that is a further\nrestriction, you may remove that term.  If a license document contains\na further restriction but permits relicensing or conveying under this\nLicense, you may add to a covered work material governed by the terms\nof that license document, provided that the further restriction does\nnot survive such relicensing or conveying.\n\n  If you add terms to a covered work in accord with this section, you\nmust place, in the relevant source files, a statement of the\nadditional terms that apply to those files, or a notice indicating\nwhere to find the applicable terms.\n\n  Additional terms, permissive or non-permissive, may be stated in the\nform of a separately written license, or stated as exceptions;\nthe above requirements apply either way.\n\n  8. Termination.\n\n  You may not propagate or modify a covered work except as expressly\nprovided under this License.  Any attempt otherwise to propagate or\nmodify it is void, and will automatically terminate your rights under\nthis License (including any patent licenses granted under the third\nparagraph of section 11).\n\n  However, if you cease all violation of this License, then your\nlicense from a particular copyright holder is reinstated (a)\nprovisionally, unless and until the copyright holder explicitly and\nfinally terminates your license, and (b) permanently, if the copyright\nholder fails to notify you of the violation by some reasonable means\nprior to 60 days after the cessation.\n\n  Moreover, your license from a particular copyright holder is\nreinstated permanently if the copyright holder notifies you of the\nviolation by some reasonable means, this is the first time you have\nreceived notice of violation of this License (for any work) from that\ncopyright holder, and you cure the violation prior to 30 days after\nyour receipt of the notice.\n\n  Termination of your rights under this section does not terminate the\nlicenses of parties who have received copies or rights from you under\nthis License.  If your rights have been terminated and not permanently\nreinstated, you do not qualify to receive new licenses for the same\nmaterial under section 10.\n\n  9. Acceptance Not Required for Having Copies.\n\n  You are not required to accept this License in order to receive or\nrun a copy of the Program.  Ancillary propagation of a covered work\noccurring solely as a consequence of using peer-to-peer transmission\nto receive a copy likewise does not require acceptance.  However,\nnothing other than this License grants you permission to propagate or\nmodify any covered work.  These actions infringe copyright if you do\nnot accept this License.  Therefore, by modifying or propagating a\ncovered work, you indicate your acceptance of this License to do so.\n\n  10. Automatic Licensing of Downstream Recipients.\n\n  Each time you convey a covered work, the recipient automatically\nreceives a license from the original licensors, to run, modify and\npropagate that work, subject to this License.  You are not responsible\nfor enforcing compliance by third parties with this License.\n\n  An \"entity transaction\" is a transaction transferring control of an\norganization, or substantially all assets of one, or subdividing an\norganization, or merging organizations.  If propagation of a covered\nwork results from an entity transaction, each party to that\ntransaction who receives a copy of the work also receives whatever\nlicenses to the work the party's predecessor in interest had or could\ngive under the previous paragraph, plus a right to possession of the\nCorresponding Source of the work from the predecessor in interest, if\nthe predecessor has it or can get it with reasonable efforts.\n\n  You may not impose any further restrictions on the exercise of the\nrights granted or affirmed under this License.  For example, you may\nnot impose a license fee, royalty, or other charge for exercise of\nrights granted under this License, and you may not initiate litigation\n(including a cross-claim or counterclaim in a lawsuit) alleging that\nany patent claim is infringed by making, using, selling, offering for\nsale, or importing the Program or any portion of it.\n\n  11. Patents.\n\n  A \"contributor\" is a copyright holder who authorizes use under this\nLicense of the Program or a work on which the Program is based.  The\nwork thus licensed is called the contributor's \"contributor version\".\n\n  A contributor's \"essential patent claims\" are all patent claims\nowned or controlled by the contributor, whether already acquired or\nhereafter acquired, that would be infringed by some manner, permitted\nby this License, of making, using, or selling its contributor version,\nbut do not include claims that would be infringed only as a\nconsequence of further modification of the contributor version.  For\npurposes of this definition, \"control\" includes the right to grant\npatent sublicenses in a manner consistent with the requirements of\nthis License.\n\n  Each contributor grants you a non-exclusive, worldwide, royalty-free\npatent license under the contributor's essential patent claims, to\nmake, use, sell, offer for sale, import and otherwise run, modify and\npropagate the contents of its contributor version.\n\n  In the following three paragraphs, a \"patent license\" is any express\nagreement or commitment, however denominated, not to enforce a patent\n(such as an express permission to practice a patent or covenant not to\nsue for patent infringement).  To \"grant\" such a patent license to a\nparty means to make such an agreement or commitment not to enforce a\npatent against the party.\n\n  If you convey a covered work, knowingly relying on a patent license,\nand the Corresponding Source of the work is not available for anyone\nto copy, free of charge and under the terms of this License, through a\npublicly available network server or other readily accessible means,\nthen you must either (1) cause the Corresponding Source to be so\navailable, or (2) arrange to deprive yourself of the benefit of the\npatent license for this particular work, or (3) arrange, in a manner\nconsistent with the requirements of this License, to extend the patent\nlicense to downstream recipients.  \"Knowingly relying\" means you have\nactual knowledge that, but for the patent license, your conveying the\ncovered work in a country, or your recipient's use of the covered work\nin a country, would infringe one or more identifiable patents in that\ncountry that you have reason to believe are valid.\n\n  If, pursuant to or in connection with a single transaction or\narrangement, you convey, or propagate by procuring conveyance of, a\ncovered work, and grant a patent license to some of the parties\nreceiving the covered work authorizing them to use, propagate, modify\nor convey a specific copy of the covered work, then the patent license\nyou grant is automatically extended to all recipients of the covered\nwork and works based on it.\n\n  A patent license is \"discriminatory\" if it does not include within\nthe scope of its coverage, prohibits the exercise of, or is\nconditioned on the non-exercise of one or more of the rights that are\nspecifically granted under this License.  You may not convey a covered\nwork if you are a party to an arrangement with a third party that is\nin the business of distributing software, under which you make payment\nto the third party based on the extent of your activity of conveying\nthe work, and under which the third party grants, to any of the\nparties who would receive the covered work from you, a discriminatory\npatent license (a) in connection with copies of the covered work\nconveyed by you (or copies made from those copies), or (b) primarily\nfor and in connection with specific products or compilations that\ncontain the covered work, unless you entered into that arrangement,\nor that patent license was granted, prior to 28 March 2007.\n\n  Nothing in this License shall be construed as excluding or limiting\nany implied license or other defenses to infringement that may\notherwise be available to you under applicable patent law.\n\n  12. No Surrender of Others' Freedom.\n\n  If conditions are imposed on you (whether by court order, agreement or\notherwise) that contradict the conditions of this License, they do not\nexcuse you from the conditions of this License.  If you cannot convey a\ncovered work so as to satisfy simultaneously your obligations under this\nLicense and any other pertinent obligations, then as a consequence you may\nnot convey it at all.  For example, if you agree to terms that obligate you\nto collect a royalty for further conveying from those to whom you convey\nthe Program, the only way you could satisfy both those terms and this\nLicense would be to refrain entirely from conveying the Program.\n\n  13. Use with the GNU Affero General Public License.\n\n  Notwithstanding any other provision of this License, you have\npermission to link or combine any covered work with a work licensed\nunder version 3 of the GNU Affero General Public License into a single\ncombined work, and to convey the resulting work.  The terms of this\nLicense will continue to apply to the part which is the covered work,\nbut the special requirements of the GNU Affero General Public License,\nsection 13, concerning interaction through a network will apply to the\ncombination as such.\n\n  14. Revised Versions of this License.\n\n  The Free Software Foundation may publish revised and/or new versions of\nthe GNU General Public License from time to time.  Such new versions will\nbe similar in spirit to the present version, but may differ in detail to\naddress new problems or concerns.\n\n  Each version is given a distinguishing version number.  If the\nProgram specifies that a certain numbered version of the GNU General\nPublic License \"or any later version\" applies to it, you have the\noption of following the terms and conditions either of that numbered\nversion or of any later version published by the Free Software\nFoundation.  If the Program does not specify a version number of the\nGNU General Public License, you may choose any version ever published\nby the Free Software Foundation.\n\n  If the Program specifies that a proxy can decide which future\nversions of the GNU General Public License can be used, that proxy's\npublic statement of acceptance of a version permanently authorizes you\nto choose that version for the Program.\n\n  Later license versions may give you additional or different\npermissions.  However, no additional obligations are imposed on any\nauthor or copyright holder as a result of your choosing to follow a\nlater version.\n\n  15. Disclaimer of Warranty.\n\n  THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY\nAPPLICABLE LAW.  EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT\nHOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM \"AS IS\" WITHOUT WARRANTY\nOF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO,\nTHE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\nPURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM\nIS WITH YOU.  SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF\nALL NECESSARY SERVICING, REPAIR OR CORRECTION.\n\n  16. Limitation of Liability.\n\n  IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING\nWILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS\nTHE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY\nGENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE\nUSE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF\nDATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD\nPARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS),\nEVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF\nSUCH DAMAGES.\n\n  17. Interpretation of Sections 15 and 16.\n\n  If the disclaimer of warranty and limitation of liability provided\nabove cannot be given local legal effect according to their terms,\nreviewing courts shall apply local law that most closely approximates\nan absolute waiver of all civil liability in connection with the\nProgram, unless a warranty or assumption of liability accompanies a\ncopy of the Program in return for a fee.\n\n                     END OF TERMS AND CONDITIONS\n\n            How to Apply These Terms to Your New Programs\n\n  If you develop a new program, and you want it to be of the greatest\npossible use to the public, the best way to achieve this is to make it\nfree software which everyone can redistribute and change under these terms.\n\n  To do so, attach the following notices to the program.  It is safest\nto attach them to the start of each source file to most effectively\nstate the exclusion of warranty; and each file should have at least\nthe \"copyright\" line and a pointer to where the full notice is found.\n\n    <one line to give the program's name and a brief idea of what it does.>\n    Copyright (C) <year>  <name of author>\n\n    This program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nAlso add information on how to contact you by electronic and paper mail.\n\n  If the program does terminal interaction, make it output a short\nnotice like this when it starts in an interactive mode:\n\n    <program>  Copyright (C) <year>  <name of author>\n    This program comes with ABSOLUTELY NO WARRANTY; for details type `show w'.\n    This is free software, and you are welcome to redistribute it\n    under certain conditions; type `show c' for details.\n\nThe hypothetical commands `show w' and `show c' should show the appropriate\nparts of the General Public License.  Of course, your program's commands\nmight be different; for a GUI interface, you would use an \"about box\".\n\n  You should also get your employer (if you work as a programmer) or school,\nif any, to sign a \"copyright disclaimer\" for the program, if necessary.\nFor more information on this, and how to apply and follow the GNU GPL, see\n<http://www.gnu.org/licenses/>.\n\n  The GNU General Public License does not permit incorporating your program\ninto proprietary programs.  If your program is a subroutine library, you\nmay consider it more useful to permit linking proprietary applications with\nthe library.  If this is what you want to do, use the GNU Lesser General\nPublic License instead of this License.  But first, please read\n<http://www.gnu.org/philosophy/why-not-lgpl.html>.\n\n*/"
    }
  },
  "settings": {
    "evmVersion": "istanbul",
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}