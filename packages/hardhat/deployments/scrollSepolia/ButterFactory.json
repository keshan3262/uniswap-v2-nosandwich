{
  "address": "0x04Bc70Bf89eF7af019fc2bFD0f1e7b2B0Fd25788",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_feeToSetter",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token0",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token1",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "pair",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "PairCreated",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "INIT_CODE_HASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "allPairs",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "allPairsLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenB",
          "type": "address"
        }
      ],
      "name": "createPair",
      "outputs": [
        {
          "internalType": "address",
          "name": "pair",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeTo",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeToSetter",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "getPair",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_feeTo",
          "type": "address"
        }
      ],
      "name": "setFeeTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_feeToSetter",
          "type": "address"
        }
      ],
      "name": "setFeeToSetter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xdb23e71d44fffc32b34a7f83880640e66f384971f33598c1bd488e50a29790d4",
  "receipt": {
    "to": null,
    "from": "0xb9c92Ee112A12F3F34bfec134b5CB9109150cA94",
    "contractAddress": "0x04Bc70Bf89eF7af019fc2bFD0f1e7b2B0Fd25788",
    "transactionIndex": 1,
    "gasUsed": "2502152",
    "logsBloom": "0x
    "blockHash": "0x10f28ff2ca1a0fd54bb3e62b9573d11ad64d9679f986cf4a39de878dafdf6373",
    "transactionHash": "0xdb23e71d44fffc32b34a7f83880640e66f384971f33598c1bd488e50a29790d4",
    "logs": [],
    "blockNumber": 4902870,
    "cumulativeGasUsed": "2523152",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xb9c92Ee112A12F3F34bfec134b5CB9109150cA94"
  ],
  "numDeployments": 1,
  "solcInputHash": "cd05289b02de52e41df524b335fedeff",
  "metadata": "{\"compiler\":{\"version\":\"0.6.6+commit.6c089d02\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeToSetter\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"PairCreated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"INIT_CODE_HASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allPairs\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allPairsLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"}],\"name\":\"createPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeTo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeToSetter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"getPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeTo\",\"type\":\"address\"}],\"name\":\"setFeeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeToSetter\",\"type\":\"address\"}],\"name\":\"setFeeToSetter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"methods\":{}},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"contracts/ButterFactory.sol\":\"ButterFactory\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/ButterERC1155.sol\":{\"content\":\"pragma solidity =0.6.6;\\n\\nimport \\\"./interfaces/IButterERC1155.sol\\\";\\nimport \\\"./libraries/SafeMath.sol\\\";\\nimport \\\"./ERC1155.sol\\\";\\n\\ncontract ButterERC1155 is IButterERC1155, ERC1155Mintable {\\n\\tusing SafeMath for uint;\\n\\n\\tuint8 public constant decimals = 18;\\n\\tbytes32 public override DOMAIN_SEPARATOR;\\n\\tstring public constant name = \\\"ButterDex\\\";\\n\\tconstructor() public ERC1155Mintable() {\\n\\t\\tuint chainId;\\n\\t\\tassembly {\\n\\t\\t\\tchainId := chainid()\\n\\t\\t}\\n\\t\\tDOMAIN_SEPARATOR = keccak256(\\n\\t\\t\\tabi.encode(\\n\\t\\t\\t\\tkeccak256(\\n\\t\\t\\t\\t\\t\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"\\n\\t\\t\\t\\t),\\n\\t\\t\\t\\tkeccak256(bytes(name)),\\n\\t\\t\\t\\tkeccak256(bytes(\\\"1\\\")),\\n\\t\\t\\t\\tchainId,\\n\\t\\t\\t\\taddress(this)\\n\\t\\t\\t)\\n\\t\\t);\\n\\t}\\n\\n\\tfunction calculateNFTId(\\n\\t\\tuint256 tickLimit,\\n\\t\\tuint256 blockNumber\\n\\t) public view override returns (uint256) {\\n\\t\\t// TODO: implement this\\n\\t\\treturn 0;\\n\\t}\\n\\n\\tfunction mint(\\n\\t\\taddress to,\\n\\t\\tuint256 tickLimit,\\n\\t\\tuint256 value\\n\\t) external override {\\n\\t\\t// TODO: implement this\\n\\t\\tuint id = calculateNFTId(tickLimit, block.number);\\n\\t\\taddress[] memory recipients = new address[](1);\\n\\t\\trecipients[0] = to;\\n\\t\\tuint256[] memory values = new uint256[](1);\\n\\t\\tvalues[0] = value;\\n\\t\\t_mint(id, recipients, values);\\n\\t}\\n}\\n\",\"keccak256\":\"0x04ef0c4872863197f0e7ecf8fa18a5074963c713628bf5ae30b9314c8dea3a11\"},\"contracts/ButterERC20.sol\":{\"content\":\"pragma solidity =0.6.6;\\n\\nimport './interfaces/IButterERC20.sol';\\nimport './libraries/SafeMath.sol';\\n\\nabstract contract ButterERC20 is IButterERC20 {\\n    using SafeMath for uint;\\n\\n    string public constant override name = 'Uniswap V2';\\n    string public constant override symbol = 'UNI-V2';\\n    uint8 public constant override decimals = 18;\\n    uint  public override totalSupply;\\n    mapping(address => uint) public override balanceOf;\\n    mapping(address => mapping(address => uint)) public override allowance;\\n\\n    bytes32 public override DOMAIN_SEPARATOR;\\n    // keccak256(\\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\");\\n    bytes32 public constant override PERMIT_TYPEHASH = 0x6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9;\\n    mapping(address => uint) public override nonces;\\n\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    constructor() public {\\n        uint chainId;\\n        assembly {\\n            chainId := chainid()\\n        }\\n        DOMAIN_SEPARATOR = keccak256(\\n            abi.encode(\\n                keccak256('EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)'),\\n                keccak256(bytes(name)),\\n                keccak256(bytes('1')),\\n                chainId,\\n                address(this)\\n            )\\n        );\\n    }\\n\\n    function _mint(address to, uint value) internal {\\n        totalSupply = totalSupply.add(value);\\n        balanceOf[to] = balanceOf[to].add(value);\\n        emit Transfer(address(0), to, value);\\n    }\\n\\n    function _burn(address from, uint value) internal {\\n        balanceOf[from] = balanceOf[from].sub(value);\\n        totalSupply = totalSupply.sub(value);\\n        emit Transfer(from, address(0), value);\\n    }\\n\\n    function _approve(address owner, address spender, uint value) private {\\n        allowance[owner][spender] = value;\\n        emit Approval(owner, spender, value);\\n    }\\n\\n    function _transfer(address from, address to, uint value) private {\\n        balanceOf[from] = balanceOf[from].sub(value);\\n        balanceOf[to] = balanceOf[to].add(value);\\n        emit Transfer(from, to, value);\\n    }\\n\\n    function approve(address spender, uint value) external override returns (bool) {\\n        _approve(msg.sender, spender, value);\\n        return true;\\n    }\\n\\n    function transfer(address to, uint value) external override returns (bool) {\\n        _transfer(msg.sender, to, value);\\n        return true;\\n    }\\n\\n    function transferFrom(address from, address to, uint value) external override returns (bool) {\\n        if (allowance[from][msg.sender] != uint(-1)) {\\n            allowance[from][msg.sender] = allowance[from][msg.sender].sub(value);\\n        }\\n        _transfer(from, to, value);\\n        return true;\\n    }\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external override {\\n        require(deadline >= block.timestamp, 'Butter: EXPIRED');\\n        bytes32 digest = keccak256(\\n            abi.encodePacked(\\n                '\\\\x19\\\\x01',\\n                DOMAIN_SEPARATOR,\\n                keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, value, nonces[owner]++, deadline))\\n            )\\n        );\\n        address recoveredAddress = ecrecover(digest, v, r, s);\\n        require(recoveredAddress != address(0) && recoveredAddress == owner, 'Butter: INVALID_SIGNATURE');\\n        _approve(owner, spender, value);\\n    }\\n}\\n\",\"keccak256\":\"0xc90f0d9a206eab2b7ba3f02b3c349460871726def3b0f5718163ae6ca94a6de2\"},\"contracts/ButterFactory.sol\":{\"content\":\"pragma solidity =0.6.6;\\n\\nimport './interfaces/IButterFactory.sol';\\nimport './ButterPair.sol';\\n\\ncontract ButterFactory is IButterFactory {\\n    address public override feeTo;\\n    address public override feeToSetter;\\n    bytes32 public constant INIT_CODE_HASH = keccak256(abi.encodePacked(type(ButterPair).creationCode));\\n\\n    mapping(address => mapping(address => address)) public override getPair;\\n    address[] public override allPairs;\\n\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\\n\\n    constructor(address _feeToSetter) public {\\n        feeToSetter = _feeToSetter;\\n    }\\n\\n    function allPairsLength() external view override returns (uint) {\\n        return allPairs.length;\\n    }\\n\\n    function createPair(address tokenA, address tokenB) external override returns (address pair) {\\n        require(tokenA != tokenB, 'Butter: IDENTICAL_ADDRESSES');\\n        (address token0, address token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\\n        require(token0 != address(0), 'Butter: ZERO_ADDRESS');\\n        require(getPair[token0][token1] == address(0), 'Butter: PAIR_EXISTS'); // single check is sufficient\\n        bytes memory bytecode = type(ButterPair).creationCode;\\n        bytes32 salt = keccak256(abi.encodePacked(token0, token1));\\n        assembly {\\n            pair := create2(0, add(bytecode, 32), mload(bytecode), salt)\\n        }\\n        IButterPair(pair).initialize(token0, token1);\\n        getPair[token0][token1] = pair;\\n        getPair[token1][token0] = pair; // populate mapping in the reverse direction\\n        allPairs.push(pair);\\n        emit PairCreated(token0, token1, pair, allPairs.length);\\n    }\\n\\n    function setFeeTo(address _feeTo) external override {\\n        require(msg.sender == feeToSetter, 'Butter: FORBIDDEN');\\n        feeTo = _feeTo;\\n    }\\n\\n    function setFeeToSetter(address _feeToSetter) external override {\\n        require(msg.sender == feeToSetter, 'Butter: FORBIDDEN');\\n        feeToSetter = _feeToSetter;\\n    }\\n}\\n\",\"keccak256\":\"0x47b8698a4b604c22578971587a744cb8d8de057f7daaa000b4425b7f61699276\"},\"contracts/ButterPair.sol\":{\"content\":\"pragma solidity =0.6.6;\\n\\nimport \\\"./interfaces/IButterPair.sol\\\";\\nimport \\\"./ButterERC20.sol\\\";\\nimport \\\"./libraries/Math.sol\\\";\\nimport \\\"./libraries/UQ112x112.sol\\\";\\nimport \\\"./interfaces/IERC20.sol\\\";\\nimport \\\"./interfaces/IButterFactory.sol\\\";\\nimport \\\"./interfaces/IButterCallee.sol\\\";\\nimport \\\"./interfaces/IButterERC1155.sol\\\";\\n\\nimport \\\"./libraries/LowGasSafeMath.sol\\\";\\nimport \\\"./libraries/SafeCast.sol\\\";\\nimport \\\"./libraries/Tick.sol\\\";\\nimport \\\"./libraries/TickBitmap.sol\\\";\\n\\nimport \\\"./ButterERC1155.sol\\\";\\n\\ncontract ButterPair is IButterPair, ButterERC20 {\\n\\tusing SafeMath for uint;\\n\\tusing UQ112x112 for uint224;\\n\\n\\tusing Tick for mapping(int24 => Tick.Info);\\n\\tusing TickBitmap for mapping(int16 => uint256);\\n\\n\\tuint public constant override MINIMUM_LIQUIDITY = 10 ** 3;\\n\\tbytes4 private constant SELECTOR =\\n\\t\\tbytes4(keccak256(bytes(\\\"transfer(address,uint256)\\\")));\\n\\n\\taddress public override factory;\\n\\taddress public override token0;\\n\\taddress public override token1;\\n\\n\\tIButterERC1155 public token0SwapShare;\\n\\tIButterERC1155 public token1SwapShare;\\n\\n\\tuint112 private reserve0; // uses single storage slot, accessible via getReserves\\n\\tuint112 private reserve1; // uses single storage slot, accessible via getReserves\\n\\tuint112 private pendingReserve0; // uses single storage slot, accessible via getReserves\\n\\tuint112 private pendingReserve1; // uses single storage slot, accessible via getReserves\\n\\tuint32 private blockTimestampLast; // uses single storage slot, accessible via getReserves\\n\\n\\tuint public override price0CumulativeLast;\\n\\tuint public override price1CumulativeLast;\\n\\tuint public override kLast; // reserve0 * reserve1, as of immediately after the most recent liquidity event\\n\\n\\tstruct Slot0 {\\n\\t\\tuint160 lastBlock;\\n\\t\\tint24 lastSellTick;\\n\\t\\tint24 lastBuyTick;\\n\\t}\\n\\n\\tint24 public immutable tickSpacing = 10; // TODO: set on deployment\\n\\tSlot0 public slot0;\\n\\n\\tmapping(int24 => Tick.Info) public ticks;\\n\\tmapping(int16 => uint256) public tickBitmap;\\n\\n\\tuint private unlocked = 1;\\n\\tmodifier lock() {\\n\\t\\trequire(unlocked == 1, \\\"Butter: LOCKED\\\");\\n\\t\\tunlocked = 0;\\n\\t\\t_;\\n\\t\\tunlocked = 1;\\n\\t}\\n\\n\\tfunction getReserves()\\n\\t\\tpublic\\n\\t\\tview\\n\\t\\toverride\\n\\t\\treturns (\\n\\t\\t\\tuint112 _reserve0,\\n\\t\\t\\tuint112 _reserve1,\\n\\t\\t\\tuint112 _pendingReserve0,\\n\\t\\t\\tuint112 _pendingReserve1,\\n\\t\\t\\tuint32 _blockTimestampLast\\n\\t\\t)\\n\\t{\\n\\t\\t_reserve0 = reserve0;\\n\\t\\t_reserve1 = reserve1;\\n\\t\\t_pendingReserve0 = pendingReserve0;\\n\\t\\t_pendingReserve1 = pendingReserve1;\\n\\t\\t_blockTimestampLast = blockTimestampLast;\\n\\t}\\n\\n\\tfunction _safeTransfer(address token, address to, uint value) private {\\n\\t\\t(bool success, bytes memory data) = token.call(\\n\\t\\t\\tabi.encodeWithSelector(SELECTOR, to, value)\\n\\t\\t);\\n\\t\\trequire(\\n\\t\\t\\tsuccess && (data.length == 0 || abi.decode(data, (bool))),\\n\\t\\t\\t\\\"Butter: TRANSFER_FAILED\\\"\\n\\t\\t);\\n\\t}\\n\\n\\tevent Mint(address indexed sender, uint amount0, uint amount1);\\n\\tevent Burn(\\n\\t\\taddress indexed sender,\\n\\t\\tuint amount0,\\n\\t\\tuint amount1,\\n\\t\\taddress indexed to\\n\\t);\\n\\tevent Swap(\\n\\t\\taddress indexed sender,\\n\\t\\tuint amount0In,\\n\\t\\tuint amount1In,\\n\\t\\tuint amount0Out,\\n\\t\\tuint amount1Out,\\n\\t\\taddress indexed to\\n\\t);\\n\\tevent SwapIntention(\\n\\t\\taddress indexed sender,\\n\\t\\tuint amount0In,\\n\\t\\tuint amount1In,\\n\\t\\taddress indexed to\\n\\t);\\n\\tevent Sync(uint112 reserve0, uint112 reserve1);\\n\\n\\tconstructor() public {\\n\\t\\tfactory = msg.sender;\\n\\t\\t// token0SwapShare = new ButterERC1155(address(this), token0);\\n\\t\\t// token1SwapShare = new ButterERC1155(address(this), token1);\\n\\t}\\n\\n\\t// called once by the factory at time of deployment\\n\\tfunction initialize(address _token0, address _token1) external override {\\n\\t\\trequire(msg.sender == factory, \\\"Butter: FORBIDDEN\\\"); // sufficient check\\n\\t\\ttoken0 = _token0;\\n\\t\\ttoken1 = _token1;\\n\\t}\\n\\n\\tfunction _doClearing() private {}\\n\\n\\t// update reserves and, on the first call per block, price accumulators\\n\\tfunction _update(\\n\\t\\tuint balance0,\\n\\t\\tuint balance1,\\n\\t\\tuint112 _reserve0,\\n\\t\\tuint112 _reserve1,\\n\\t\\tuint112 _pendingReserve0,\\n\\t\\tuint112 _pendingReserve1\\n\\t) private {\\n\\t\\trequire(\\n\\t\\t\\tbalance0 <= uint112(-1) && balance1 <= uint112(-1),\\n\\t\\t\\t\\\"Butter: OVERFLOW\\\"\\n\\t\\t);\\n\\t\\tuint32 blockTimestamp = uint32(block.timestamp % 2 ** 32);\\n\\t\\tuint32 timeElapsed = blockTimestamp - blockTimestampLast; // overflow is desired\\n\\t\\tif (timeElapsed > 0 && _reserve0 != 0 && _reserve1 != 0) {\\n\\t\\t\\t// * never overflows, and + overflow is desired\\n\\t\\t\\tprice0CumulativeLast +=\\n\\t\\t\\t\\tuint(UQ112x112.encode(_reserve1).uqdiv(_reserve0)) *\\n\\t\\t\\t\\ttimeElapsed;\\n\\t\\t\\tprice1CumulativeLast +=\\n\\t\\t\\t\\tuint(UQ112x112.encode(_reserve0).uqdiv(_reserve1)) *\\n\\t\\t\\t\\ttimeElapsed;\\n\\t\\t}\\n\\t\\treserve0 = uint112(balance0);\\n\\t\\treserve1 = uint112(balance1);\\n\\t\\tpendingReserve0 = uint112(_pendingReserve0);\\n\\t\\tpendingReserve1 = uint112(_pendingReserve1);\\n\\t\\tblockTimestampLast = blockTimestamp;\\n\\t\\temit Sync(reserve0, reserve1);\\n\\t}\\n\\n\\t// this low-level function should be called from a contract which performs important safety checks\\n\\tfunction mint(address to) external override lock returns (uint liquidity) {\\n\\t\\t(\\n\\t\\t\\tuint112 _reserve0,\\n\\t\\t\\tuint112 _reserve1,\\n\\t\\t\\tuint112 _pendingReserve0,\\n\\t\\t\\tuint112 _pendingReserve1,\\n\\n\\t\\t) = getReserves(); // gas savings\\n\\t\\tuint balance0 = IERC20(token0).balanceOf(address(this));\\n\\t\\tuint balance1 = IERC20(token1).balanceOf(address(this));\\n\\t\\tuint amount0 = balance0.sub(_reserve0);\\n\\t\\tuint amount1 = balance1.sub(_reserve1);\\n\\t\\tuint _totalSupply = totalSupply; // gas savings, must be defined here since totalSupply can update in _mintFee\\n\\t\\tif (_totalSupply == 0) {\\n\\t\\t\\tliquidity = Math.sqrt(amount0.mul(amount1)).sub(MINIMUM_LIQUIDITY);\\n\\t\\t\\t_mint(address(0), MINIMUM_LIQUIDITY); // permanently lock the first MINIMUM_LIQUIDITY tokens\\n\\t\\t} else {\\n\\t\\t\\tliquidity = Math.min(\\n\\t\\t\\t\\tamount0.mul(_totalSupply) / _reserve0,\\n\\t\\t\\t\\tamount1.mul(_totalSupply) / _reserve1\\n\\t\\t\\t);\\n\\t\\t}\\n\\t\\trequire(liquidity > 0, \\\"Butter: INSUFFICIENT_LIQUIDITY_MINTED\\\");\\n\\t\\t_mint(to, liquidity);\\n\\n\\t\\t_update(\\n\\t\\t\\tbalance0,\\n\\t\\t\\tbalance1,\\n\\t\\t\\t_reserve0,\\n\\t\\t\\t_reserve1,\\n\\t\\t\\t_pendingReserve0,\\n\\t\\t\\t_pendingReserve1\\n\\t\\t);\\n\\t\\temit Mint(msg.sender, amount0, amount1);\\n\\t}\\n\\n\\t// this low-level function should be called from a contract which performs important safety checks\\n\\tfunction burn(\\n\\t\\taddress to\\n\\t) external override lock returns (uint amount0, uint amount1) {\\n\\t\\t(\\n\\t\\t\\tuint112 _reserve0,\\n\\t\\t\\tuint112 _reserve1,\\n\\t\\t\\tuint112 _pendingReserve0,\\n\\t\\t\\tuint112 _pendingReserve1,\\n\\n\\t\\t) = getReserves(); // gas savings\\n\\t\\taddress _token0 = token0; // gas savings\\n\\t\\taddress _token1 = token1; // gas savings\\n\\t\\tuint balance0 = IERC20(_token0).balanceOf(address(this));\\n\\t\\tuint balance1 = IERC20(_token1).balanceOf(address(this));\\n\\t\\tuint liquidity = balanceOf[address(this)];\\n\\n\\t\\tuint _totalSupply = totalSupply; // gas savings, must be defined here since totalSupply can update in _mintFee\\n\\t\\tamount0 = liquidity.mul(balance0) / _totalSupply; // using balances ensures pro-rata distribution\\n\\t\\tamount1 = liquidity.mul(balance1) / _totalSupply; // using balances ensures pro-rata distribution\\n\\t\\trequire(\\n\\t\\t\\tamount0 > 0 && amount1 > 0,\\n\\t\\t\\t\\\"Butter: INSUFFICIENT_LIQUIDITY_BURNED\\\"\\n\\t\\t);\\n\\t\\t_burn(address(this), liquidity);\\n\\t\\t_safeTransfer(_token0, to, amount0);\\n\\t\\t_safeTransfer(_token1, to, amount1);\\n\\t\\tbalance0 = IERC20(_token0).balanceOf(address(this));\\n\\t\\tbalance1 = IERC20(_token1).balanceOf(address(this));\\n\\n\\t\\t_update(\\n\\t\\t\\tbalance0,\\n\\t\\t\\tbalance1,\\n\\t\\t\\t_reserve0,\\n\\t\\t\\t_reserve1,\\n\\t\\t\\t_pendingReserve0,\\n\\t\\t\\t_pendingReserve1\\n\\t\\t);\\n\\t\\temit Burn(msg.sender, amount0, amount1, to);\\n\\t}\\n\\n\\t// this low-level function should be called from a contract which performs important safety checks\\n\\tfunction swap(\\n\\t\\tuint amount0OutLimit,\\n\\t\\tuint amount1OutLimit,\\n\\t\\taddress to,\\n\\t\\tbytes calldata data\\n\\t) external override lock {\\n\\t\\trequire(\\n\\t\\t\\tamount0OutLimit > 0 || amount1OutLimit > 0,\\n\\t\\t\\t\\\"Butter: INSUFFICIENT_OUTPUT_AMOUNT\\\"\\n\\t\\t);\\n\\t\\trequire(\\n\\t\\t\\t!(amount0OutLimit > 0 && amount1OutLimit > 0),\\n\\t\\t\\t\\\"Butter: INVALID_OUTPUT_AMOUNT\\\"\\n\\t\\t);\\n\\t\\t// TODO: check amount0OutLimit, amount1OutLimit\\n\\n\\t\\t_doClearing();\\n\\n\\t\\t(\\n\\t\\t\\tuint112 _reserve0,\\n\\t\\t\\tuint112 _reserve1,\\n\\t\\t\\tuint112 _pendingReserve0,\\n\\t\\t\\tuint112 _pendingReserve1,\\n\\n\\t\\t) = getReserves(); // gas savings\\n\\n\\t\\tuint balance0;\\n\\t\\tuint balance1;\\n\\t\\t{\\n\\t\\t\\t// scope for _token{0,1}, avoids stack too deep errors\\n\\t\\t\\taddress _token0 = token0;\\n\\t\\t\\taddress _token1 = token1;\\n\\t\\t\\trequire(to != _token0 && to != _token1, \\\"Butter: INVALID_TO\\\");\\n\\t\\t\\tbalance0 = IERC20(_token0).balanceOf(address(this));\\n\\t\\t\\tbalance1 = IERC20(_token1).balanceOf(address(this));\\n\\t\\t}\\n\\t\\tuint amount0In = balance0 > _reserve0 + _pendingReserve0\\n\\t\\t\\t? balance0 - (_reserve0 + _pendingReserve0)\\n\\t\\t\\t: 0;\\n\\t\\tuint amount1In = balance1 > _reserve1 + _pendingReserve1\\n\\t\\t\\t? balance1 - (_reserve1 + _pendingReserve1)\\n\\t\\t\\t: 0;\\n\\t\\trequire(\\n\\t\\t\\tamount0In <= uint112(-1) && amount1In <= uint112(-1),\\n\\t\\t\\t\\\"Butter: OVERFLOW\\\"\\n\\t\\t);\\n\\n\\t\\t_pendingReserve0 = _pendingReserve0 + uint112(amount0In);\\n\\t\\t_pendingReserve1 = _pendingReserve1 + uint112(amount1In);\\n\\t\\trequire(\\n\\t\\t\\tamount0In > 0 || amount1In > 0,\\n\\t\\t\\t\\\"Butter: INSUFFICIENT_INPUT_AMOUNT\\\"\\n\\t\\t);\\n\\t\\trequire(\\n\\t\\t\\t!(amount0In > 0 && amount1In > 0),\\n\\t\\t\\t\\\"Butter: INVALID_INPUT_AMOUNT\\\"\\n\\t\\t);\\n\\n\\t\\tif (amount0In > 0) {\\n\\t\\t\\ttoken0SwapShare.mint(to, amount1OutLimit, amount0In);\\n\\t\\t}\\n\\t\\tif (amount1In > 0) {\\n\\t\\t\\ttoken1SwapShare.mint(to, amount0OutLimit, amount1In);\\n\\t\\t}\\n\\n\\t\\t// // Update TICKs\\n\\t\\t// flippedLower = ticks.update(\\n\\t\\t//         tickLower,\\n\\t\\t//         tick,\\n\\t\\t//         liquidityDelta,\\n\\t\\t//         _feeGrowthGlobal0X128,\\n\\t\\t//         _feeGrowthGlobal1X128,\\n\\t\\t//         secondsPerLiquidityCumulativeX128,\\n\\t\\t//         tickCumulative,\\n\\t\\t//         time,\\n\\t\\t//         false,\\n\\t\\t//         maxLiquidityPerTick\\n\\t\\t//     );\\n\\t\\t//     flippedUpper = ticks.update(\\n\\t\\t//         tickUpper,\\n\\t\\t//         tick,\\n\\t\\t//         liquidityDelta,\\n\\t\\t//         _feeGrowthGlobal0X128,\\n\\t\\t//         _feeGrowthGlobal1X128,\\n\\t\\t//         secondsPerLiquidityCumulativeX128,\\n\\t\\t//         tickCumulative,\\n\\t\\t//         time,\\n\\t\\t//         true,\\n\\t\\t//         maxLiquidityPerTick\\n\\t\\t//     );\\n\\n\\t\\t//     if (flippedLower) {\\n\\t\\t//         tickBitmap.flipTick(tickLower, tickSpacing);\\n\\t\\t//     }\\n\\t\\t//     if (flippedUpper) {\\n\\t\\t//         tickBitmap.flipTick(tickUpper, tickSpacing);\\n\\t\\t//     }\\n\\n\\t\\t_update(\\n\\t\\t\\tbalance0,\\n\\t\\t\\tbalance1,\\n\\t\\t\\t_reserve0,\\n\\t\\t\\t_reserve1,\\n\\t\\t\\t_pendingReserve0,\\n\\t\\t\\t_pendingReserve1\\n\\t\\t);\\n\\t\\temit SwapIntention(msg.sender, amount0In, amount1In, to);\\n\\t}\\n\\n\\t// function swap(\\n\\t// \\tuint amount0Out,\\n\\t// \\tuint amount1Out,\\n\\t// \\taddress to,\\n\\t// \\tbytes calldata data\\n\\t// ) external override lock {\\n\\t// \\trequire(\\n\\t// \\t\\tamount0Out > 0 || amount1Out > 0,\\n\\t// \\t\\t\\\"Butter: INSUFFICIENT_OUTPUT_AMOUNT\\\"\\n\\t// \\t);\\n\\t// \\trequire(\\n\\t// \\t\\t!(amount0Out > 0 && amount1Out > 0),\\n\\t// \\t\\t\\\"Butter: INVALID_OUTPUT_AMOUNT\\\"\\n\\t// \\t);\\n\\n\\t// \\t_doClearing();\\n\\n\\t// \\t(uint112 _reserve0, uint112 _reserve1, ) = getReserves(); // gas savings\\n\\t// \\trequire(\\n\\t// \\t\\tamount0Out < _reserve0 && amount1Out < _reserve1,\\n\\t// \\t\\t\\\"Butter: INSUFFICIENT_LIQUIDITY\\\"\\n\\t// \\t);\\n\\n\\t// \\tuint balance0;\\n\\t// \\tuint balance1;\\n\\t// \\t{\\n\\t// \\t\\t// scope for _token{0,1}, avoids stack too deep errors\\n\\t// \\t\\taddress _token0 = token0;\\n\\t// \\t\\taddress _token1 = token1;\\n\\t// \\t\\trequire(to != _token0 && to != _token1, \\\"Butter: INVALID_TO\\\");\\n\\t// \\t\\tif (amount0Out > 0) _safeTransfer(_token0, to, amount0Out); // optimistically transfer tokens\\n\\t// \\t\\tif (amount1Out > 0) _safeTransfer(_token1, to, amount1Out); // optimistically transfer tokens\\n\\t// \\t\\tif (data.length > 0)\\n\\t// \\t\\t\\tIButterCallee(to).uniswapV2Call(\\n\\t// \\t\\t\\t\\tmsg.sender,\\n\\t// \\t\\t\\t\\tamount0Out,\\n\\t// \\t\\t\\t\\tamount1Out,\\n\\t// \\t\\t\\t\\tdata\\n\\t// \\t\\t\\t);\\n\\t// \\t\\tbalance0 = IERC20(_token0).balanceOf(address(this));\\n\\t// \\t\\tbalance1 = IERC20(_token1).balanceOf(address(this));\\n\\t// \\t}\\n\\t// \\tuint amount0In = balance0 > _reserve0 - amount0Out\\n\\t// \\t\\t? balance0 - (_reserve0 - amount0Out)\\n\\t// \\t\\t: 0;\\n\\t// \\tuint amount1In = balance1 > _reserve1 - amount1Out\\n\\t// \\t\\t? balance1 - (_reserve1 - amount1Out)\\n\\t// \\t\\t: 0;\\n\\t// \\trequire(\\n\\t// \\t\\tamount0In > 0 || amount1In > 0,\\n\\t// \\t\\t\\\"Butter: INSUFFICIENT_INPUT_AMOUNT\\\"\\n\\t// \\t);\\n\\t// \\t{\\n\\t// \\t\\t// scope for reserve{0,1}Adjusted, avoids stack too deep errors\\n\\t// \\t\\tuint balance0Adjusted = balance0.mul(1000).sub(amount0In.mul(3));\\n\\t// \\t\\tuint balance1Adjusted = balance1.mul(1000).sub(amount1In.mul(3));\\n\\t// \\t\\trequire(\\n\\t// \\t\\t\\tbalance0Adjusted.mul(balance1Adjusted) >=\\n\\t// \\t\\t\\t\\tuint(_reserve0).mul(_reserve1).mul(1000 ** 2),\\n\\t// \\t\\t\\t\\\"Butter: K\\\"\\n\\t// \\t\\t);\\n\\t// \\t}\\n\\n\\t// \\t_update(balance0, balance1, _reserve0, _reserve1);\\n\\t// \\temit Swap(msg.sender, amount0In, amount1In, amount0Out, amount1Out, to);\\n\\t// }\\n\\n\\t// force balances to match reserves\\n\\tfunction skim(address to) external override lock {\\n\\t\\taddress _token0 = token0; // gas savings\\n\\t\\taddress _token1 = token1; // gas savings\\n\\t\\t_safeTransfer(\\n\\t\\t\\t_token0,\\n\\t\\t\\tto,\\n\\t\\t\\tIERC20(_token0).balanceOf(address(this)).sub(reserve0)\\n\\t\\t);\\n\\t\\t_safeTransfer(\\n\\t\\t\\t_token1,\\n\\t\\t\\tto,\\n\\t\\t\\tIERC20(_token1).balanceOf(address(this)).sub(reserve1)\\n\\t\\t);\\n\\t}\\n\\n\\t// force reserves to match balances\\n\\tfunction sync() external override lock {\\n\\t\\t_update(\\n\\t\\t\\tIERC20(token0).balanceOf(address(this)),\\n\\t\\t\\tIERC20(token1).balanceOf(address(this)),\\n\\t\\t\\treserve0,\\n\\t\\t\\treserve1,\\n\\t\\t\\tpendingReserve0,\\n\\t\\t\\tpendingReserve1\\n\\t\\t);\\n\\t}\\n}\\n\",\"keccak256\":\"0x43b46057d12efb7e7e9ffd8bb05ea2f4f16d8ceace2bf4ecf0c4d5be5e8869b7\"},\"contracts/ERC1155.sol\":{\"content\":\"pragma solidity >=0.5.0;\\n\\nimport \\\"./libraries/SafeMath.sol\\\";\\nimport \\\"./libraries/Address.sol\\\";\\nimport \\\"./interfaces/IERC1155.sol\\\";\\n\\n// A sample implementation of core ERC1155 function.\\ncontract ERC1155 is IERC1155 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n    \\n    bytes4 constant internal ERC1155_ACCEPTED = 0xf23a6e61; // bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))\\n    bytes4 constant internal ERC1155_BATCH_ACCEPTED = 0xbc197c81; // bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))\\n\\n    // id => (owner => balance)\\n    mapping (uint256 => mapping(address => uint256)) internal balances;\\n\\n    // owner => (operator => approved)\\n    mapping (address => mapping(address => bool)) internal operatorApproval;\\n\\n/////////////////////////////////////////// ERC165 //////////////////////////////////////////////\\n\\n    /*\\n        bytes4(keccak256('supportsInterface(bytes4)'));\\n    */\\n    bytes4 constant private INTERFACE_SIGNATURE_ERC165 = 0x01ffc9a7;\\n\\n    /*\\n        bytes4(keccak256(\\\"safeTransferFrom(address,address,uint256,uint256,bytes)\\\")) ^\\n        bytes4(keccak256(\\\"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)\\\")) ^\\n        bytes4(keccak256(\\\"balanceOf(address,uint256)\\\")) ^\\n        bytes4(keccak256(\\\"balanceOfBatch(address[],uint256[])\\\")) ^\\n        bytes4(keccak256(\\\"setApprovalForAll(address,bool)\\\")) ^\\n        bytes4(keccak256(\\\"isApprovedForAll(address,address)\\\"));\\n    */\\n    bytes4 constant private INTERFACE_SIGNATURE_ERC1155 = 0xd9b67a26;\\n\\n    function supportsInterface(bytes4 _interfaceId)\\n    public\\n    view\\n    virtual\\n    override\\n    returns (bool) {\\n         if (_interfaceId == INTERFACE_SIGNATURE_ERC165 ||\\n             _interfaceId == INTERFACE_SIGNATURE_ERC1155) {\\n            return true;\\n         }\\n\\n         return false;\\n    }\\n\\n/////////////////////////////////////////// ERC1155 //////////////////////////////////////////////\\n\\n    /**\\n        @notice Transfers `_value` amount of an `_id` from the `_from` address to the `_to` address specified (with safety call).\\n        @dev Caller must be approved to manage the tokens being transferred out of the `_from` account (see \\\"Approval\\\" section of the standard).\\n        MUST revert if `_to` is the zero address.\\n        MUST revert if balance of holder for token `_id` is lower than the `_value` sent.\\n        MUST revert on any other error.\\n        MUST emit the `TransferSingle` event to reflect the balance change (see \\\"Safe Transfer Rules\\\" section of the standard).\\n        After the above conditions are met, this function MUST check if `_to` is a smart contract (e.g. code size > 0). If so, it MUST call `onERC1155Received` on `_to` and act appropriately (see \\\"Safe Transfer Rules\\\" section of the standard).\\n        @param _from    Source address\\n        @param _to      Target address\\n        @param _id      ID of the token type\\n        @param _value   Transfer amount\\n        @param _data    Additional data with no specified format, MUST be sent unaltered in call to `onERC1155Received` on `_to`\\n    */\\n    function safeTransferFrom(address _from, address _to, uint256 _id, uint256 _value, bytes calldata _data) external override {\\n\\n        require(_to != address(0x0), \\\"_to must be non-zero.\\\");\\n        require(_from == msg.sender || operatorApproval[_from][msg.sender] == true, \\\"Need operator approval for 3rd party transfers.\\\");\\n\\n        // SafeMath will throw with insuficient funds _from\\n        // or if _id is not valid (balance will be 0)\\n        balances[_id][_from] = balances[_id][_from].sub(_value);\\n        balances[_id][_to]   = _value.add(balances[_id][_to]);\\n\\n        // MUST emit event\\n        emit TransferSingle(msg.sender, _from, _to, _id, _value);\\n\\n        // Now that the balance is updated and the event was emitted,\\n        // call onERC1155Received if the destination is a contract.\\n        if (_to.isContract()) {\\n            _doSafeTransferAcceptanceCheck(msg.sender, _from, _to, _id, _value, _data);\\n        }\\n    }\\n\\n    /**\\n        @notice Transfers `_values` amount(s) of `_ids` from the `_from` address to the `_to` address specified (with safety call).\\n        @dev Caller must be approved to manage the tokens being transferred out of the `_from` account (see \\\"Approval\\\" section of the standard).\\n        MUST revert if `_to` is the zero address.\\n        MUST revert if length of `_ids` is not the same as length of `_values`.\\n        MUST revert if any of the balance(s) of the holder(s) for token(s) in `_ids` is lower than the respective amount(s) in `_values` sent to the recipient.\\n        MUST revert on any other error.\\n        MUST emit `TransferSingle` or `TransferBatch` event(s) such that all the balance changes are reflected (see \\\"Safe Transfer Rules\\\" section of the standard).\\n        Balance changes and events MUST follow the ordering of the arrays (_ids[0]/_values[0] before _ids[1]/_values[1], etc).\\n        After the above conditions for the transfer(s) in the batch are met, this function MUST check if `_to` is a smart contract (e.g. code size > 0). If so, it MUST call the relevant `ERC1155TokenReceiver` hook(s) on `_to` and act appropriately (see \\\"Safe Transfer Rules\\\" section of the standard).\\n        @param _from    Source address\\n        @param _to      Target address\\n        @param _ids     IDs of each token type (order and length must match _values array)\\n        @param _values  Transfer amounts per token type (order and length must match _ids array)\\n        @param _data    Additional data with no specified format, MUST be sent unaltered in call to the `ERC1155TokenReceiver` hook(s) on `_to`\\n    */\\n    function safeBatchTransferFrom(address _from, address _to, uint256[] calldata _ids, uint256[] calldata _values, bytes calldata _data) external override {\\n\\n        // MUST Throw on errors\\n        require(_to != address(0x0), \\\"destination address must be non-zero.\\\");\\n        require(_ids.length == _values.length, \\\"_ids and _values array length must match.\\\");\\n        require(_from == msg.sender || operatorApproval[_from][msg.sender] == true, \\\"Need operator approval for 3rd party transfers.\\\");\\n\\n        for (uint256 i = 0; i < _ids.length; ++i) {\\n            uint256 id = _ids[i];\\n            uint256 value = _values[i];\\n\\n            // SafeMath will throw with insuficient funds _from\\n            // or if _id is not valid (balance will be 0)\\n            balances[id][_from] = balances[id][_from].sub(value);\\n            balances[id][_to]   = value.add(balances[id][_to]);\\n        }\\n\\n        // Note: instead of the below batch versions of event and acceptance check you MAY have emitted a TransferSingle\\n        // event and a subsequent call to _doSafeTransferAcceptanceCheck in above loop for each balance change instead.\\n        // Or emitted a TransferSingle event for each in the loop and then the single _doSafeBatchTransferAcceptanceCheck below.\\n        // However it is implemented the balance changes and events MUST match when a check (i.e. calling an external contract) is done.\\n\\n        // MUST emit event\\n        emit TransferBatch(msg.sender, _from, _to, _ids, _values);\\n\\n        // Now that the balances are updated and the events are emitted,\\n        // call onERC1155BatchReceived if the destination is a contract.\\n        if (_to.isContract()) {\\n            _doSafeBatchTransferAcceptanceCheck(msg.sender, _from, _to, _ids, _values, _data);\\n        }\\n    }\\n\\n    /**\\n        @notice Get the balance of an account's Tokens.\\n        @param _owner  The address of the token holder\\n        @param _id     ID of the Token\\n        @return        The _owner's balance of the Token type requested\\n     */\\n    function balanceOf(address _owner, uint256 _id) external view override returns (uint256) {\\n        // The balance of any account can be calculated from the Transfer events history.\\n        // However, since we need to keep the balances to validate transfer request,\\n        // there is no extra cost to also provide a query function.\\n        return balances[_id][_owner];\\n    }\\n\\n\\n    /**\\n        @notice Get the balance of multiple account/token pairs\\n        @param _owners The addresses of the token holders\\n        @param _ids    ID of the Tokens\\n        @return        The _owner's balance of the Token types requested (i.e. balance for each (owner, id) pair)\\n     */\\n    function balanceOfBatch(address[] calldata _owners, uint256[] calldata _ids) external view override returns (uint256[] memory) {\\n\\n        require(_owners.length == _ids.length);\\n\\n        uint256[] memory balances_ = new uint256[](_owners.length);\\n\\n        for (uint256 i = 0; i < _owners.length; ++i) {\\n            balances_[i] = balances[_ids[i]][_owners[i]];\\n        }\\n\\n        return balances_;\\n    }\\n\\n    /**\\n        @notice Enable or disable approval for a third party (\\\"operator\\\") to manage all of the caller's tokens.\\n        @dev MUST emit the ApprovalForAll event on success.\\n        @param _operator  Address to add to the set of authorized operators\\n        @param _approved  True if the operator is approved, false to revoke approval\\n    */\\n    function setApprovalForAll(address _operator, bool _approved) external override {\\n        operatorApproval[msg.sender][_operator] = _approved;\\n        emit ApprovalForAll(msg.sender, _operator, _approved);\\n    }\\n\\n    /**\\n        @notice Queries the approval status of an operator for a given owner.\\n        @param _owner     The owner of the Tokens\\n        @param _operator  Address of authorized operator\\n        @return           True if the operator is approved, false if not\\n    */\\n    function isApprovedForAll(address _owner, address _operator) external view override returns (bool) {\\n        return operatorApproval[_owner][_operator];\\n    }\\n\\n/////////////////////////////////////////// Internal //////////////////////////////////////////////\\n\\n    function _doSafeTransferAcceptanceCheck(address _operator, address _from, address _to, uint256 _id, uint256 _value, bytes memory _data) internal {\\n\\n        // If this was a hybrid standards solution you would have to check ERC165(_to).supportsInterface(0x4e2312e0) here but as this is a pure implementation of an ERC-1155 token set as recommended by\\n        // the standard, it is not necessary. The below should revert in all failure cases i.e. _to isn't a receiver, or it is and either returns an unknown value or it reverts in the call to indicate non-acceptance.\\n\\n\\n        // Note: if the below reverts in the onERC1155Received function of the _to address you will have an undefined revert reason returned rather than the one in the require test.\\n        // If you want predictable revert reasons consider using low level _to.call() style instead so the revert does not bubble up and you can revert yourself on the ERC1155_ACCEPTED test.\\n        require(ERC1155TokenReceiver(_to).onERC1155Received(_operator, _from, _id, _value, _data) == ERC1155_ACCEPTED, \\\"contract returned an unknown value from onERC1155Received\\\");\\n    }\\n\\n    function _doSafeBatchTransferAcceptanceCheck(address _operator, address _from, address _to, uint256[] memory _ids, uint256[] memory _values, bytes memory _data) internal {\\n\\n        // If this was a hybrid standards solution you would have to check ERC165(_to).supportsInterface(0x4e2312e0) here but as this is a pure implementation of an ERC-1155 token set as recommended by\\n        // the standard, it is not necessary. The below should revert in all failure cases i.e. _to isn't a receiver, or it is and either returns an unknown value or it reverts in the call to indicate non-acceptance.\\n\\n        // Note: if the below reverts in the onERC1155BatchReceived function of the _to address you will have an undefined revert reason returned rather than the one in the require test.\\n        // If you want predictable revert reasons consider using low level _to.call() style instead so the revert does not bubble up and you can revert yourself on the ERC1155_BATCH_ACCEPTED test.\\n        require(ERC1155TokenReceiver(_to).onERC1155BatchReceived(_operator, _from, _ids, _values, _data) == ERC1155_BATCH_ACCEPTED, \\\"contract returned an unknown value from onERC1155BatchReceived\\\");\\n    }\\n}\\n\\n/**\\n    @dev Mintable form of ERC1155\\n    Shows how easy it is to mint new items.\\n*/\\ncontract ERC1155Mintable is ERC1155 {\\n\\n    bytes4 constant private INTERFACE_SIGNATURE_URI = 0x0e89341c;\\n\\n    // id => creators\\n    mapping (uint256 => address) public creators;\\n\\n    function supportsInterface(bytes4 _interfaceId)\\n    public\\n    view\\n    override\\n    returns (bool) {\\n        if (_interfaceId == INTERFACE_SIGNATURE_URI) {\\n            return true;\\n        } else {\\n            return super.supportsInterface(_interfaceId);\\n        }\\n    }\\n\\n    // Creates a new token type and assings _initialSupply to minter\\n    function _create(uint256 _id, uint256 _initialSupply) internal {\\n        creators[_id] = msg.sender;\\n        balances[_id][msg.sender] = _initialSupply;\\n\\n        // Transfer event with mint semantic\\n        emit TransferSingle(msg.sender, address(0x0), msg.sender, _id, _initialSupply);\\n    }\\n\\n    // Batch mint tokens. Assign directly to _to[].\\n    function _mint(uint256 _id, address[] memory _to, uint256[] memory _quantities) internal {\\n\\n        for (uint256 i = 0; i < _to.length; ++i) {\\n\\n            address to = _to[i];\\n            uint256 quantity = _quantities[i];\\n\\n            // Grant the items to the caller\\n            balances[_id][to] = quantity.add(balances[_id][to]);\\n\\n            // Emit the Transfer/Mint event.\\n            // the 0x0 source address implies a mint\\n            // It will also provide the circulating supply info.\\n            emit TransferSingle(msg.sender, address(0x0), to, _id, quantity);\\n\\n            if (to.isContract()) {\\n                _doSafeTransferAcceptanceCheck(msg.sender, msg.sender, to, _id, quantity, '');\\n            }\\n        }\\n    }\\n\\n    function _burn(uint256 _id, address[] memory _from, uint256[] memory _quantities) internal {\\n\\n        for (uint256 i = 0; i < _from.length; ++i) {\\n\\n            address from = _from[i];\\n            uint256 quantity = _quantities[i];\\n\\n            // Will throw if intent to burn more than balance\\n            balances[_id][from] = balances[_id][from].sub(quantity);\\n\\n            // Emit Transfer/Mint event\\n            // the 0x0 destination address implies a burn\\n            // It will also provide the circulating supply info.\\n            emit TransferSingle(msg.sender, from, address(0x0), _id, quantity);\\n        }\\n    }\\n}\",\"keccak256\":\"0x3b18e75631d2b31f0a8862b412490bfbab1a92f8f1c66f043605d7c10416e79e\"},\"contracts/interfaces/IButterCallee.sol\":{\"content\":\"pragma solidity >=0.5.0;\\n\\ninterface IButterCallee {\\n    function uniswapV2Call(address sender, uint amount0, uint amount1, bytes calldata data) external;\\n}\\n\",\"keccak256\":\"0x02143ef4f45a7a490ad2ef158699a362e79599a65a5829dcb66c97b9184b35e7\"},\"contracts/interfaces/IButterERC1155.sol\":{\"content\":\"pragma solidity >=0.5.0;\\n\\nimport \\\"./IERC1155.sol\\\";\\ninterface IButterERC1155 is IERC1155 {\\n\\tfunction DOMAIN_SEPARATOR() external view returns (bytes32);\\n\\t// function PERMIT_TYPEHASH() external pure returns (bytes32);\\n\\t// function nonces(address owner) external view returns (uint);\\n\\tfunction calculateNFTId(\\n\\t\\tuint256 blockNumber,\\n\\t\\tuint256 tickLimit\\n\\t) external view returns (uint256);\\n\\n\\t// function permit(\\n\\t// \\taddress owner,\\n\\t// \\tuint256 id,\\n\\t// \\taddress spender,\\n\\t// \\tuint value,\\n\\t// \\tuint deadline,\\n\\t// \\tuint8 v,\\n\\t// \\tbytes32 r,\\n\\t// \\tbytes32 s\\n\\t// ) external;\\n\\n\\tfunction mint(address to, uint256 tickLimit, uint256 value) external;\\n}\\n\",\"keccak256\":\"0x214d3db4945d8165f151e56956b13c5342ae4d2dbd76e2022b5f4ad68aea2a39\"},\"contracts/interfaces/IButterERC20.sol\":{\"content\":\"pragma solidity >=0.5.0;\\n\\ninterface IButterERC20 {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external pure returns (string memory);\\n    function symbol() external pure returns (string memory);\\n    function decimals() external pure returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n    function nonces(address owner) external view returns (uint);\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n}\\n\",\"keccak256\":\"0x332c7b5b07c3268899ee975b9f378d3d96a500d3131276a5b24150446e713763\"},\"contracts/interfaces/IButterFactory.sol\":{\"content\":\"pragma solidity >=0.5.0;\\n\\ninterface IButterFactory {\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\\n\\n    function feeTo() external view returns (address);\\n    function feeToSetter() external view returns (address);\\n\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\n    function allPairs(uint) external view returns (address pair);\\n    function allPairsLength() external view returns (uint);\\n\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\n\\n    function setFeeTo(address) external;\\n    function setFeeToSetter(address) external;\\n}\\n\",\"keccak256\":\"0x8ec35f9d7357a7da1ed83e8c1b14d47cf68d058579ac9296a6545cc29b5ebe18\"},\"contracts/interfaces/IButterPair.sol\":{\"content\":\"pragma solidity >=0.5.0;\\n\\nimport \\\"./IButterERC20.sol\\\";\\ninterface IButterPair is IButterERC20 {\\n\\tevent Mint(address indexed sender, uint amount0, uint amount1);\\n\\tevent Burn(\\n\\t\\taddress indexed sender,\\n\\t\\tuint amount0,\\n\\t\\tuint amount1,\\n\\t\\taddress indexed to\\n\\t);\\n\\tevent SwapIntention(\\n\\t\\taddress indexed sender,\\n\\t\\tuint amount0In,\\n\\t\\tuint amount1In,\\n\\t\\taddress indexed to\\n\\t);\\n\\tevent Swap(\\n\\t\\taddress indexed sender,\\n\\t\\tuint amount0In,\\n\\t\\tuint amount1In,\\n\\t\\tuint amount0Out,\\n\\t\\tuint amount1Out,\\n\\t\\taddress indexed to\\n\\t);\\n\\tevent Sync(uint112 reserve0, uint112 reserve1);\\n\\n\\tfunction MINIMUM_LIQUIDITY() external pure returns (uint);\\n\\tfunction factory() external view returns (address);\\n\\tfunction token0() external view returns (address);\\n\\tfunction token1() external view returns (address);\\n\\tfunction getReserves()\\n\\t\\texternal\\n\\t\\tview\\n\\t\\treturns (\\n\\t\\t\\tuint112 reserve0,\\n\\t\\t\\tuint112 reserve1,\\n\\t\\t\\tuint112 _pendingReserve0,\\n\\t\\t\\tuint112 _pendingReserve1,\\n\\t\\t\\tuint32 blockTimestampLast\\n\\t\\t);\\n\\tfunction price0CumulativeLast() external view returns (uint);\\n\\tfunction price1CumulativeLast() external view returns (uint);\\n\\tfunction kLast() external view returns (uint);\\n\\n\\tfunction mint(address to) external returns (uint liquidity);\\n\\tfunction burn(address to) external returns (uint amount0, uint amount1);\\n\\tfunction swap(\\n\\t\\tuint amount0Out,\\n\\t\\tuint amount1Out,\\n\\t\\taddress to,\\n\\t\\tbytes calldata data\\n\\t) external;\\n\\tfunction skim(address to) external;\\n\\tfunction sync() external;\\n\\n\\tfunction initialize(address, address) external;\\n}\\n\",\"keccak256\":\"0x57e449c865e2341a8242b53de4da06d406db657c6c9f30ff502e400689225ad0\"},\"contracts/interfaces/IERC1155.sol\":{\"content\":\"pragma solidity >=0.5.0;\\n\\n/**\\n * @title ERC165\\n * @dev https://github.com/ethereum/EIPs/blob/master/EIPS/eip-165.md\\n */\\ninterface ERC165 {\\n\\n    /**\\n     * @notice Query if a contract implements an interface\\n     * @param _interfaceId The interface identifier, as specified in ERC-165\\n     * @dev Interface identification is specified in ERC-165. This function\\n     * uses less than 30,000 gas.\\n     */\\n    function supportsInterface(bytes4 _interfaceId)\\n    external\\n    view\\n    returns (bool);\\n}\\n\\n/**\\n    @title ERC-1155 Multi Token Standard\\n    @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-1155.md\\n    Note: The ERC-165 identifier for this interface is 0xd9b67a26.\\n */\\ninterface IERC1155 is ERC165 {\\n    /**\\n        @dev Either `TransferSingle` or `TransferBatch` MUST emit when tokens are transferred, including zero value transfers as well as minting or burning (see \\\"Safe Transfer Rules\\\" section of the standard).\\n        The `_operator` argument MUST be msg.sender.\\n        The `_from` argument MUST be the address of the holder whose balance is decreased.\\n        The `_to` argument MUST be the address of the recipient whose balance is increased.\\n        The `_id` argument MUST be the token type being transferred.\\n        The `_value` argument MUST be the number of tokens the holder balance is decreased by and match what the recipient balance is increased by.\\n        When minting/creating tokens, the `_from` argument MUST be set to `0x0` (i.e. zero address).\\n        When burning/destroying tokens, the `_to` argument MUST be set to `0x0` (i.e. zero address).\\n    */\\n    event TransferSingle(address indexed _operator, address indexed _from, address indexed _to, uint256 _id, uint256 _value);\\n\\n    /**\\n        @dev Either `TransferSingle` or `TransferBatch` MUST emit when tokens are transferred, including zero value transfers as well as minting or burning (see \\\"Safe Transfer Rules\\\" section of the standard).\\n        The `_operator` argument MUST be msg.sender.\\n        The `_from` argument MUST be the address of the holder whose balance is decreased.\\n        The `_to` argument MUST be the address of the recipient whose balance is increased.\\n        The `_ids` argument MUST be the list of tokens being transferred.\\n        The `_values` argument MUST be the list of number of tokens (matching the list and order of tokens specified in _ids) the holder balance is decreased by and match what the recipient balance is increased by.\\n        When minting/creating tokens, the `_from` argument MUST be set to `0x0` (i.e. zero address).\\n        When burning/destroying tokens, the `_to` argument MUST be set to `0x0` (i.e. zero address).\\n    */\\n    event TransferBatch(address indexed _operator, address indexed _from, address indexed _to, uint256[] _ids, uint256[] _values);\\n\\n    /**\\n        @dev MUST emit when approval for a second party/operator address to manage all tokens for an owner address is enabled or disabled (absense of an event assumes disabled).\\n    */\\n    event ApprovalForAll(address indexed _owner, address indexed _operator, bool _approved);\\n\\n    /**\\n        @dev MUST emit when the URI is updated for a token ID.\\n        URIs are defined in RFC 3986.\\n        The URI MUST point a JSON file that conforms to the \\\"ERC-1155 Metadata URI JSON Schema\\\".\\n    */\\n    event URI(string _value, uint256 indexed _id);\\n\\n    /**\\n        @notice Transfers `_value` amount of an `_id` from the `_from` address to the `_to` address specified (with safety call).\\n        @dev Caller must be approved to manage the tokens being transferred out of the `_from` account (see \\\"Approval\\\" section of the standard).\\n        MUST revert if `_to` is the zero address.\\n        MUST revert if balance of holder for token `_id` is lower than the `_value` sent.\\n        MUST revert on any other error.\\n        MUST emit the `TransferSingle` event to reflect the balance change (see \\\"Safe Transfer Rules\\\" section of the standard).\\n        After the above conditions are met, this function MUST check if `_to` is a smart contract (e.g. code size > 0). If so, it MUST call `onERC1155Received` on `_to` and act appropriately (see \\\"Safe Transfer Rules\\\" section of the standard).\\n        @param _from    Source address\\n        @param _to      Target address\\n        @param _id      ID of the token type\\n        @param _value   Transfer amount\\n        @param _data    Additional data with no specified format, MUST be sent unaltered in call to `onERC1155Received` on `_to`\\n    */\\n    function safeTransferFrom(address _from, address _to, uint256 _id, uint256 _value, bytes calldata _data) external;\\n\\n    /**\\n        @notice Transfers `_values` amount(s) of `_ids` from the `_from` address to the `_to` address specified (with safety call).\\n        @dev Caller must be approved to manage the tokens being transferred out of the `_from` account (see \\\"Approval\\\" section of the standard).\\n        MUST revert if `_to` is the zero address.\\n        MUST revert if length of `_ids` is not the same as length of `_values`.\\n        MUST revert if any of the balance(s) of the holder(s) for token(s) in `_ids` is lower than the respective amount(s) in `_values` sent to the recipient.\\n        MUST revert on any other error.\\n        MUST emit `TransferSingle` or `TransferBatch` event(s) such that all the balance changes are reflected (see \\\"Safe Transfer Rules\\\" section of the standard).\\n        Balance changes and events MUST follow the ordering of the arrays (_ids[0]/_values[0] before _ids[1]/_values[1], etc).\\n        After the above conditions for the transfer(s) in the batch are met, this function MUST check if `_to` is a smart contract (e.g. code size > 0). If so, it MUST call the relevant `ERC1155TokenReceiver` hook(s) on `_to` and act appropriately (see \\\"Safe Transfer Rules\\\" section of the standard).\\n        @param _from    Source address\\n        @param _to      Target address\\n        @param _ids     IDs of each token type (order and length must match _values array)\\n        @param _values  Transfer amounts per token type (order and length must match _ids array)\\n        @param _data    Additional data with no specified format, MUST be sent unaltered in call to the `ERC1155TokenReceiver` hook(s) on `_to`\\n    */\\n    function safeBatchTransferFrom(address _from, address _to, uint256[] calldata _ids, uint256[] calldata _values, bytes calldata _data) external;\\n\\n    /**\\n        @notice Get the balance of an account's Tokens.\\n        @param _owner  The address of the token holder\\n        @param _id     ID of the Token\\n        @return        The _owner's balance of the Token type requested\\n     */\\n    function balanceOf(address _owner, uint256 _id) external view returns (uint256);\\n\\n    /**\\n        @notice Get the balance of multiple account/token pairs\\n        @param _owners The addresses of the token holders\\n        @param _ids    ID of the Tokens\\n        @return        The _owner's balance of the Token types requested (i.e. balance for each (owner, id) pair)\\n     */\\n    function balanceOfBatch(address[] calldata _owners, uint256[] calldata _ids) external view returns (uint256[] memory);\\n\\n    /**\\n        @notice Enable or disable approval for a third party (\\\"operator\\\") to manage all of the caller's tokens.\\n        @dev MUST emit the ApprovalForAll event on success.\\n        @param _operator  Address to add to the set of authorized operators\\n        @param _approved  True if the operator is approved, false to revoke approval\\n    */\\n    function setApprovalForAll(address _operator, bool _approved) external;\\n\\n    /**\\n        @notice Queries the approval status of an operator for a given owner.\\n        @param _owner     The owner of the Tokens\\n        @param _operator  Address of authorized operator\\n        @return           True if the operator is approved, false if not\\n    */\\n    function isApprovedForAll(address _owner, address _operator) external view returns (bool);\\n}\\n\\n/**\\n    Note: The ERC-165 identifier for this interface is 0x4e2312e0.\\n*/\\ninterface ERC1155TokenReceiver {\\n    /**\\n        @notice Handle the receipt of a single ERC1155 token type.\\n        @dev An ERC1155-compliant smart contract MUST call this function on the token recipient contract, at the end of a `safeTransferFrom` after the balance has been updated.\\n        This function MUST return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` (i.e. 0xf23a6e61) if it accepts the transfer.\\n        This function MUST revert if it rejects the transfer.\\n        Return of any other value than the prescribed keccak256 generated value MUST result in the transaction being reverted by the caller.\\n        @param _operator  The address which initiated the transfer (i.e. msg.sender)\\n        @param _from      The address which previously owned the token\\n        @param _id        The ID of the token being transferred\\n        @param _value     The amount of tokens being transferred\\n        @param _data      Additional data with no specified format\\n        @return           `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n    */\\n    function onERC1155Received(address _operator, address _from, uint256 _id, uint256 _value, bytes calldata _data) external returns(bytes4);\\n\\n    /**\\n        @notice Handle the receipt of multiple ERC1155 token types.\\n        @dev An ERC1155-compliant smart contract MUST call this function on the token recipient contract, at the end of a `safeBatchTransferFrom` after the balances have been updated.\\n        This function MUST return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` (i.e. 0xbc197c81) if it accepts the transfer(s).\\n        This function MUST revert if it rejects the transfer(s).\\n        Return of any other value than the prescribed keccak256 generated value MUST result in the transaction being reverted by the caller.\\n        @param _operator  The address which initiated the batch transfer (i.e. msg.sender)\\n        @param _from      The address which previously owned the token\\n        @param _ids       An array containing ids of each token being transferred (order and length must match _values array)\\n        @param _values    An array containing amounts of each token being transferred (order and length must match _ids array)\\n        @param _data      Additional data with no specified format\\n        @return           `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n    */\\n    function onERC1155BatchReceived(address _operator, address _from, uint256[] calldata _ids, uint256[] calldata _values, bytes calldata _data) external returns(bytes4);\\n}\",\"keccak256\":\"0x72b65fc2680c4efc30298983b9a8df1c1c153203caf86dd14afec9432ca51ac2\"},\"contracts/interfaces/IERC20.sol\":{\"content\":\"pragma solidity >=0.5.0;\\n\\ninterface IERC20 {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external view returns (string memory);\\n    function symbol() external view returns (string memory);\\n    function decimals() external view returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n}\\n\",\"keccak256\":\"0x61db17aebc5d812c7002d15c1da954065e56abe49d64b14c034abe5604d70eb3\"},\"contracts/libraries/Address.sol\":{\"content\":\"pragma solidity >=0.5.0;\\n\\n\\n/**\\n * Utility library of inline functions on addresses\\n */\\nlibrary Address {\\n\\n    /**\\n     * Returns whether the target address is a contract\\n     * @dev This function will return false if invoked during the constructor of a contract,\\n     * as the code is not actually created until after the constructor finishes.\\n     * @param account address of the account to check\\n     * @return whether the target address is a contract\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        uint256 size;\\n        // XXX Currently there is no better way to check if there is a contract in an address\\n        // than to check the size of the code at that address.\\n        // See https://ethereum.stackexchange.com/a/14016/36603\\n        // for more details about how this works.\\n        // TODO Check this again before the Serenity release, because all addresses will be\\n        // contracts then.\\n        // solium-disable-next-line security/no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n}\\n\",\"keccak256\":\"0xe715adcef7dd57397c08ca6fb13e08cff7d180fc75f85e0c9808a777a22946ac\"},\"contracts/libraries/BitMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title BitMath\\n/// @dev This library provides functionality for computing bit properties of an unsigned integer\\nlibrary BitMath {\\n\\t/// @notice Returns the index of the most significant bit of the number,\\n\\t///     where the least significant bit is at index 0 and the most significant bit is at index 255\\n\\t/// @dev The function satisfies the property:\\n\\t///     x >= 2**mostSignificantBit(x) and x < 2**(mostSignificantBit(x)+1)\\n\\t/// @param x the value for which to compute the most significant bit, must be greater than 0\\n\\t/// @return r the index of the most significant bit\\n\\tfunction mostSignificantBit(uint256 x) internal pure returns (uint8 r) {\\n\\t\\trequire(x > 0);\\n\\n\\t\\tif (x >= 0x100000000000000000000000000000000) {\\n\\t\\t\\tx >>= 128;\\n\\t\\t\\tr += 128;\\n\\t\\t}\\n\\t\\tif (x >= 0x10000000000000000) {\\n\\t\\t\\tx >>= 64;\\n\\t\\t\\tr += 64;\\n\\t\\t}\\n\\t\\tif (x >= 0x100000000) {\\n\\t\\t\\tx >>= 32;\\n\\t\\t\\tr += 32;\\n\\t\\t}\\n\\t\\tif (x >= 0x10000) {\\n\\t\\t\\tx >>= 16;\\n\\t\\t\\tr += 16;\\n\\t\\t}\\n\\t\\tif (x >= 0x100) {\\n\\t\\t\\tx >>= 8;\\n\\t\\t\\tr += 8;\\n\\t\\t}\\n\\t\\tif (x >= 0x10) {\\n\\t\\t\\tx >>= 4;\\n\\t\\t\\tr += 4;\\n\\t\\t}\\n\\t\\tif (x >= 0x4) {\\n\\t\\t\\tx >>= 2;\\n\\t\\t\\tr += 2;\\n\\t\\t}\\n\\t\\tif (x >= 0x2) r += 1;\\n\\t}\\n\\n\\t/// @notice Returns the index of the least significant bit of the number,\\n\\t///     where the least significant bit is at index 0 and the most significant bit is at index 255\\n\\t/// @dev The function satisfies the property:\\n\\t///     (x & 2**leastSignificantBit(x)) != 0 and (x & (2**(leastSignificantBit(x)) - 1)) == 0)\\n\\t/// @param x the value for which to compute the least significant bit, must be greater than 0\\n\\t/// @return r the index of the least significant bit\\n\\tfunction leastSignificantBit(uint256 x) internal pure returns (uint8 r) {\\n\\t\\trequire(x > 0);\\n\\n\\t\\tr = 255;\\n\\t\\tif (x & uint256(-1) > 0) {\\n\\t\\t\\tr -= 128;\\n\\t\\t} else {\\n\\t\\t\\tx >>= 128;\\n\\t\\t}\\n\\t\\tif (x & uint64(-1) > 0) {\\n\\t\\t\\tr -= 64;\\n\\t\\t} else {\\n\\t\\t\\tx >>= 64;\\n\\t\\t}\\n\\t\\tif (x & uint32(-1) > 0) {\\n\\t\\t\\tr -= 32;\\n\\t\\t} else {\\n\\t\\t\\tx >>= 32;\\n\\t\\t}\\n\\t\\tif (x & uint16(-1) > 0) {\\n\\t\\t\\tr -= 16;\\n\\t\\t} else {\\n\\t\\t\\tx >>= 16;\\n\\t\\t}\\n\\t\\tif (x & uint8(-1) > 0) {\\n\\t\\t\\tr -= 8;\\n\\t\\t} else {\\n\\t\\t\\tx >>= 8;\\n\\t\\t}\\n\\t\\tif (x & 0xf > 0) {\\n\\t\\t\\tr -= 4;\\n\\t\\t} else {\\n\\t\\t\\tx >>= 4;\\n\\t\\t}\\n\\t\\tif (x & 0x3 > 0) {\\n\\t\\t\\tr -= 2;\\n\\t\\t} else {\\n\\t\\t\\tx >>= 2;\\n\\t\\t}\\n\\t\\tif (x & 0x1 > 0) r -= 1;\\n\\t}\\n}\\n\",\"keccak256\":\"0x0b53750a3af0614ad028dbd05691b8fedd70a740e206f7f3a8e2153e69321c7d\"},\"contracts/libraries/LiquidityMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Math library for liquidity\\nlibrary LiquidityMath {\\n    /// @notice Add a signed liquidity delta to liquidity and revert if it overflows or underflows\\n    /// @param x The liquidity before change\\n    /// @param y The delta by which liquidity should be changed\\n    /// @return z The liquidity delta\\n    function addDelta(uint128 x, int128 y) internal pure returns (uint128 z) {\\n        if (y < 0) {\\n            require((z = x - uint128(-y)) < x, 'LS');\\n        } else {\\n            require((z = x + uint128(y)) >= x, 'LA');\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd53041349718d5bce4a89e87cd911879d41ba42ba3fab0614e5e8b742f352b88\"},\"contracts/libraries/LowGasSafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.6.0;\\n\\n/// @title Optimized overflow and underflow safe math operations\\n/// @notice Contains methods for doing math operations that revert on overflow or underflow for minimal gas cost\\nlibrary LowGasSafeMath {\\n    /// @notice Returns x + y, reverts if sum overflows uint256\\n    /// @param x The augend\\n    /// @param y The addend\\n    /// @return z The sum of x and y\\n    function add(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        require((z = x + y) >= x);\\n    }\\n\\n    /// @notice Returns x - y, reverts if underflows\\n    /// @param x The minuend\\n    /// @param y The subtrahend\\n    /// @return z The difference of x and y\\n    function sub(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        require((z = x - y) <= x);\\n    }\\n\\n    /// @notice Returns x * y, reverts if overflows\\n    /// @param x The multiplicand\\n    /// @param y The multiplier\\n    /// @return z The product of x and y\\n    function mul(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        require(x == 0 || (z = x * y) / x == y);\\n    }\\n\\n    /// @notice Returns x + y, reverts if overflows or underflows\\n    /// @param x The augend\\n    /// @param y The addend\\n    /// @return z The sum of x and y\\n    function add(int256 x, int256 y) internal pure returns (int256 z) {\\n        require((z = x + y) >= x == (y >= 0));\\n    }\\n\\n    /// @notice Returns x - y, reverts if overflows or underflows\\n    /// @param x The minuend\\n    /// @param y The subtrahend\\n    /// @return z The difference of x and y\\n    function sub(int256 x, int256 y) internal pure returns (int256 z) {\\n        require((z = x - y) <= x == (y >= 0));\\n    }\\n}\\n\",\"keccak256\":\"0xc96ba4e985950ecffd96feda6385286d9a4b1ebb2279e420c9bb1b79b765306c\"},\"contracts/libraries/Math.sol\":{\"content\":\"pragma solidity =0.6.6;\\n\\n// a library for performing various math operations\\n\\nlibrary Math {\\n    function min(uint x, uint y) internal pure returns (uint z) {\\n        z = x < y ? x : y;\\n    }\\n\\n    // babylonian method (https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method)\\n    function sqrt(uint y) internal pure returns (uint z) {\\n        if (y > 3) {\\n            z = y;\\n            uint x = y / 2 + 1;\\n            while (x < z) {\\n                z = x;\\n                x = (y / x + x) / 2;\\n            }\\n        } else if (y != 0) {\\n            z = 1;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x704d6479db12a7b4909571f16ad69023d59c44fe469e57998c25807cf2a5f820\"},\"contracts/libraries/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Safe casting methods\\n/// @notice Contains methods for safely casting between types\\nlibrary SafeCast {\\n    /// @notice Cast a uint256 to a uint160, revert on overflow\\n    /// @param y The uint256 to be downcasted\\n    /// @return z The downcasted integer, now type uint160\\n    function toUint160(uint256 y) internal pure returns (uint160 z) {\\n        require((z = uint160(y)) == y);\\n    }\\n\\n    /// @notice Cast a int256 to a int128, revert on overflow or underflow\\n    /// @param y The int256 to be downcasted\\n    /// @return z The downcasted integer, now type int128\\n    function toInt128(int256 y) internal pure returns (int128 z) {\\n        require((z = int128(y)) == y);\\n    }\\n\\n    /// @notice Cast a uint256 to a int256, revert on overflow\\n    /// @param y The uint256 to be casted\\n    /// @return z The casted integer, now type int256\\n    function toInt256(uint256 y) internal pure returns (int256 z) {\\n        require(y < 2**255);\\n        z = int256(y);\\n    }\\n}\\n\",\"keccak256\":\"0x4c12bf820c0b011f5490a209960ca34dd8af34660ef9e01de0438393d15e3fd8\"},\"contracts/libraries/SafeMath.sol\":{\"content\":\"pragma solidity =0.6.6;\\n\\n// a library for performing overflow-safe math, courtesy of DappHub (https://github.com/dapphub/ds-math)\\n\\nlibrary SafeMath {\\n    function add(uint x, uint y) internal pure returns (uint z) {\\n        require((z = x + y) >= x, 'ds-math-add-overflow');\\n    }\\n\\n    function sub(uint x, uint y) internal pure returns (uint z) {\\n        require((z = x - y) <= x, 'ds-math-sub-underflow');\\n    }\\n\\n    function mul(uint x, uint y) internal pure returns (uint z) {\\n        require(y == 0 || (z = x * y) / y == x, 'ds-math-mul-overflow');\\n    }\\n}\\n\",\"keccak256\":\"0x27f0ea82f879b3b01387b583e6d9d0ec858dca3b22b0aad173f8fbda06e761e1\"},\"contracts/libraries/Tick.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity >=0.5.0 <0.8.0;\\n\\nimport \\\"./LowGasSafeMath.sol\\\";\\nimport \\\"./SafeCast.sol\\\";\\n\\nimport \\\"./TickMath.sol\\\";\\nimport \\\"./LiquidityMath.sol\\\";\\n\\n/// @title Tick\\n/// @notice Contains functions for managing tick processes and relevant calculations\\nlibrary Tick {\\n\\tusing LowGasSafeMath for int256;\\n\\tusing SafeCast for int256;\\n\\n\\t// info stored for each initialized individual tick\\n\\tstruct Info {\\n\\t\\t// the total position liquidity that references this tick\\n\\t\\tuint128 liquidityGross;\\n\\t\\t// amount of net liquidity added (subtracted) when tick is crossed from left to right (right to left),\\n\\t\\tint128 liquidityNet;\\n\\t\\t// the cumulative tick value on the other side of the tick\\n\\t\\tint56 tickCumulativeOutside;\\n\\t\\t// the seconds per unit of liquidity on the _other_ side of this tick (relative to the current tick)\\n\\t\\t// only has relative meaning, not absolute \\u2014 the value depends on when the tick is initialized\\n\\t\\tuint160 secondsPerLiquidityOutsideX128;\\n\\t\\t// the seconds spent on the other side of the tick (relative to the current tick)\\n\\t\\t// only has relative meaning, not absolute \\u2014 the value depends on when the tick is initialized\\n\\t\\tuint32 secondsOutside;\\n\\t\\t// true iff the tick is initialized, i.e. the value is exactly equivalent to the expression liquidityGross != 0\\n\\t\\t// these 8 bits are set to prevent fresh sstores when crossing newly initialized ticks\\n\\t\\tbool initialized;\\n\\t}\\n\\n\\t/// @notice Derives max liquidity per tick from given tick spacing\\n\\t/// @dev Executed within the pool constructor\\n\\t/// @param tickSpacing The amount of required tick separation, realized in multiples of `tickSpacing`\\n\\t///     e.g., a tickSpacing of 3 requires ticks to be initialized every 3rd tick i.e., ..., -6, -3, 0, 3, 6, ...\\n\\t/// @return The max liquidity per tick\\n\\tfunction tickSpacingToMaxLiquidityPerTick(\\n\\t\\tint24 tickSpacing\\n\\t) internal pure returns (uint128) {\\n\\t\\tint24 minTick = (TickMath.MIN_TICK / tickSpacing) * tickSpacing;\\n\\t\\tint24 maxTick = (TickMath.MAX_TICK / tickSpacing) * tickSpacing;\\n\\t\\tuint24 numTicks = uint24((maxTick - minTick) / tickSpacing) + 1;\\n\\t\\treturn uint128(-1) / numTicks;\\n\\t}\\n\\n\\t/// @notice Updates a tick and returns true if the tick was flipped from initialized to uninitialized, or vice versa\\n\\t/// @param self The mapping containing all tick information for initialized ticks\\n\\t/// @param tick The tick that will be updated\\n\\t/// @param liquidityDelta A new amount of liquidity to be added (subtracted) when tick is crossed from left to right (right to left)\\n\\t/// @param upper true for updating a position's upper tick, or false for updating a position's lower tick\\n\\t/// @param maxLiquidity The maximum liquidity allocation for a single tick\\n\\t/// @return flipped Whether the tick was flipped from initialized to uninitialized, or vice versa\\n\\tfunction update(\\n\\t\\tmapping(int24 => Tick.Info) storage self,\\n\\t\\tint24 tick,\\n\\t\\tint128 liquidityDelta,\\n\\t\\tbool upper,\\n\\t\\tuint128 maxLiquidity\\n\\t) internal returns (bool flipped) {\\n\\t\\tTick.Info storage info = self[tick];\\n\\n\\t\\tuint128 liquidityGrossBefore = info.liquidityGross;\\n\\t\\tuint128 liquidityGrossAfter = LiquidityMath.addDelta(\\n\\t\\t\\tliquidityGrossBefore,\\n\\t\\t\\tliquidityDelta\\n\\t\\t);\\n\\n\\t\\trequire(liquidityGrossAfter <= maxLiquidity, \\\"LO\\\");\\n\\n\\t\\tflipped = (liquidityGrossAfter == 0) != (liquidityGrossBefore == 0);\\n\\n\\t\\tif (liquidityGrossBefore == 0) {\\n\\t\\t\\t// by convention, we assume that all growth before a tick was initialized happened _below_ the tick\\n\\t\\t\\tinfo.initialized = true;\\n\\t\\t}\\n\\n\\t\\tinfo.liquidityGross = liquidityGrossAfter;\\n\\n\\t\\t// when the lower (upper) tick is crossed left to right (right to left), liquidity must be added (removed)\\n\\t\\tinfo.liquidityNet = upper\\n\\t\\t\\t? int256(info.liquidityNet).sub(liquidityDelta).toInt128()\\n\\t\\t\\t: int256(info.liquidityNet).add(liquidityDelta).toInt128();\\n\\t}\\n\\n\\t/// @notice Clears tick data\\n\\t/// @param self The mapping containing all initialized tick information for initialized ticks\\n\\t/// @param tick The tick that will be cleared\\n\\tfunction clear(\\n\\t\\tmapping(int24 => Tick.Info) storage self,\\n\\t\\tint24 tick\\n\\t) internal {\\n\\t\\tdelete self[tick];\\n\\t}\\n\\n\\t/// @notice Transitions to next tick as needed by price movement\\n\\t/// @param self The mapping containing all tick information for initialized ticks\\n\\t/// @param tick The destination tick of the transition\\n\\t/// @return liquidityNet The amount of liquidity added (subtracted) when tick is crossed from left to right (right to left)\\n\\tfunction cross(\\n\\t\\tmapping(int24 => Tick.Info) storage self,\\n\\t\\tint24 tick\\n\\t) internal returns (int128 liquidityNet) {\\n\\t\\tTick.Info storage info = self[tick];\\n\\t\\tliquidityNet = info.liquidityNet;\\n\\t}\\n}\\n\",\"keccak256\":\"0x2a40b5e37fb62466f9dbad46b99a0ace57e515bd0c9fdbf70f64c660f32b7b9a\"},\"contracts/libraries/TickBitmap.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity >=0.5.0;\\n\\nimport \\\"./BitMath.sol\\\";\\n\\n/// @title Packed tick initialized state library\\n/// @notice Stores a packed mapping of tick index to its initialized state\\n/// @dev The mapping uses int16 for keys since ticks are represented as int24 and there are 256 (2^8) values per word.\\nlibrary TickBitmap {\\n\\t/// @notice Computes the position in the mapping where the initialized bit for a tick lives\\n\\t/// @param tick The tick for which to compute the position\\n\\t/// @return wordPos The key in the mapping containing the word in which the bit is stored\\n\\t/// @return bitPos The bit position in the word where the flag is stored\\n\\tfunction position(\\n\\t\\tint24 tick\\n\\t) private pure returns (int16 wordPos, uint8 bitPos) {\\n\\t\\twordPos = int16(tick >> 8);\\n\\t\\tbitPos = uint8(tick % 256);\\n\\t}\\n\\n\\t/// @notice Flips the initialized state for a given tick from false to true, or vice versa\\n\\t/// @param self The mapping in which to flip the tick\\n\\t/// @param tick The tick to flip\\n\\t/// @param tickSpacing The spacing between usable ticks\\n\\tfunction flipTick(\\n\\t\\tmapping(int16 => uint256) storage self,\\n\\t\\tint24 tick,\\n\\t\\tint24 tickSpacing\\n\\t) internal {\\n\\t\\trequire(tick % tickSpacing == 0); // ensure that the tick is spaced\\n\\t\\t(int16 wordPos, uint8 bitPos) = position(tick / tickSpacing);\\n\\t\\tuint256 mask = 1 << bitPos;\\n\\t\\tself[wordPos] ^= mask;\\n\\t}\\n\\n\\t/// @notice Returns the next initialized tick contained in the same word (or adjacent word) as the tick that is either\\n\\t/// to the left (less than or equal to) or right (greater than) of the given tick\\n\\t/// @param self The mapping in which to compute the next initialized tick\\n\\t/// @param tick The starting tick\\n\\t/// @param tickSpacing The spacing between usable ticks\\n\\t/// @param lte Whether to search for the next initialized tick to the left (less than or equal to the starting tick)\\n\\t/// @return next The next initialized or uninitialized tick up to 256 ticks away from the current tick\\n\\t/// @return initialized Whether the next tick is initialized, as the function only searches within up to 256 ticks\\n\\tfunction nextInitializedTickWithinOneWord(\\n\\t\\tmapping(int16 => uint256) storage self,\\n\\t\\tint24 tick,\\n\\t\\tint24 tickSpacing,\\n\\t\\tbool lte\\n\\t) internal view returns (int24 next, bool initialized) {\\n\\t\\tint24 compressed = tick / tickSpacing;\\n\\t\\tif (tick < 0 && tick % tickSpacing != 0) compressed--; // round towards negative infinity\\n\\n\\t\\tif (lte) {\\n\\t\\t\\t(int16 wordPos, uint8 bitPos) = position(compressed);\\n\\t\\t\\t// all the 1s at or to the right of the current bitPos\\n\\t\\t\\tuint256 mask = (1 << bitPos) - 1 + (1 << bitPos);\\n\\t\\t\\tuint256 masked = self[wordPos] & mask;\\n\\n\\t\\t\\t// if there are no initialized ticks to the right of or at the current tick, return rightmost in the word\\n\\t\\t\\tinitialized = masked != 0;\\n\\t\\t\\t// overflow/underflow is possible, but prevented externally by limiting both tickSpacing and tick\\n\\t\\t\\tnext = initialized\\n\\t\\t\\t\\t? (compressed -\\n\\t\\t\\t\\t\\tint24(bitPos - BitMath.mostSignificantBit(masked))) *\\n\\t\\t\\t\\t\\ttickSpacing\\n\\t\\t\\t\\t: (compressed - int24(bitPos)) * tickSpacing;\\n\\t\\t} else {\\n\\t\\t\\t// start from the word of the next tick, since the current tick state doesn't matter\\n\\t\\t\\t(int16 wordPos, uint8 bitPos) = position(compressed + 1);\\n\\t\\t\\t// all the 1s at or to the left of the bitPos\\n\\t\\t\\tuint256 mask = ~((1 << bitPos) - 1);\\n\\t\\t\\tuint256 masked = self[wordPos] & mask;\\n\\n\\t\\t\\t// if there are no initialized ticks to the left of the current tick, return leftmost in the word\\n\\t\\t\\tinitialized = masked != 0;\\n\\t\\t\\t// overflow/underflow is possible, but prevented externally by limiting both tickSpacing and tick\\n\\t\\t\\tnext = initialized\\n\\t\\t\\t\\t? (compressed +\\n\\t\\t\\t\\t\\t1 +\\n\\t\\t\\t\\t\\tint24(BitMath.leastSignificantBit(masked) - bitPos)) *\\n\\t\\t\\t\\t\\ttickSpacing\\n\\t\\t\\t\\t: (compressed + 1 + int24(uint8(-1) - bitPos)) * tickSpacing;\\n\\t\\t}\\n\\t}\\n}\\n\",\"keccak256\":\"0xfebb3dabce55440e47183e83be1e0708e3201a2913cf1a11c62b4cf2fea8bed1\"},\"contracts/libraries/TickMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0 <0.8.0;\\n\\n/// @title Math library for computing sqrt prices from ticks and vice versa\\n/// @notice Computes sqrt price for ticks of size 1.0001, i.e. sqrt(1.0001^tick) as fixed point Q64.96 numbers. Supports\\n/// prices between 2**-128 and 2**128\\nlibrary TickMath {\\n\\t/// @dev The minimum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**-128\\n\\tint24 internal constant MIN_TICK = -887272;\\n\\t/// @dev The maximum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**128\\n\\tint24 internal constant MAX_TICK = -MIN_TICK;\\n\\n\\t/// @dev The minimum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MIN_TICK)\\n\\tuint160 internal constant MIN_SQRT_RATIO = 4295128739;\\n\\t/// @dev The maximum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MAX_TICK)\\n\\tuint160 internal constant MAX_SQRT_RATIO =\\n\\t\\t1461446703485210103287273052203988822378723970342;\\n\\n\\t/// @notice Calculates sqrt(1.0001^tick) * 2^96\\n\\t/// @dev Throws if |tick| > max tick\\n\\t/// @param tick The input tick for the above formula\\n\\t/// @return sqrtPriceX96 A Fixed point Q64.96 number representing the sqrt of the ratio of the two assets (token1/token0)\\n\\t/// at the given tick\\n\\tfunction getSqrtRatioAtTick(\\n\\t\\tint24 tick\\n\\t) internal pure returns (uint160 sqrtPriceX96) {\\n\\t\\tuint256 absTick = tick < 0\\n\\t\\t\\t? uint256(-int256(tick))\\n\\t\\t\\t: uint256(int256(tick));\\n\\t\\trequire(absTick <= uint256(MAX_TICK), \\\"T\\\");\\n\\n\\t\\tuint256 ratio = absTick & 0x1 != 0\\n\\t\\t\\t? 0xfffcb933bd6fad37aa2d162d1a594001\\n\\t\\t\\t: 0x100000000000000000000000000000000;\\n\\t\\tif (absTick & 0x2 != 0)\\n\\t\\t\\tratio = (ratio * 0xfff97272373d413259a46990580e213a) >> 128;\\n\\t\\tif (absTick & 0x4 != 0)\\n\\t\\t\\tratio = (ratio * 0xfff2e50f5f656932ef12357cf3c7fdcc) >> 128;\\n\\t\\tif (absTick & 0x8 != 0)\\n\\t\\t\\tratio = (ratio * 0xffe5caca7e10e4e61c3624eaa0941cd0) >> 128;\\n\\t\\tif (absTick & 0x10 != 0)\\n\\t\\t\\tratio = (ratio * 0xffcb9843d60f6159c9db58835c926644) >> 128;\\n\\t\\tif (absTick & 0x20 != 0)\\n\\t\\t\\tratio = (ratio * 0xff973b41fa98c081472e6896dfb254c0) >> 128;\\n\\t\\tif (absTick & 0x40 != 0)\\n\\t\\t\\tratio = (ratio * 0xff2ea16466c96a3843ec78b326b52861) >> 128;\\n\\t\\tif (absTick & 0x80 != 0)\\n\\t\\t\\tratio = (ratio * 0xfe5dee046a99a2a811c461f1969c3053) >> 128;\\n\\t\\tif (absTick & 0x100 != 0)\\n\\t\\t\\tratio = (ratio * 0xfcbe86c7900a88aedcffc83b479aa3a4) >> 128;\\n\\t\\tif (absTick & 0x200 != 0)\\n\\t\\t\\tratio = (ratio * 0xf987a7253ac413176f2b074cf7815e54) >> 128;\\n\\t\\tif (absTick & 0x400 != 0)\\n\\t\\t\\tratio = (ratio * 0xf3392b0822b70005940c7a398e4b70f3) >> 128;\\n\\t\\tif (absTick & 0x800 != 0)\\n\\t\\t\\tratio = (ratio * 0xe7159475a2c29b7443b29c7fa6e889d9) >> 128;\\n\\t\\tif (absTick & 0x1000 != 0)\\n\\t\\t\\tratio = (ratio * 0xd097f3bdfd2022b8845ad8f792aa5825) >> 128;\\n\\t\\tif (absTick & 0x2000 != 0)\\n\\t\\t\\tratio = (ratio * 0xa9f746462d870fdf8a65dc1f90e061e5) >> 128;\\n\\t\\tif (absTick & 0x4000 != 0)\\n\\t\\t\\tratio = (ratio * 0x70d869a156d2a1b890bb3df62baf32f7) >> 128;\\n\\t\\tif (absTick & 0x8000 != 0)\\n\\t\\t\\tratio = (ratio * 0x31be135f97d08fd981231505542fcfa6) >> 128;\\n\\t\\tif (absTick & 0x10000 != 0)\\n\\t\\t\\tratio = (ratio * 0x9aa508b5b7a84e1c677de54f3e99bc9) >> 128;\\n\\t\\tif (absTick & 0x20000 != 0)\\n\\t\\t\\tratio = (ratio * 0x5d6af8dedb81196699c329225ee604) >> 128;\\n\\t\\tif (absTick & 0x40000 != 0)\\n\\t\\t\\tratio = (ratio * 0x2216e584f5fa1ea926041bedfe98) >> 128;\\n\\t\\tif (absTick & 0x80000 != 0)\\n\\t\\t\\tratio = (ratio * 0x48a170391f7dc42444e8fa2) >> 128;\\n\\n\\t\\tif (tick > 0) ratio = uint256(-1) / ratio;\\n\\n\\t\\t// this divides by 1<<32 rounding up to go from a Q128.128 to a Q128.96.\\n\\t\\t// we then downcast because we know the result always fits within 160 bits due to our tick input constraint\\n\\t\\t// we round up in the division so getTickAtSqrtRatio of the output price is always consistent\\n\\t\\tsqrtPriceX96 = uint160(\\n\\t\\t\\t(ratio >> 32) + (ratio % (1 << 32) == 0 ? 0 : 1)\\n\\t\\t);\\n\\t}\\n\\n\\t/// @notice Calculates the greatest tick value such that getRatioAtTick(tick) <= ratio\\n\\t/// @dev Throws in case sqrtPriceX96 < MIN_SQRT_RATIO, as MIN_SQRT_RATIO is the lowest value getRatioAtTick may\\n\\t/// ever return.\\n\\t/// @param sqrtPriceX96 The sqrt ratio for which to compute the tick as a Q64.96\\n\\t/// @return tick The greatest tick for which the ratio is less than or equal to the input ratio\\n\\tfunction getTickAtSqrtRatio(\\n\\t\\tuint160 sqrtPriceX96\\n\\t) internal pure returns (int24 tick) {\\n\\t\\t// second inequality must be < because the price can never reach the price at the max tick\\n\\t\\trequire(\\n\\t\\t\\tsqrtPriceX96 >= MIN_SQRT_RATIO && sqrtPriceX96 < MAX_SQRT_RATIO,\\n\\t\\t\\t\\\"R\\\"\\n\\t\\t);\\n\\t\\tuint256 ratio = uint256(sqrtPriceX96) << 32;\\n\\n\\t\\tuint256 r = ratio;\\n\\t\\tuint256 msb = 0;\\n\\n\\t\\tassembly {\\n\\t\\t\\tlet f := shl(7, gt(r, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF))\\n\\t\\t\\tmsb := or(msb, f)\\n\\t\\t\\tr := shr(f, r)\\n\\t\\t}\\n\\t\\tassembly {\\n\\t\\t\\tlet f := shl(6, gt(r, 0xFFFFFFFFFFFFFFFF))\\n\\t\\t\\tmsb := or(msb, f)\\n\\t\\t\\tr := shr(f, r)\\n\\t\\t}\\n\\t\\tassembly {\\n\\t\\t\\tlet f := shl(5, gt(r, 0xFFFFFFFF))\\n\\t\\t\\tmsb := or(msb, f)\\n\\t\\t\\tr := shr(f, r)\\n\\t\\t}\\n\\t\\tassembly {\\n\\t\\t\\tlet f := shl(4, gt(r, 0xFFFF))\\n\\t\\t\\tmsb := or(msb, f)\\n\\t\\t\\tr := shr(f, r)\\n\\t\\t}\\n\\t\\tassembly {\\n\\t\\t\\tlet f := shl(3, gt(r, 0xFF))\\n\\t\\t\\tmsb := or(msb, f)\\n\\t\\t\\tr := shr(f, r)\\n\\t\\t}\\n\\t\\tassembly {\\n\\t\\t\\tlet f := shl(2, gt(r, 0xF))\\n\\t\\t\\tmsb := or(msb, f)\\n\\t\\t\\tr := shr(f, r)\\n\\t\\t}\\n\\t\\tassembly {\\n\\t\\t\\tlet f := shl(1, gt(r, 0x3))\\n\\t\\t\\tmsb := or(msb, f)\\n\\t\\t\\tr := shr(f, r)\\n\\t\\t}\\n\\t\\tassembly {\\n\\t\\t\\tlet f := gt(r, 0x1)\\n\\t\\t\\tmsb := or(msb, f)\\n\\t\\t}\\n\\n\\t\\tif (msb >= 128) r = ratio >> (msb - 127);\\n\\t\\telse r = ratio << (127 - msb);\\n\\n\\t\\tint256 log_2 = (int256(msb) - 128) << 64;\\n\\n\\t\\tassembly {\\n\\t\\t\\tr := shr(127, mul(r, r))\\n\\t\\t\\tlet f := shr(128, r)\\n\\t\\t\\tlog_2 := or(log_2, shl(63, f))\\n\\t\\t\\tr := shr(f, r)\\n\\t\\t}\\n\\t\\tassembly {\\n\\t\\t\\tr := shr(127, mul(r, r))\\n\\t\\t\\tlet f := shr(128, r)\\n\\t\\t\\tlog_2 := or(log_2, shl(62, f))\\n\\t\\t\\tr := shr(f, r)\\n\\t\\t}\\n\\t\\tassembly {\\n\\t\\t\\tr := shr(127, mul(r, r))\\n\\t\\t\\tlet f := shr(128, r)\\n\\t\\t\\tlog_2 := or(log_2, shl(61, f))\\n\\t\\t\\tr := shr(f, r)\\n\\t\\t}\\n\\t\\tassembly {\\n\\t\\t\\tr := shr(127, mul(r, r))\\n\\t\\t\\tlet f := shr(128, r)\\n\\t\\t\\tlog_2 := or(log_2, shl(60, f))\\n\\t\\t\\tr := shr(f, r)\\n\\t\\t}\\n\\t\\tassembly {\\n\\t\\t\\tr := shr(127, mul(r, r))\\n\\t\\t\\tlet f := shr(128, r)\\n\\t\\t\\tlog_2 := or(log_2, shl(59, f))\\n\\t\\t\\tr := shr(f, r)\\n\\t\\t}\\n\\t\\tassembly {\\n\\t\\t\\tr := shr(127, mul(r, r))\\n\\t\\t\\tlet f := shr(128, r)\\n\\t\\t\\tlog_2 := or(log_2, shl(58, f))\\n\\t\\t\\tr := shr(f, r)\\n\\t\\t}\\n\\t\\tassembly {\\n\\t\\t\\tr := shr(127, mul(r, r))\\n\\t\\t\\tlet f := shr(128, r)\\n\\t\\t\\tlog_2 := or(log_2, shl(57, f))\\n\\t\\t\\tr := shr(f, r)\\n\\t\\t}\\n\\t\\tassembly {\\n\\t\\t\\tr := shr(127, mul(r, r))\\n\\t\\t\\tlet f := shr(128, r)\\n\\t\\t\\tlog_2 := or(log_2, shl(56, f))\\n\\t\\t\\tr := shr(f, r)\\n\\t\\t}\\n\\t\\tassembly {\\n\\t\\t\\tr := shr(127, mul(r, r))\\n\\t\\t\\tlet f := shr(128, r)\\n\\t\\t\\tlog_2 := or(log_2, shl(55, f))\\n\\t\\t\\tr := shr(f, r)\\n\\t\\t}\\n\\t\\tassembly {\\n\\t\\t\\tr := shr(127, mul(r, r))\\n\\t\\t\\tlet f := shr(128, r)\\n\\t\\t\\tlog_2 := or(log_2, shl(54, f))\\n\\t\\t\\tr := shr(f, r)\\n\\t\\t}\\n\\t\\tassembly {\\n\\t\\t\\tr := shr(127, mul(r, r))\\n\\t\\t\\tlet f := shr(128, r)\\n\\t\\t\\tlog_2 := or(log_2, shl(53, f))\\n\\t\\t\\tr := shr(f, r)\\n\\t\\t}\\n\\t\\tassembly {\\n\\t\\t\\tr := shr(127, mul(r, r))\\n\\t\\t\\tlet f := shr(128, r)\\n\\t\\t\\tlog_2 := or(log_2, shl(52, f))\\n\\t\\t\\tr := shr(f, r)\\n\\t\\t}\\n\\t\\tassembly {\\n\\t\\t\\tr := shr(127, mul(r, r))\\n\\t\\t\\tlet f := shr(128, r)\\n\\t\\t\\tlog_2 := or(log_2, shl(51, f))\\n\\t\\t\\tr := shr(f, r)\\n\\t\\t}\\n\\t\\tassembly {\\n\\t\\t\\tr := shr(127, mul(r, r))\\n\\t\\t\\tlet f := shr(128, r)\\n\\t\\t\\tlog_2 := or(log_2, shl(50, f))\\n\\t\\t}\\n\\n\\t\\tint256 log_sqrt10001 = log_2 * 255738958999603826347141; // 128.128 number\\n\\n\\t\\tint24 tickLow = int24(\\n\\t\\t\\t(log_sqrt10001 - 3402992956809132418596140100660247210) >> 128\\n\\t\\t);\\n\\t\\tint24 tickHi = int24(\\n\\t\\t\\t(log_sqrt10001 + 291339464771989622907027621153398088495) >> 128\\n\\t\\t);\\n\\n\\t\\ttick = tickLow == tickHi\\n\\t\\t\\t? tickLow\\n\\t\\t\\t: getSqrtRatioAtTick(tickHi) <= sqrtPriceX96\\n\\t\\t\\t\\t? tickHi\\n\\t\\t\\t\\t: tickLow;\\n\\t}\\n}\\n\",\"keccak256\":\"0x3492474e95877f999786d7015787a2e2c5a11b0e13c3f297d4312deb17c1f3aa\"},\"contracts/libraries/UQ112x112.sol\":{\"content\":\"pragma solidity =0.6.6;\\n\\n// a library for handling binary fixed point numbers (https://en.wikipedia.org/wiki/Q_(number_format))\\n\\n// range: [0, 2**112 - 1]\\n// resolution: 1 / 2**112\\n\\nlibrary UQ112x112 {\\n    uint224 constant Q112 = 2**112;\\n\\n    // encode a uint112 as a UQ112x112\\n    function encode(uint112 y) internal pure returns (uint224 z) {\\n        z = uint224(y) * Q112; // never overflows\\n    }\\n\\n    // divide a UQ112x112 by a uint112, returning a UQ112x112\\n    function uqdiv(uint224 x, uint112 y) internal pure returns (uint224 z) {\\n        z = x / uint224(y);\\n    }\\n}\\n\",\"keccak256\":\"0x809974595b8669bcd83cd75b4a62bcfbef10bb2285b08c8e3da2dee4cc496012\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50604051612c40380380612c408339818101604052602081101561003357600080fd5b5051600180546001600160a01b0319166001600160a01b03909216919091179055612bdd806100636000396000f3fe608060405234801561001057600080fd5b50600436106100935760003560e01c8063574f2ba311610066578063574f2ba3146100fb578063a2e74af614610103578063c9c653961461012b578063e6a4390514610159578063f46901ed1461018757610093565b8063017e7e5814610098578063094b7415146100bc5780631e3dd18b146100c4578063257671f5146100e1575b600080fd5b6100a06101ad565b604080516001600160a01b039092168252519081900360200190f35b6100a06101bc565b6100a0600480360360208110156100da57600080fd5b50356101cb565b6100e96101f2565b60408051918252519081900360200190f35b6100e9610285565b6101296004803603602081101561011957600080fd5b50356001600160a01b031661028b565b005b6100a06004803603604081101561014157600080fd5b506001600160a01b0381358116916020013516610300565b6100a06004803603604081101561016f57600080fd5b506001600160a01b0381358116916020013516610625565b6101296004803603602081101561019d57600080fd5b50356001600160a01b031661064b565b6000546001600160a01b031681565b6001546001600160a01b031681565b600381815481106101d857fe5b6000918252602090912001546001600160a01b0316905081565b604051610201602082016106c0565b6020820181038252601f19601f820116604052506040516020018082805190602001908083835b602083106102475780518252601f199092019160209182019101610228565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040516020818303038152906040528051906020012081565b60035490565b6001546001600160a01b031633146102de576040805162461bcd60e51b8152602060048201526011602482015270213aba3a32b91d102327a92124a22222a760791b604482015290519081900360640190fd5b600180546001600160a01b0319166001600160a01b0392909216919091179055565b6000816001600160a01b0316836001600160a01b03161415610369576040805162461bcd60e51b815260206004820152601b60248201527f4275747465723a204944454e544943414c5f4144445245535345530000000000604482015290519081900360640190fd5b600080836001600160a01b0316856001600160a01b03161061038c57838561038f565b84845b90925090506001600160a01b0382166103e6576040805162461bcd60e51b81526020600482015260146024820152734275747465723a205a45524f5f4144445245535360601b604482015290519081900360640190fd5b6001600160a01b03828116600090815260026020908152604080832085851684529091529020541615610456576040805162461bcd60e51b81526020600482015260136024820152724275747465723a20504149525f45584953545360681b604482015290519081900360640190fd5b606060405180602001610468906106c0565b6020820181038252601f19601f8201166040525090506000838360405160200180836001600160a01b03166001600160a01b031660601b8152601401826001600160a01b03166001600160a01b031660601b815260140192505050604051602081830303815290604052805190602001209050808251602084016000f56040805163485cc95560e01b81526001600160a01b038781166004830152868116602483015291519297509087169163485cc9559160448082019260009290919082900301818387803b15801561053b57600080fd5b505af115801561054f573d6000803e3d6000fd5b505050506001600160a01b0384811660008181526002602081815260408084208987168086529083528185208054978d166001600160a01b031998891681179091559383528185208686528352818520805488168517905560038054600181018255958190527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b90950180549097168417909655925483519283529082015281517f0d3648bd0f6ba80134a33ba9275ac585d9d315f0ad8355cddefde31afa28d0e9929181900390910190a35050505092915050565b60026020908152600092835260408084209091529082529020546001600160a01b031681565b6001546001600160a01b0316331461069e576040805162461bcd60e51b8152602060048201526011602482015270213aba3a32b91d102327a92124a22222a760791b604482015290519081900360640190fd5b600080546001600160a01b0319166001600160a01b0392909216919091179055565b6124da806106ce8339019056fe60a0604052600560e91b608052600160125534801561001d57600080fd5b5060405146908060526124888239604080519182900360520182208282018252600a8352692ab734b9bbb0b8102b1960b11b6020938401528151808301835260018152603160f81b908401528151808401919091527fbfcc8ef98ffbf7b6c3fec7bf5185b566b9863e35a9d83acd49ad6824b5969738818301527fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc6606082015260808101949094523060a0808601919091528151808603909101815260c09094019052825192019190912060035550600580546001600160a01b0319163317905560805160e81c61236d61011b60003980611721525061236d6000f3fe608060405234801561001057600080fd5b50600436106101fb5760003560e01c80635a3d54931161011a578063ba9a7a56116100ad578063d21220a71161007c578063d21220a714610621578063d505accf14610629578063dd62ed3e1461067a578063f30dba93146106a8578063fff6cae91461071f576101fb565b8063ba9a7a56146105ca578063bc25cf77146105d2578063c45a0155146105f8578063d0c93a7c14610600576101fb565b80637ecebe00116100e95780637ecebe001461053157806389afcb441461055757806395d89b4114610596578063a9059cbb1461059e576101fb565b80635a3d5493146104d55780636a627842146104dd57806370a08231146105035780637464fc3d14610529576101fb565b806323b872dd116101925780633850c7bd116101615780633850c7bd14610445578063485cc9551461047f5780635339c296146104ad5780635909c0d5146104cd576101fb565b806323b872dd146103e157806330adf81f14610417578063313ce5671461041f5780633644e5151461043d576101fb565b80630dfe1681116101ce5780630dfe16811461039357806313bee7e8146103b757806318160ddd146103bf5780631bd15cae146103d9576101fb565b8063022c0d9f1461020057806306fdde031461028e5780630902f1ac1461030b578063095ea7b314610353575b600080fd5b61028c6004803603608081101561021657600080fd5b8135916020810135916001600160a01b03604083013516919081019060808101606082013564010000000081111561024d57600080fd5b82018360208201111561025f57600080fd5b8035906020019184600183028401116401000000008311171561028157600080fd5b509092509050610727565b005b610296610cc0565b6040805160208082528351818301528351919283929083019185019080838360005b838110156102d05781810151838201526020016102b8565b50505050905090810190601f1680156102fd5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b610313610ce6565b604080516001600160701b0396871681529486166020860152928516848401529316606083015263ffffffff909216608082015290519081900360a00190f35b61037f6004803603604081101561036957600080fd5b506001600160a01b038135169060200135610d1f565b604080519115158252519081900360200190f35b61039b610d36565b604080516001600160a01b039092168252519081900360200190f35b61039b610d45565b6103c7610d54565b60408051918252519081900360200190f35b61039b610d5a565b61037f600480360360608110156103f757600080fd5b506001600160a01b03813581169160208101359091169060400135610d69565b6103c7610e03565b610427610e27565b6040805160ff9092168252519081900360200190f35b6103c7610e2c565b61044d610e32565b604080516001600160a01b039094168452600292830b830b602085015290820b90910b82820152519081900360600190f35b61028c6004803603604081101561049557600080fd5b506001600160a01b0381358116916020013516610e59565b6103c7600480360360208110156104c357600080fd5b503560010b610eda565b6103c7610eec565b6103c7610ef2565b6103c7600480360360208110156104f357600080fd5b50356001600160a01b0316610ef8565b6103c76004803603602081101561051957600080fd5b50356001600160a01b03166111cd565b6103c76111df565b6103c76004803603602081101561054757600080fd5b50356001600160a01b03166111e5565b61057d6004803603602081101561056d57600080fd5b50356001600160a01b03166111f7565b6040805192835260208301919091528051918290030190f35b610296611573565b61037f600480360360408110156105b457600080fd5b506001600160a01b038135169060200135611595565b6103c76115a2565b61028c600480360360208110156105e857600080fd5b50356001600160a01b03166115a8565b61039b611710565b61060861171f565b60408051600292830b90920b8252519081900360200190f35b61039b611743565b61028c600480360360e081101561063f57600080fd5b506001600160a01b03813581169160208101359091169060408101359060608101359060ff6080820135169060a08101359060c00135611752565b6103c76004803603604081101561069057600080fd5b506001600160a01b0381358116916020013516611951565b6106c8600480360360208110156106be57600080fd5b503560020b61196e565b604080516001600160801b039097168752600f95860b90950b6020870152600693840b90930b858501526001600160a01b03909116606085015263ffffffff166080840152151560a0830152519081900360c00190f35b61028c6119d0565b60125460011461076f576040805162461bcd60e51b815260206004820152600e60248201526d109d5d1d195c8e881313d0d2d15160921b604482015290519081900360640190fd5b6000601255841515806107825750600084115b6107bd5760405162461bcd60e51b81526004018080602001828103825260228152602001806122d06022913960400191505060405180910390fd5b6000851180156107cd5750600084115b1561081f576040805162461bcd60e51b815260206004820152601d60248201527f4275747465723a20494e56414c49445f4f55545055545f414d4f554e54000000604482015290519081900360640190fd5b610827611b3e565b600080600080610835610ce6565b50600654600754949850929650909450925060009182916001600160a01b03908116918116908b16821480159061087e5750806001600160a01b03168b6001600160a01b031614155b6108c4576040805162461bcd60e51b81526020600482015260126024820152714275747465723a20494e56414c49445f544f60701b604482015290519081900360640190fd5b604080516370a0823160e01b815230600482015290516001600160a01b038416916370a08231916024808301926020929190829003018186803b15801561090a57600080fd5b505afa15801561091e573d6000803e3d6000fd5b505050506040513d602081101561093457600080fd5b5051604080516370a0823160e01b815230600482015290519195506001600160a01b038316916370a0823191602480820192602092909190829003018186803b15801561098057600080fd5b505afa158015610994573d6000803e3d6000fd5b505050506040513d60208110156109aa57600080fd5b5051925060009150506001600160701b038786011683116109cc5760006109db565b8487016001600160701b031683035b905060008487016001600160701b031683116109f8576000610a07565b8487016001600160701b031683035b90506001600160701b038211801590610a2757506001600160701b038111155b610a6b576040805162461bcd60e51b815260206004820152601060248201526f4275747465723a204f564552464c4f5760801b604482015290519081900360640190fd5b948101949384019381151580610a815750600081115b610abc5760405162461bcd60e51b81526004018080602001828103825260218152602001806122f26021913960400191505060405180910390fd5b600082118015610acc5750600081115b15610b1e576040805162461bcd60e51b815260206004820152601c60248201527f4275747465723a20494e56414c49445f494e5055545f414d4f554e5400000000604482015290519081900360640190fd5b8115610bba57600860009054906101000a90046001600160a01b03166001600160a01b031663156e29f68c8e856040518463ffffffff1660e01b815260040180846001600160a01b03166001600160a01b031681526020018381526020018281526020019350505050600060405180830381600087803b158015610ba157600080fd5b505af1158015610bb5573d6000803e3d6000fd5b505050505b8015610c5657600960009054906101000a90046001600160a01b03166001600160a01b031663156e29f68c8f846040518463ffffffff1660e01b815260040180846001600160a01b03166001600160a01b031681526020018381526020018281526020019350505050600060405180830381600087803b158015610c3d57600080fd5b505af1158015610c51573d6000803e3d6000fd5b505050505b610c6484848a8a8a8a611b40565b604080518381526020810183905281516001600160a01b038e169233927ff23f60e23299b2400e85cb44a55b4a9d9fb4dddc55266b0dc7109763cb57aef6929081900390910190a3505060016012555050505050505050505050565b6040518060400160405280600a8152602001692ab734b9bbb0b8102b1960b11b81525081565b600a54600b546001600160701b0380831693600160701b938490048216938284169390810490921691600160e01b900463ffffffff1690565b6000610d2c338484611d1d565b5060015b92915050565b6006546001600160a01b031681565b6009546001600160a01b031681565b60005481565b6008546001600160a01b031681565b6001600160a01b038316600090815260026020908152604080832033845290915281205460001914610dee576001600160a01b0384166000908152600260209081526040808320338452909152902054610dc9908363ffffffff611d7f16565b6001600160a01b03851660009081526002602090815260408083203384529091529020555b610df9848484611dcf565b5060019392505050565b7f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c981565b601281565b60035481565b600f546001600160a01b03811690600160a01b8104600290810b91600160b81b9004900b83565b6005546001600160a01b03163314610eac576040805162461bcd60e51b8152602060048201526011602482015270213aba3a32b91d102327a92124a22222a760791b604482015290519081900360640190fd5b600680546001600160a01b039384166001600160a01b03199182161790915560078054929093169116179055565b60116020526000908152604090205481565b600c5481565b600d5481565b6000601254600114610f42576040805162461bcd60e51b815260206004820152600e60248201526d109d5d1d195c8e881313d0d2d15160921b604482015290519081900360640190fd5b60006012819055808080610f54610ce6565b50600654604080516370a0823160e01b8152306004820152905195995093975091955093506000926001600160a01b03909116916370a08231916024808301926020929190829003018186803b158015610fad57600080fd5b505afa158015610fc1573d6000803e3d6000fd5b505050506040513d6020811015610fd757600080fd5b5051600754604080516370a0823160e01b815230600482015290519293506000926001600160a01b03909216916370a0823191602480820192602092909190829003018186803b15801561102a57600080fd5b505afa15801561103e573d6000803e3d6000fd5b505050506040513d602081101561105457600080fd5b505190506000611073836001600160701b03891663ffffffff611d7f16565b90506000611090836001600160701b03891663ffffffff611d7f16565b600054909150806110d9576110c56103e86110b96110b4868663ffffffff611e8916565b611eec565b9063ffffffff611d7f16565b99506110d460006103e8611f3e565b611128565b6111256001600160701b038a166110f6858463ffffffff611e8916565b816110fd57fe5b046001600160701b038a16611118858563ffffffff611e8916565b8161111f57fe5b04611fd4565b99505b60008a116111675760405162461bcd60e51b81526004018080602001828103825260258152602001806122ab6025913960400191505060405180910390fd5b6111718b8b611f3e565b61117f85858b8b8b8b611b40565b6040805184815260208101849052815133927f4c209b5fc8ad50758f13e2e1088ba56a560dff690a1c6fef26394f4c03821c4f928290030190a2505060016012555095979650505050505050565b60016020526000908152604090205481565b600e5481565b60046020526000908152604090205481565b600080601254600114611242576040805162461bcd60e51b815260206004820152600e60248201526d109d5d1d195c8e881313d0d2d15160921b604482015290519081900360640190fd5b60006012819055808080611254610ce6565b50600654600754604080516370a0823160e01b81523060048201529051969a509498509296509094506001600160a01b039081169391169160009184916370a08231916024808301926020929190829003018186803b1580156112b657600080fd5b505afa1580156112ca573d6000803e3d6000fd5b505050506040513d60208110156112e057600080fd5b5051604080516370a0823160e01b815230600482015290519192506000916001600160a01b038516916370a08231916024808301926020929190829003018186803b15801561132e57600080fd5b505afa158015611342573d6000803e3d6000fd5b505050506040513d602081101561135857600080fd5b50513060009081526001602052604081205490549192509080611381838663ffffffff611e8916565b8161138857fe5b049b508061139c838563ffffffff611e8916565b816113a357fe5b049a5060008c1180156113b6575060008b115b6113f15760405162461bcd60e51b81526004018080602001828103825260258152602001806123136025913960400191505060405180910390fd5b6113fb3083611fec565b611406868e8e61208a565b611411858e8d61208a565b604080516370a0823160e01b815230600482015290516001600160a01b038816916370a08231916024808301926020929190829003018186803b15801561145757600080fd5b505afa15801561146b573d6000803e3d6000fd5b505050506040513d602081101561148157600080fd5b5051604080516370a0823160e01b815230600482015290519195506001600160a01b038716916370a0823191602480820192602092909190829003018186803b1580156114cd57600080fd5b505afa1580156114e1573d6000803e3d6000fd5b505050506040513d60208110156114f757600080fd5b5051925061150984848c8c8c8c611b40565b8c6001600160a01b0316336001600160a01b03167fdccd412f0b1252819cb1fd330b93224ca42612892bb3f4f789976e6d819364968e8e604051808381526020018281526020019250505060405180910390a3505050505050505050506001601281905550915091565b604051806040016040528060068152602001652aa72496ab1960d11b81525081565b6000610d2c338484611dcf565b6103e881565b6012546001146115f0576040805162461bcd60e51b815260206004820152600e60248201526d109d5d1d195c8e881313d0d2d15160921b604482015290519081900360640190fd5b6000601255600654600754600a54604080516370a0823160e01b815230600482015290516001600160a01b03948516949093169261169f928592879261169a926001600160701b03169185916370a0823191602480820192602092909190829003018186803b15801561166257600080fd5b505afa158015611676573d6000803e3d6000fd5b505050506040513d602081101561168c57600080fd5b50519063ffffffff611d7f16565b61208a565b600a54604080516370a0823160e01b81523060048201529051611706928492879261169a92600160701b90046001600160701b0316916001600160a01b038616916370a0823191602480820192602092909190829003018186803b15801561166257600080fd5b5050600160125550565b6005546001600160a01b031681565b7f000000000000000000000000000000000000000000000000000000000000000081565b6007546001600160a01b031681565b42841015611799576040805162461bcd60e51b815260206004820152600f60248201526e109d5d1d195c8e8811561412549151608a1b604482015290519081900360640190fd5b6003546001600160a01b0380891660008181526004602090815260408083208054600180820190925582517f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c98186015280840196909652958d166060860152608085018c905260a085019590955260c08085018b90528151808603909101815260e08501825280519083012061190160f01b6101008601526101028501969096526101228085019690965280518085039096018652610142840180825286519683019690962095839052610162840180825286905260ff89166101828501526101a284018890526101c28401879052519193926101e280820193601f1981019281900390910190855afa1580156118b4573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116158015906118ea5750886001600160a01b0316816001600160a01b0316145b61193b576040805162461bcd60e51b815260206004820152601960248201527f4275747465723a20494e56414c49445f5349474e415455524500000000000000604482015290519081900360640190fd5b611946898989611d1d565b505050505050505050565b600260209081526000928352604080842090915290825290205481565b601060205260009081526040902080546001909101546001600160801b03821691600160801b9004600f0b90600681900b9067010000000000000081046001600160a01b031690600160d81b810463ffffffff1690600160f81b900460ff1686565b601254600114611a18576040805162461bcd60e51b815260206004820152600e60248201526d109d5d1d195c8e881313d0d2d15160921b604482015290519081900360640190fd5b6000601255600654604080516370a0823160e01b81523060048201529051611b37926001600160a01b0316916370a08231916024808301926020929190829003018186803b158015611a6957600080fd5b505afa158015611a7d573d6000803e3d6000fd5b505050506040513d6020811015611a9357600080fd5b5051600754604080516370a0823160e01b815230600482015290516001600160a01b03909216916370a0823191602480820192602092909190829003018186803b158015611ae057600080fd5b505afa158015611af4573d6000803e3d6000fd5b505050506040513d6020811015611b0a57600080fd5b5051600a54600b546001600160701b0380831692600160701b908190048216928083169291900416611b40565b6001601255565b565b6001600160701b038611801590611b5e57506001600160701b038511155b611ba2576040805162461bcd60e51b815260206004820152601060248201526f4275747465723a204f564552464c4f5760801b604482015290519081900360640190fd5b600b5463ffffffff42811691600160e01b90048116820390811615801590611bd257506001600160701b03861615155b8015611be657506001600160701b03851615155b15611c57578063ffffffff16611c1487611bff88612224565b6001600160e01b03169063ffffffff61223616565b600c80546001600160e01b03929092169290920201905563ffffffff8116611c3f86611bff89612224565b600d80546001600160e01b0392909216929092020190555b600a80546dffffffffffffffffffffffffffff199081166001600160701b038b8116919091176dffffffffffffffffffffffffffff60701b19908116600160701b8c841681029190911794859055600b8054909416898416179091168783168202176001600160e01b0316600160e01b63ffffffff881602179092556040805184831681529290930416602082015281517f1c411e9a96e071241c2f21f7726b17ae89e3cab4c78be50e062b03a9fffbbad1929181900390910190a15050505050505050565b6001600160a01b03808416600081815260026020908152604080832094871680845294825291829020859055815185815291517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259281900390910190a3505050565b80820382811115610d30576040805162461bcd60e51b815260206004820152601560248201527464732d6d6174682d7375622d756e646572666c6f7760581b604482015290519081900360640190fd5b6001600160a01b038316600090815260016020526040902054611df8908263ffffffff611d7f16565b6001600160a01b038085166000908152600160205260408082209390935590841681522054611e2d908263ffffffff61225b16565b6001600160a01b0380841660008181526001602090815260409182902094909455805185815290519193928716927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a3505050565b6000811580611ea457505080820282828281611ea157fe5b04145b610d30576040805162461bcd60e51b815260206004820152601460248201527364732d6d6174682d6d756c2d6f766572666c6f7760601b604482015290519081900360640190fd5b60006003821115611f2f575080600160028204015b81811015611f2957809150600281828581611f1857fe5b040181611f2157fe5b049050611f01565b50611f39565b8115611f39575060015b919050565b600054611f51908263ffffffff61225b16565b60009081556001600160a01b038316815260016020526040902054611f7c908263ffffffff61225b16565b6001600160a01b03831660008181526001602090815260408083209490945583518581529351929391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a35050565b6000818310611fe35781611fe5565b825b9392505050565b6001600160a01b038216600090815260016020526040902054612015908263ffffffff611d7f16565b6001600160a01b03831660009081526001602052604081209190915554612042908263ffffffff611d7f16565b60009081556040805183815290516001600160a01b038516917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef919081900360200190a35050565b604080518082018252601981527f7472616e7366657228616464726573732c75696e74323536290000000000000060209182015281516001600160a01b0385811660248301526044808301869052845180840390910181526064909201845291810180516001600160e01b031663a9059cbb60e01b1781529251815160009460609489169392918291908083835b602083106121375780518252601f199092019160209182019101612118565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d8060008114612199576040519150601f19603f3d011682016040523d82523d6000602084013e61219e565b606091505b50915091508180156121cc5750805115806121cc57508080602001905160208110156121c957600080fd5b50515b61221d576040805162461bcd60e51b815260206004820152601760248201527f4275747465723a205452414e534645525f4641494c4544000000000000000000604482015290519081900360640190fd5b5050505050565b6001600160701b0316600160701b0290565b60006001600160701b0382166001600160e01b0384168161225357fe5b049392505050565b80820182811015610d30576040805162461bcd60e51b815260206004820152601460248201527364732d6d6174682d6164642d6f766572666c6f7760601b604482015290519081900360640190fdfe4275747465723a20494e53554646494349454e545f4c49515549444954595f4d494e5445444275747465723a20494e53554646494349454e545f4f55545055545f414d4f554e544275747465723a20494e53554646494349454e545f494e5055545f414d4f554e544275747465723a20494e53554646494349454e545f4c49515549444954595f4255524e4544a2646970667358221220ff6ad459a31678507153c70a143f46ebaaccf7cbfc91e674503500c88d23467664736f6c63430006060033454950373132446f6d61696e28737472696e67206e616d652c737472696e672076657273696f6e2c75696e7432353620636861696e49642c6164647265737320766572696679696e67436f6e747261637429a26469706673582212208f69fc7f009be33d6d714185f79b1dd83b92e65c10ca03f1f7e8d4761b693f4a64736f6c63430006060033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100935760003560e01c8063574f2ba311610066578063574f2ba3146100fb578063a2e74af614610103578063c9c653961461012b578063e6a4390514610159578063f46901ed1461018757610093565b8063017e7e5814610098578063094b7415146100bc5780631e3dd18b146100c4578063257671f5146100e1575b600080fd5b6100a06101ad565b604080516001600160a01b039092168252519081900360200190f35b6100a06101bc565b6100a0600480360360208110156100da57600080fd5b50356101cb565b6100e96101f2565b60408051918252519081900360200190f35b6100e9610285565b6101296004803603602081101561011957600080fd5b50356001600160a01b031661028b565b005b6100a06004803603604081101561014157600080fd5b506001600160a01b0381358116916020013516610300565b6100a06004803603604081101561016f57600080fd5b506001600160a01b0381358116916020013516610625565b6101296004803603602081101561019d57600080fd5b50356001600160a01b031661064b565b6000546001600160a01b031681565b6001546001600160a01b031681565b600381815481106101d857fe5b6000918252602090912001546001600160a01b0316905081565b604051610201602082016106c0565b6020820181038252601f19601f820116604052506040516020018082805190602001908083835b602083106102475780518252601f199092019160209182019101610228565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040516020818303038152906040528051906020012081565b60035490565b6001546001600160a01b031633146102de576040805162461bcd60e51b8152602060048201526011602482015270213aba3a32b91d102327a92124a22222a760791b604482015290519081900360640190fd5b600180546001600160a01b0319166001600160a01b0392909216919091179055565b6000816001600160a01b0316836001600160a01b03161415610369576040805162461bcd60e51b815260206004820152601b60248201527f4275747465723a204944454e544943414c5f4144445245535345530000000000604482015290519081900360640190fd5b600080836001600160a01b0316856001600160a01b03161061038c57838561038f565b84845b90925090506001600160a01b0382166103e6576040805162461bcd60e51b81526020600482015260146024820152734275747465723a205a45524f5f4144445245535360601b604482015290519081900360640190fd5b6001600160a01b03828116600090815260026020908152604080832085851684529091529020541615610456576040805162461bcd60e51b81526020600482015260136024820152724275747465723a20504149525f45584953545360681b604482015290519081900360640190fd5b606060405180602001610468906106c0565b6020820181038252601f19601f8201166040525090506000838360405160200180836001600160a01b03166001600160a01b031660601b8152601401826001600160a01b03166001600160a01b031660601b815260140192505050604051602081830303815290604052805190602001209050808251602084016000f56040805163485cc95560e01b81526001600160a01b038781166004830152868116602483015291519297509087169163485cc9559160448082019260009290919082900301818387803b15801561053b57600080fd5b505af115801561054f573d6000803e3d6000fd5b505050506001600160a01b0384811660008181526002602081815260408084208987168086529083528185208054978d166001600160a01b031998891681179091559383528185208686528352818520805488168517905560038054600181018255958190527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b90950180549097168417909655925483519283529082015281517f0d3648bd0f6ba80134a33ba9275ac585d9d315f0ad8355cddefde31afa28d0e9929181900390910190a35050505092915050565b60026020908152600092835260408084209091529082529020546001600160a01b031681565b6001546001600160a01b0316331461069e576040805162461bcd60e51b8152602060048201526011602482015270213aba3a32b91d102327a92124a22222a760791b604482015290519081900360640190fd5b600080546001600160a01b0319166001600160a01b0392909216919091179055565b6124da806106ce8339019056fe60a0604052600560e91b608052600160125534801561001d57600080fd5b5060405146908060526124888239604080519182900360520182208282018252600a8352692ab734b9bbb0b8102b1960b11b6020938401528151808301835260018152603160f81b908401528151808401919091527fbfcc8ef98ffbf7b6c3fec7bf5185b566b9863e35a9d83acd49ad6824b5969738818301527fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc6606082015260808101949094523060a0808601919091528151808603909101815260c09094019052825192019190912060035550600580546001600160a01b0319163317905560805160e81c61236d61011b60003980611721525061236d6000f3fe608060405234801561001057600080fd5b50600436106101fb5760003560e01c80635a3d54931161011a578063ba9a7a56116100ad578063d21220a71161007c578063d21220a714610621578063d505accf14610629578063dd62ed3e1461067a578063f30dba93146106a8578063fff6cae91461071f576101fb565b8063ba9a7a56146105ca578063bc25cf77146105d2578063c45a0155146105f8578063d0c93a7c14610600576101fb565b80637ecebe00116100e95780637ecebe001461053157806389afcb441461055757806395d89b4114610596578063a9059cbb1461059e576101fb565b80635a3d5493146104d55780636a627842146104dd57806370a08231146105035780637464fc3d14610529576101fb565b806323b872dd116101925780633850c7bd116101615780633850c7bd14610445578063485cc9551461047f5780635339c296146104ad5780635909c0d5146104cd576101fb565b806323b872dd146103e157806330adf81f14610417578063313ce5671461041f5780633644e5151461043d576101fb565b80630dfe1681116101ce5780630dfe16811461039357806313bee7e8146103b757806318160ddd146103bf5780631bd15cae146103d9576101fb565b8063022c0d9f1461020057806306fdde031461028e5780630902f1ac1461030b578063095ea7b314610353575b600080fd5b61028c6004803603608081101561021657600080fd5b8135916020810135916001600160a01b03604083013516919081019060808101606082013564010000000081111561024d57600080fd5b82018360208201111561025f57600080fd5b8035906020019184600183028401116401000000008311171561028157600080fd5b509092509050610727565b005b610296610cc0565b6040805160208082528351818301528351919283929083019185019080838360005b838110156102d05781810151838201526020016102b8565b50505050905090810190601f1680156102fd5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b610313610ce6565b604080516001600160701b0396871681529486166020860152928516848401529316606083015263ffffffff909216608082015290519081900360a00190f35b61037f6004803603604081101561036957600080fd5b506001600160a01b038135169060200135610d1f565b604080519115158252519081900360200190f35b61039b610d36565b604080516001600160a01b039092168252519081900360200190f35b61039b610d45565b6103c7610d54565b60408051918252519081900360200190f35b61039b610d5a565b61037f600480360360608110156103f757600080fd5b506001600160a01b03813581169160208101359091169060400135610d69565b6103c7610e03565b610427610e27565b6040805160ff9092168252519081900360200190f35b6103c7610e2c565b61044d610e32565b604080516001600160a01b039094168452600292830b830b602085015290820b90910b82820152519081900360600190f35b61028c6004803603604081101561049557600080fd5b506001600160a01b0381358116916020013516610e59565b6103c7600480360360208110156104c357600080fd5b503560010b610eda565b6103c7610eec565b6103c7610ef2565b6103c7600480360360208110156104f357600080fd5b50356001600160a01b0316610ef8565b6103c76004803603602081101561051957600080fd5b50356001600160a01b03166111cd565b6103c76111df565b6103c76004803603602081101561054757600080fd5b50356001600160a01b03166111e5565b61057d6004803603602081101561056d57600080fd5b50356001600160a01b03166111f7565b6040805192835260208301919091528051918290030190f35b610296611573565b61037f600480360360408110156105b457600080fd5b506001600160a01b038135169060200135611595565b6103c76115a2565b61028c600480360360208110156105e857600080fd5b50356001600160a01b03166115a8565b61039b611710565b61060861171f565b60408051600292830b90920b8252519081900360200190f35b61039b611743565b61028c600480360360e081101561063f57600080fd5b506001600160a01b03813581169160208101359091169060408101359060608101359060ff6080820135169060a08101359060c00135611752565b6103c76004803603604081101561069057600080fd5b506001600160a01b0381358116916020013516611951565b6106c8600480360360208110156106be57600080fd5b503560020b61196e565b604080516001600160801b039097168752600f95860b90950b6020870152600693840b90930b858501526001600160a01b03909116606085015263ffffffff166080840152151560a0830152519081900360c00190f35b61028c6119d0565b60125460011461076f576040805162461bcd60e51b815260206004820152600e60248201526d109d5d1d195c8e881313d0d2d15160921b604482015290519081900360640190fd5b6000601255841515806107825750600084115b6107bd5760405162461bcd60e51b81526004018080602001828103825260228152602001806122d06022913960400191505060405180910390fd5b6000851180156107cd5750600084115b1561081f576040805162461bcd60e51b815260206004820152601d60248201527f4275747465723a20494e56414c49445f4f55545055545f414d4f554e54000000604482015290519081900360640190fd5b610827611b3e565b600080600080610835610ce6565b50600654600754949850929650909450925060009182916001600160a01b03908116918116908b16821480159061087e5750806001600160a01b03168b6001600160a01b031614155b6108c4576040805162461bcd60e51b81526020600482015260126024820152714275747465723a20494e56414c49445f544f60701b604482015290519081900360640190fd5b604080516370a0823160e01b815230600482015290516001600160a01b038416916370a08231916024808301926020929190829003018186803b15801561090a57600080fd5b505afa15801561091e573d6000803e3d6000fd5b505050506040513d602081101561093457600080fd5b5051604080516370a0823160e01b815230600482015290519195506001600160a01b038316916370a0823191602480820192602092909190829003018186803b15801561098057600080fd5b505afa158015610994573d6000803e3d6000fd5b505050506040513d60208110156109aa57600080fd5b5051925060009150506001600160701b038786011683116109cc5760006109db565b8487016001600160701b031683035b905060008487016001600160701b031683116109f8576000610a07565b8487016001600160701b031683035b90506001600160701b038211801590610a2757506001600160701b038111155b610a6b576040805162461bcd60e51b815260206004820152601060248201526f4275747465723a204f564552464c4f5760801b604482015290519081900360640190fd5b948101949384019381151580610a815750600081115b610abc5760405162461bcd60e51b81526004018080602001828103825260218152602001806122f26021913960400191505060405180910390fd5b600082118015610acc5750600081115b15610b1e576040805162461bcd60e51b815260206004820152601c60248201527f4275747465723a20494e56414c49445f494e5055545f414d4f554e5400000000604482015290519081900360640190fd5b8115610bba57600860009054906101000a90046001600160a01b03166001600160a01b031663156e29f68c8e856040518463ffffffff1660e01b815260040180846001600160a01b03166001600160a01b031681526020018381526020018281526020019350505050600060405180830381600087803b158015610ba157600080fd5b505af1158015610bb5573d6000803e3d6000fd5b505050505b8015610c5657600960009054906101000a90046001600160a01b03166001600160a01b031663156e29f68c8f846040518463ffffffff1660e01b815260040180846001600160a01b03166001600160a01b031681526020018381526020018281526020019350505050600060405180830381600087803b158015610c3d57600080fd5b505af1158015610c51573d6000803e3d6000fd5b505050505b610c6484848a8a8a8a611b40565b604080518381526020810183905281516001600160a01b038e169233927ff23f60e23299b2400e85cb44a55b4a9d9fb4dddc55266b0dc7109763cb57aef6929081900390910190a3505060016012555050505050505050505050565b6040518060400160405280600a8152602001692ab734b9bbb0b8102b1960b11b81525081565b600a54600b546001600160701b0380831693600160701b938490048216938284169390810490921691600160e01b900463ffffffff1690565b6000610d2c338484611d1d565b5060015b92915050565b6006546001600160a01b031681565b6009546001600160a01b031681565b60005481565b6008546001600160a01b031681565b6001600160a01b038316600090815260026020908152604080832033845290915281205460001914610dee576001600160a01b0384166000908152600260209081526040808320338452909152902054610dc9908363ffffffff611d7f16565b6001600160a01b03851660009081526002602090815260408083203384529091529020555b610df9848484611dcf565b5060019392505050565b7f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c981565b601281565b60035481565b600f546001600160a01b03811690600160a01b8104600290810b91600160b81b9004900b83565b6005546001600160a01b03163314610eac576040805162461bcd60e51b8152602060048201526011602482015270213aba3a32b91d102327a92124a22222a760791b604482015290519081900360640190fd5b600680546001600160a01b039384166001600160a01b03199182161790915560078054929093169116179055565b60116020526000908152604090205481565b600c5481565b600d5481565b6000601254600114610f42576040805162461bcd60e51b815260206004820152600e60248201526d109d5d1d195c8e881313d0d2d15160921b604482015290519081900360640190fd5b60006012819055808080610f54610ce6565b50600654604080516370a0823160e01b8152306004820152905195995093975091955093506000926001600160a01b03909116916370a08231916024808301926020929190829003018186803b158015610fad57600080fd5b505afa158015610fc1573d6000803e3d6000fd5b505050506040513d6020811015610fd757600080fd5b5051600754604080516370a0823160e01b815230600482015290519293506000926001600160a01b03909216916370a0823191602480820192602092909190829003018186803b15801561102a57600080fd5b505afa15801561103e573d6000803e3d6000fd5b505050506040513d602081101561105457600080fd5b505190506000611073836001600160701b03891663ffffffff611d7f16565b90506000611090836001600160701b03891663ffffffff611d7f16565b600054909150806110d9576110c56103e86110b96110b4868663ffffffff611e8916565b611eec565b9063ffffffff611d7f16565b99506110d460006103e8611f3e565b611128565b6111256001600160701b038a166110f6858463ffffffff611e8916565b816110fd57fe5b046001600160701b038a16611118858563ffffffff611e8916565b8161111f57fe5b04611fd4565b99505b60008a116111675760405162461bcd60e51b81526004018080602001828103825260258152602001806122ab6025913960400191505060405180910390fd5b6111718b8b611f3e565b61117f85858b8b8b8b611b40565b6040805184815260208101849052815133927f4c209b5fc8ad50758f13e2e1088ba56a560dff690a1c6fef26394f4c03821c4f928290030190a2505060016012555095979650505050505050565b60016020526000908152604090205481565b600e5481565b60046020526000908152604090205481565b600080601254600114611242576040805162461bcd60e51b815260206004820152600e60248201526d109d5d1d195c8e881313d0d2d15160921b604482015290519081900360640190fd5b60006012819055808080611254610ce6565b50600654600754604080516370a0823160e01b81523060048201529051969a509498509296509094506001600160a01b039081169391169160009184916370a08231916024808301926020929190829003018186803b1580156112b657600080fd5b505afa1580156112ca573d6000803e3d6000fd5b505050506040513d60208110156112e057600080fd5b5051604080516370a0823160e01b815230600482015290519192506000916001600160a01b038516916370a08231916024808301926020929190829003018186803b15801561132e57600080fd5b505afa158015611342573d6000803e3d6000fd5b505050506040513d602081101561135857600080fd5b50513060009081526001602052604081205490549192509080611381838663ffffffff611e8916565b8161138857fe5b049b508061139c838563ffffffff611e8916565b816113a357fe5b049a5060008c1180156113b6575060008b115b6113f15760405162461bcd60e51b81526004018080602001828103825260258152602001806123136025913960400191505060405180910390fd5b6113fb3083611fec565b611406868e8e61208a565b611411858e8d61208a565b604080516370a0823160e01b815230600482015290516001600160a01b038816916370a08231916024808301926020929190829003018186803b15801561145757600080fd5b505afa15801561146b573d6000803e3d6000fd5b505050506040513d602081101561148157600080fd5b5051604080516370a0823160e01b815230600482015290519195506001600160a01b038716916370a0823191602480820192602092909190829003018186803b1580156114cd57600080fd5b505afa1580156114e1573d6000803e3d6000fd5b505050506040513d60208110156114f757600080fd5b5051925061150984848c8c8c8c611b40565b8c6001600160a01b0316336001600160a01b03167fdccd412f0b1252819cb1fd330b93224ca42612892bb3f4f789976e6d819364968e8e604051808381526020018281526020019250505060405180910390a3505050505050505050506001601281905550915091565b604051806040016040528060068152602001652aa72496ab1960d11b81525081565b6000610d2c338484611dcf565b6103e881565b6012546001146115f0576040805162461bcd60e51b815260206004820152600e60248201526d109d5d1d195c8e881313d0d2d15160921b604482015290519081900360640190fd5b6000601255600654600754600a54604080516370a0823160e01b815230600482015290516001600160a01b03948516949093169261169f928592879261169a926001600160701b03169185916370a0823191602480820192602092909190829003018186803b15801561166257600080fd5b505afa158015611676573d6000803e3d6000fd5b505050506040513d602081101561168c57600080fd5b50519063ffffffff611d7f16565b61208a565b600a54604080516370a0823160e01b81523060048201529051611706928492879261169a92600160701b90046001600160701b0316916001600160a01b038616916370a0823191602480820192602092909190829003018186803b15801561166257600080fd5b5050600160125550565b6005546001600160a01b031681565b7f000000000000000000000000000000000000000000000000000000000000000081565b6007546001600160a01b031681565b42841015611799576040805162461bcd60e51b815260206004820152600f60248201526e109d5d1d195c8e8811561412549151608a1b604482015290519081900360640190fd5b6003546001600160a01b0380891660008181526004602090815260408083208054600180820190925582517f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c98186015280840196909652958d166060860152608085018c905260a085019590955260c08085018b90528151808603909101815260e08501825280519083012061190160f01b6101008601526101028501969096526101228085019690965280518085039096018652610142840180825286519683019690962095839052610162840180825286905260ff89166101828501526101a284018890526101c28401879052519193926101e280820193601f1981019281900390910190855afa1580156118b4573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116158015906118ea5750886001600160a01b0316816001600160a01b0316145b61193b576040805162461bcd60e51b815260206004820152601960248201527f4275747465723a20494e56414c49445f5349474e415455524500000000000000604482015290519081900360640190fd5b611946898989611d1d565b505050505050505050565b600260209081526000928352604080842090915290825290205481565b601060205260009081526040902080546001909101546001600160801b03821691600160801b9004600f0b90600681900b9067010000000000000081046001600160a01b031690600160d81b810463ffffffff1690600160f81b900460ff1686565b601254600114611a18576040805162461bcd60e51b815260206004820152600e60248201526d109d5d1d195c8e881313d0d2d15160921b604482015290519081900360640190fd5b6000601255600654604080516370a0823160e01b81523060048201529051611b37926001600160a01b0316916370a08231916024808301926020929190829003018186803b158015611a6957600080fd5b505afa158015611a7d573d6000803e3d6000fd5b505050506040513d6020811015611a9357600080fd5b5051600754604080516370a0823160e01b815230600482015290516001600160a01b03909216916370a0823191602480820192602092909190829003018186803b158015611ae057600080fd5b505afa158015611af4573d6000803e3d6000fd5b505050506040513d6020811015611b0a57600080fd5b5051600a54600b546001600160701b0380831692600160701b908190048216928083169291900416611b40565b6001601255565b565b6001600160701b038611801590611b5e57506001600160701b038511155b611ba2576040805162461bcd60e51b815260206004820152601060248201526f4275747465723a204f564552464c4f5760801b604482015290519081900360640190fd5b600b5463ffffffff42811691600160e01b90048116820390811615801590611bd257506001600160701b03861615155b8015611be657506001600160701b03851615155b15611c57578063ffffffff16611c1487611bff88612224565b6001600160e01b03169063ffffffff61223616565b600c80546001600160e01b03929092169290920201905563ffffffff8116611c3f86611bff89612224565b600d80546001600160e01b0392909216929092020190555b600a80546dffffffffffffffffffffffffffff199081166001600160701b038b8116919091176dffffffffffffffffffffffffffff60701b19908116600160701b8c841681029190911794859055600b8054909416898416179091168783168202176001600160e01b0316600160e01b63ffffffff881602179092556040805184831681529290930416602082015281517f1c411e9a96e071241c2f21f7726b17ae89e3cab4c78be50e062b03a9fffbbad1929181900390910190a15050505050505050565b6001600160a01b03808416600081815260026020908152604080832094871680845294825291829020859055815185815291517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259281900390910190a3505050565b80820382811115610d30576040805162461bcd60e51b815260206004820152601560248201527464732d6d6174682d7375622d756e646572666c6f7760581b604482015290519081900360640190fd5b6001600160a01b038316600090815260016020526040902054611df8908263ffffffff611d7f16565b6001600160a01b038085166000908152600160205260408082209390935590841681522054611e2d908263ffffffff61225b16565b6001600160a01b0380841660008181526001602090815260409182902094909455805185815290519193928716927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a3505050565b6000811580611ea457505080820282828281611ea157fe5b04145b610d30576040805162461bcd60e51b815260206004820152601460248201527364732d6d6174682d6d756c2d6f766572666c6f7760601b604482015290519081900360640190fd5b60006003821115611f2f575080600160028204015b81811015611f2957809150600281828581611f1857fe5b040181611f2157fe5b049050611f01565b50611f39565b8115611f39575060015b919050565b600054611f51908263ffffffff61225b16565b60009081556001600160a01b038316815260016020526040902054611f7c908263ffffffff61225b16565b6001600160a01b03831660008181526001602090815260408083209490945583518581529351929391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a35050565b6000818310611fe35781611fe5565b825b9392505050565b6001600160a01b038216600090815260016020526040902054612015908263ffffffff611d7f16565b6001600160a01b03831660009081526001602052604081209190915554612042908263ffffffff611d7f16565b60009081556040805183815290516001600160a01b038516917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef919081900360200190a35050565b604080518082018252601981527f7472616e7366657228616464726573732c75696e74323536290000000000000060209182015281516001600160a01b0385811660248301526044808301869052845180840390910181526064909201845291810180516001600160e01b031663a9059cbb60e01b1781529251815160009460609489169392918291908083835b602083106121375780518252601f199092019160209182019101612118565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d8060008114612199576040519150601f19603f3d011682016040523d82523d6000602084013e61219e565b606091505b50915091508180156121cc5750805115806121cc57508080602001905160208110156121c957600080fd5b50515b61221d576040805162461bcd60e51b815260206004820152601760248201527f4275747465723a205452414e534645525f4641494c4544000000000000000000604482015290519081900360640190fd5b5050505050565b6001600160701b0316600160701b0290565b60006001600160701b0382166001600160e01b0384168161225357fe5b049392505050565b80820182811015610d30576040805162461bcd60e51b815260206004820152601460248201527364732d6d6174682d6164642d6f766572666c6f7760601b604482015290519081900360640190fdfe4275747465723a20494e53554646494349454e545f4c49515549444954595f4d494e5445444275747465723a20494e53554646494349454e545f4f55545055545f414d4f554e544275747465723a20494e53554646494349454e545f494e5055545f414d4f554e544275747465723a20494e53554646494349454e545f4c49515549444954595f4255524e4544a2646970667358221220ff6ad459a31678507153c70a143f46ebaaccf7cbfc91e674503500c88d23467664736f6c63430006060033454950373132446f6d61696e28737472696e67206e616d652c737472696e672076657273696f6e2c75696e7432353620636861696e49642c6164647265737320766572696679696e67436f6e747261637429a26469706673582212208f69fc7f009be33d6d714185f79b1dd83b92e65c10ca03f1f7e8d4761b693f4a64736f6c63430006060033",
  "devdoc": {
    "methods": {}
  },
  "userdoc": {
    "methods": {}
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2036,
        "contract": "contracts/ButterFactory.sol:ButterFactory",
        "label": "feeTo",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 2039,
        "contract": "contracts/ButterFactory.sol:ButterFactory",
        "label": "feeToSetter",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 2057,
        "contract": "contracts/ButterFactory.sol:ButterFactory",
        "label": "getPair",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_mapping(t_address,t_address))"
      },
      {
        "astId": 2061,
        "contract": "contracts/ButterFactory.sol:ButterFactory",
        "label": "allPairs",
        "offset": 0,
        "slot": "3",
        "type": "t_array(t_address)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_mapping(t_address,t_address))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => address))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_address)"
      }
    }
  }
}