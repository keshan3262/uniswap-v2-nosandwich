{
  "address": "0x4e5d17Ffb64f844fC19A6d1208F962F46C1658E0",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_factory",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_WETH",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "WETH",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenB",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountADesired",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountBDesired",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountAMin",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountBMin",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "addLiquidity",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountA",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountB",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "liquidity",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountTokenDesired",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountTokenMin",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountETHMin",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "addLiquidityETH",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountToken",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountETH",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "liquidity",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "factory",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "reserveIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "reserveOut",
          "type": "uint256"
        }
      ],
      "name": "getAmountIn",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "reserveIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "reserveOut",
          "type": "uint256"
        }
      ],
      "name": "getAmountOut",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        }
      ],
      "name": "getAmountsIn",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        }
      ],
      "name": "getAmountsOut",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountA",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "reserveA",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "reserveB",
          "type": "uint256"
        }
      ],
      "name": "quote",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountB",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenB",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "liquidity",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountAMin",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountBMin",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "removeLiquidity",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountA",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountB",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "liquidity",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountTokenMin",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountETHMin",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "removeLiquidityETH",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountToken",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountETH",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "liquidity",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountTokenMin",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountETHMin",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "removeLiquidityETHSupportingFeeOnTransferTokens",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountETH",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "liquidity",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountTokenMin",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountETHMin",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "approveMax",
          "type": "bool"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "removeLiquidityETHWithPermit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountToken",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountETH",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "liquidity",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountTokenMin",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountETHMin",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "approveMax",
          "type": "bool"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountETH",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenB",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "liquidity",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountAMin",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountBMin",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "approveMax",
          "type": "bool"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "removeLiquidityWithPermit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountA",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountB",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountOutMin",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "swapExactETHForTokens",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountOutMin",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "swapExactTokensForETH",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountOutMin",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "swapExactTokensForTokens",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xd4ef2235ab7f1f6ebc0f1a76c23582ade2e141f73a86f964119780124a706385",
  "receipt": {
    "to": null,
    "from": "0xb9c92Ee112A12F3F34bfec134b5CB9109150cA94",
    "contractAddress": "0x4e5d17Ffb64f844fC19A6d1208F962F46C1658E0",
    "transactionIndex": 1,
    "gasUsed": "2735443",
    "logsBloom": "0x
    "blockHash": "0x6ed0bbfe8731ddee03dbc163d1c64ecffc0628e34889a95c793d574c0bf9c78c",
    "transactionHash": "0xd4ef2235ab7f1f6ebc0f1a76c23582ade2e141f73a86f964119780124a706385",
    "logs": [],
    "blockNumber": 4902893,
    "cumulativeGasUsed": "2756443",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x04Bc70Bf89eF7af019fc2bFD0f1e7b2B0Fd25788",
    "0xf3CD5A5a6bcC3D1Db11191ab121fE9022013F22f"
  ],
  "numDeployments": 1,
  "solcInputHash": "126d9c5af6df5bf0346f836cab0e2769",
  "metadata": "{\"compiler\":{\"version\":\"0.6.6+commit.6c089d02\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_factory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_WETH\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"WETH\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountADesired\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountBDesired\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountAMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountBMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"addLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountB\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountTokenDesired\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountTokenMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountETHMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"addLiquidityETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountToken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountETH\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveOut\",\"type\":\"uint256\"}],\"name\":\"getAmountIn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveOut\",\"type\":\"uint256\"}],\"name\":\"getAmountOut\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"}],\"name\":\"getAmountsIn\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"}],\"name\":\"getAmountsOut\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveB\",\"type\":\"uint256\"}],\"name\":\"quote\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountB\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountAMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountBMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"removeLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountB\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountTokenMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountETHMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"removeLiquidityETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountToken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountETH\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountTokenMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountETHMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"removeLiquidityETHSupportingFeeOnTransferTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountETH\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountTokenMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountETHMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"approveMax\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"removeLiquidityETHWithPermit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountToken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountETH\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountTokenMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountETHMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"approveMax\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"removeLiquidityETHWithPermitSupportingFeeOnTransferTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountETH\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountAMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountBMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"approveMax\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"removeLiquidityWithPermit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountB\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapExactETHForTokens\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapExactTokensForETH\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapExactTokensForTokens\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"methods\":{}},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"contracts/ButterRouter02.sol\":\"ButterRouter02\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@uniswap/lib/contracts/libraries/TransferHelper.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity >=0.6.0;\\n\\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\\nlibrary TransferHelper {\\n    function safeApprove(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            'TransferHelper::safeApprove: approve failed'\\n        );\\n    }\\n\\n    function safeTransfer(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            'TransferHelper::safeTransfer: transfer failed'\\n        );\\n    }\\n\\n    function safeTransferFrom(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            'TransferHelper::transferFrom: transferFrom failed'\\n        );\\n    }\\n\\n    function safeTransferETH(address to, uint256 value) internal {\\n        (bool success, ) = to.call{value: value}(new bytes(0));\\n        require(success, 'TransferHelper::safeTransferETH: ETH transfer failed');\\n    }\\n}\\n\",\"keccak256\":\"0xaff99b54915f57e2a4e71b8d15afd4ee425410e5a6f45c07517ae1beb806f8bd\"},\"contracts/ButterRouter02.sol\":{\"content\":\"pragma solidity =0.6.6;\\n\\nimport \\\"./interfaces/IButterFactory.sol\\\";\\nimport \\\"@uniswap/lib/contracts/libraries/TransferHelper.sol\\\";\\n\\nimport \\\"./interfaces/IButterRouter02.sol\\\";\\nimport \\\"./libraries/ButterLibrary.sol\\\";\\nimport \\\"./libraries/SafeMath.sol\\\";\\nimport \\\"./interfaces/IERC20.sol\\\";\\nimport \\\"./interfaces/IWETH.sol\\\";\\n\\ncontract ButterRouter02 is IButterRouter02 {\\n\\tusing SafeMath for uint;\\n\\n\\taddress public immutable override factory;\\n\\taddress public immutable override WETH;\\n\\n\\tmodifier ensure(uint deadline) {\\n\\t\\trequire(deadline >= block.timestamp, \\\"ButterRouter: EXPIRED\\\");\\n\\t\\t_;\\n\\t}\\n\\n\\tconstructor(address _factory, address _WETH) public {\\n\\t\\tfactory = _factory;\\n\\t\\tWETH = _WETH;\\n\\t}\\n\\n\\treceive() external payable {\\n\\t\\tassert(msg.sender == WETH); // only accept ETH via fallback from the WETH contract\\n\\t}\\n\\n\\t// **** ADD LIQUIDITY ****\\n\\tfunction _addLiquidity(\\n\\t\\taddress tokenA,\\n\\t\\taddress tokenB,\\n\\t\\tuint amountADesired,\\n\\t\\tuint amountBDesired,\\n\\t\\tuint amountAMin,\\n\\t\\tuint amountBMin\\n\\t) internal virtual returns (uint amountA, uint amountB) {\\n\\t\\t// create the pair if it doesn't exist yet\\n\\t\\tif (IButterFactory(factory).getPair(tokenA, tokenB) == address(0)) {\\n\\t\\t\\tIButterFactory(factory).createPair(tokenA, tokenB);\\n\\t\\t}\\n\\t\\t(uint reserveA, uint reserveB) = ButterLibrary.getReserves(\\n\\t\\t\\tfactory,\\n\\t\\t\\ttokenA,\\n\\t\\t\\ttokenB\\n\\t\\t);\\n\\t\\tif (reserveA == 0 && reserveB == 0) {\\n\\t\\t\\t(amountA, amountB) = (amountADesired, amountBDesired);\\n\\t\\t} else {\\n\\t\\t\\tuint amountBOptimal = ButterLibrary.quote(\\n\\t\\t\\t\\tamountADesired,\\n\\t\\t\\t\\treserveA,\\n\\t\\t\\t\\treserveB\\n\\t\\t\\t);\\n\\t\\t\\tif (amountBOptimal <= amountBDesired) {\\n\\t\\t\\t\\trequire(\\n\\t\\t\\t\\t\\tamountBOptimal >= amountBMin,\\n\\t\\t\\t\\t\\t\\\"ButterRouter: INSUFFICIENT_B_AMOUNT\\\"\\n\\t\\t\\t\\t);\\n\\t\\t\\t\\t(amountA, amountB) = (amountADesired, amountBOptimal);\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tuint amountAOptimal = ButterLibrary.quote(\\n\\t\\t\\t\\t\\tamountBDesired,\\n\\t\\t\\t\\t\\treserveB,\\n\\t\\t\\t\\t\\treserveA\\n\\t\\t\\t\\t);\\n\\t\\t\\t\\tassert(amountAOptimal <= amountADesired);\\n\\t\\t\\t\\trequire(\\n\\t\\t\\t\\t\\tamountAOptimal >= amountAMin,\\n\\t\\t\\t\\t\\t\\\"ButterRouter: INSUFFICIENT_A_AMOUNT\\\"\\n\\t\\t\\t\\t);\\n\\t\\t\\t\\t(amountA, amountB) = (amountAOptimal, amountBDesired);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\tfunction addLiquidity(\\n\\t\\taddress tokenA,\\n\\t\\taddress tokenB,\\n\\t\\tuint amountADesired,\\n\\t\\tuint amountBDesired,\\n\\t\\tuint amountAMin,\\n\\t\\tuint amountBMin,\\n\\t\\taddress to,\\n\\t\\tuint deadline\\n\\t)\\n\\t\\texternal\\n\\t\\tvirtual\\n\\t\\toverride\\n\\t\\tensure(deadline)\\n\\t\\treturns (uint amountA, uint amountB, uint liquidity)\\n\\t{\\n\\t\\t(amountA, amountB) = _addLiquidity(\\n\\t\\t\\ttokenA,\\n\\t\\t\\ttokenB,\\n\\t\\t\\tamountADesired,\\n\\t\\t\\tamountBDesired,\\n\\t\\t\\tamountAMin,\\n\\t\\t\\tamountBMin\\n\\t\\t);\\n\\t\\taddress pair = ButterLibrary.pairFor(factory, tokenA, tokenB);\\n\\t\\tTransferHelper.safeTransferFrom(tokenA, msg.sender, pair, amountA);\\n\\t\\tTransferHelper.safeTransferFrom(tokenB, msg.sender, pair, amountB);\\n\\t\\tliquidity = IButterPair(pair).mint(to);\\n\\t}\\n\\tfunction addLiquidityETH(\\n\\t\\taddress token,\\n\\t\\tuint amountTokenDesired,\\n\\t\\tuint amountTokenMin,\\n\\t\\tuint amountETHMin,\\n\\t\\taddress to,\\n\\t\\tuint deadline\\n\\t)\\n\\t\\texternal\\n\\t\\tpayable\\n\\t\\tvirtual\\n\\t\\toverride\\n\\t\\tensure(deadline)\\n\\t\\treturns (uint amountToken, uint amountETH, uint liquidity)\\n\\t{\\n\\t\\t(amountToken, amountETH) = _addLiquidity(\\n\\t\\t\\ttoken,\\n\\t\\t\\tWETH,\\n\\t\\t\\tamountTokenDesired,\\n\\t\\t\\tmsg.value,\\n\\t\\t\\tamountTokenMin,\\n\\t\\t\\tamountETHMin\\n\\t\\t);\\n\\t\\taddress pair = ButterLibrary.pairFor(factory, token, WETH);\\n\\t\\tTransferHelper.safeTransferFrom(token, msg.sender, pair, amountToken);\\n\\t\\tIWETH(WETH).deposit{ value: amountETH }();\\n\\t\\tassert(IWETH(WETH).transfer(pair, amountETH));\\n\\t\\tliquidity = IButterPair(pair).mint(to);\\n\\t\\t// refund dust eth, if any\\n\\t\\tif (msg.value > amountETH)\\n\\t\\t\\tTransferHelper.safeTransferETH(msg.sender, msg.value - amountETH);\\n\\t}\\n\\n\\t// **** REMOVE LIQUIDITY ****\\n\\tfunction removeLiquidity(\\n\\t\\taddress tokenA,\\n\\t\\taddress tokenB,\\n\\t\\tuint liquidity,\\n\\t\\tuint amountAMin,\\n\\t\\tuint amountBMin,\\n\\t\\taddress to,\\n\\t\\tuint deadline\\n\\t)\\n\\t\\tpublic\\n\\t\\tvirtual\\n\\t\\toverride\\n\\t\\tensure(deadline)\\n\\t\\treturns (uint amountA, uint amountB)\\n\\t{\\n\\t\\taddress pair = ButterLibrary.pairFor(factory, tokenA, tokenB);\\n\\t\\tIButterPair(pair).transferFrom(msg.sender, pair, liquidity); // send liquidity to pair\\n\\t\\t(uint amount0, uint amount1) = IButterPair(pair).burn(to);\\n\\t\\t(address token0, ) = ButterLibrary.sortTokens(tokenA, tokenB);\\n\\t\\t(amountA, amountB) = tokenA == token0\\n\\t\\t\\t? (amount0, amount1)\\n\\t\\t\\t: (amount1, amount0);\\n\\t\\trequire(amountA >= amountAMin, \\\"ButterRouter: INSUFFICIENT_A_AMOUNT\\\");\\n\\t\\trequire(amountB >= amountBMin, \\\"ButterRouter: INSUFFICIENT_B_AMOUNT\\\");\\n\\t}\\n\\tfunction removeLiquidityETH(\\n\\t\\taddress token,\\n\\t\\tuint liquidity,\\n\\t\\tuint amountTokenMin,\\n\\t\\tuint amountETHMin,\\n\\t\\taddress to,\\n\\t\\tuint deadline\\n\\t)\\n\\t\\tpublic\\n\\t\\tvirtual\\n\\t\\toverride\\n\\t\\tensure(deadline)\\n\\t\\treturns (uint amountToken, uint amountETH)\\n\\t{\\n\\t\\t(amountToken, amountETH) = removeLiquidity(\\n\\t\\t\\ttoken,\\n\\t\\t\\tWETH,\\n\\t\\t\\tliquidity,\\n\\t\\t\\tamountTokenMin,\\n\\t\\t\\tamountETHMin,\\n\\t\\t\\taddress(this),\\n\\t\\t\\tdeadline\\n\\t\\t);\\n\\t\\tTransferHelper.safeTransfer(token, to, amountToken);\\n\\t\\tIWETH(WETH).withdraw(amountETH);\\n\\t\\tTransferHelper.safeTransferETH(to, amountETH);\\n\\t}\\n\\tfunction removeLiquidityWithPermit(\\n\\t\\taddress tokenA,\\n\\t\\taddress tokenB,\\n\\t\\tuint liquidity,\\n\\t\\tuint amountAMin,\\n\\t\\tuint amountBMin,\\n\\t\\taddress to,\\n\\t\\tuint deadline,\\n\\t\\tbool approveMax,\\n\\t\\tuint8 v,\\n\\t\\tbytes32 r,\\n\\t\\tbytes32 s\\n\\t) external virtual override returns (uint amountA, uint amountB) {\\n\\t\\taddress pair = ButterLibrary.pairFor(factory, tokenA, tokenB);\\n\\t\\tuint value = approveMax ? uint(-1) : liquidity;\\n\\t\\tIButterPair(pair).permit(\\n\\t\\t\\tmsg.sender,\\n\\t\\t\\taddress(this),\\n\\t\\t\\tvalue,\\n\\t\\t\\tdeadline,\\n\\t\\t\\tv,\\n\\t\\t\\tr,\\n\\t\\t\\ts\\n\\t\\t);\\n\\t\\t(amountA, amountB) = removeLiquidity(\\n\\t\\t\\ttokenA,\\n\\t\\t\\ttokenB,\\n\\t\\t\\tliquidity,\\n\\t\\t\\tamountAMin,\\n\\t\\t\\tamountBMin,\\n\\t\\t\\tto,\\n\\t\\t\\tdeadline\\n\\t\\t);\\n\\t}\\n\\tfunction removeLiquidityETHWithPermit(\\n\\t\\taddress token,\\n\\t\\tuint liquidity,\\n\\t\\tuint amountTokenMin,\\n\\t\\tuint amountETHMin,\\n\\t\\taddress to,\\n\\t\\tuint deadline,\\n\\t\\tbool approveMax,\\n\\t\\tuint8 v,\\n\\t\\tbytes32 r,\\n\\t\\tbytes32 s\\n\\t) external virtual override returns (uint amountToken, uint amountETH) {\\n\\t\\taddress pair = ButterLibrary.pairFor(factory, token, WETH);\\n\\t\\tuint value = approveMax ? uint(-1) : liquidity;\\n\\t\\tIButterPair(pair).permit(\\n\\t\\t\\tmsg.sender,\\n\\t\\t\\taddress(this),\\n\\t\\t\\tvalue,\\n\\t\\t\\tdeadline,\\n\\t\\t\\tv,\\n\\t\\t\\tr,\\n\\t\\t\\ts\\n\\t\\t);\\n\\t\\t(amountToken, amountETH) = removeLiquidityETH(\\n\\t\\t\\ttoken,\\n\\t\\t\\tliquidity,\\n\\t\\t\\tamountTokenMin,\\n\\t\\t\\tamountETHMin,\\n\\t\\t\\tto,\\n\\t\\t\\tdeadline\\n\\t\\t);\\n\\t}\\n\\n\\t// **** REMOVE LIQUIDITY (supporting fee-on-transfer tokens) ****\\n\\tfunction removeLiquidityETHSupportingFeeOnTransferTokens(\\n\\t\\taddress token,\\n\\t\\tuint liquidity,\\n\\t\\tuint amountTokenMin,\\n\\t\\tuint amountETHMin,\\n\\t\\taddress to,\\n\\t\\tuint deadline\\n\\t) public virtual override ensure(deadline) returns (uint amountETH) {\\n\\t\\t(, amountETH) = removeLiquidity(\\n\\t\\t\\ttoken,\\n\\t\\t\\tWETH,\\n\\t\\t\\tliquidity,\\n\\t\\t\\tamountTokenMin,\\n\\t\\t\\tamountETHMin,\\n\\t\\t\\taddress(this),\\n\\t\\t\\tdeadline\\n\\t\\t);\\n\\t\\tTransferHelper.safeTransfer(\\n\\t\\t\\ttoken,\\n\\t\\t\\tto,\\n\\t\\t\\tIERC20(token).balanceOf(address(this))\\n\\t\\t);\\n\\t\\tIWETH(WETH).withdraw(amountETH);\\n\\t\\tTransferHelper.safeTransferETH(to, amountETH);\\n\\t}\\n\\tfunction removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n\\t\\taddress token,\\n\\t\\tuint liquidity,\\n\\t\\tuint amountTokenMin,\\n\\t\\tuint amountETHMin,\\n\\t\\taddress to,\\n\\t\\tuint deadline,\\n\\t\\tbool approveMax,\\n\\t\\tuint8 v,\\n\\t\\tbytes32 r,\\n\\t\\tbytes32 s\\n\\t) external virtual override returns (uint amountETH) {\\n\\t\\taddress pair = ButterLibrary.pairFor(factory, token, WETH);\\n\\t\\tuint value = approveMax ? uint(-1) : liquidity;\\n\\t\\tIButterPair(pair).permit(\\n\\t\\t\\tmsg.sender,\\n\\t\\t\\taddress(this),\\n\\t\\t\\tvalue,\\n\\t\\t\\tdeadline,\\n\\t\\t\\tv,\\n\\t\\t\\tr,\\n\\t\\t\\ts\\n\\t\\t);\\n\\t\\tamountETH = removeLiquidityETHSupportingFeeOnTransferTokens(\\n\\t\\t\\ttoken,\\n\\t\\t\\tliquidity,\\n\\t\\t\\tamountTokenMin,\\n\\t\\t\\tamountETHMin,\\n\\t\\t\\tto,\\n\\t\\t\\tdeadline\\n\\t\\t);\\n\\t}\\n\\n\\t// **** SWAP ****\\n\\t// requires the initial amount to have already been sent to the first pair\\n\\tfunction _swap(\\n\\t\\tuint[] memory amounts,\\n\\t\\taddress[] memory path,\\n\\t\\taddress _to\\n\\t) internal virtual {\\n\\t\\tfor (uint i; i < path.length - 1; i++) {\\n\\t\\t\\t(address input, address output) = (path[i], path[i + 1]);\\n\\t\\t\\t(address token0, ) = ButterLibrary.sortTokens(input, output);\\n\\t\\t\\tuint amountOut = amounts[i + 1];\\n\\t\\t\\t(uint amount0Out, uint amount1Out) = input == token0\\n\\t\\t\\t\\t? (uint(0), amountOut)\\n\\t\\t\\t\\t: (amountOut, uint(0));\\n\\t\\t\\taddress to = i < path.length - 2\\n\\t\\t\\t\\t? ButterLibrary.pairFor(factory, output, path[i + 2])\\n\\t\\t\\t\\t: _to;\\n\\t\\t\\tIButterPair(ButterLibrary.pairFor(factory, input, output)).swap(\\n\\t\\t\\t\\tamount0Out,\\n\\t\\t\\t\\tamount1Out,\\n\\t\\t\\t\\tto,\\n\\t\\t\\t\\tnew bytes(0)\\n\\t\\t\\t);\\n\\t\\t}\\n\\t}\\n\\tfunction swapExactTokensForTokens(\\n\\t\\tuint amountIn,\\n\\t\\tuint amountOutMin,\\n\\t\\taddress[] calldata path,\\n\\t\\taddress to,\\n\\t\\tuint deadline\\n\\t)\\n\\t\\texternal\\n\\t\\tvirtual\\n\\t\\toverride\\n\\t\\tensure(deadline)\\n\\t\\treturns (uint[] memory amounts)\\n\\t{\\n\\t\\tamounts = ButterLibrary.getAmountsOut(factory, amountIn, path);\\n\\t\\trequire(\\n\\t\\t\\tamounts[amounts.length - 1] >= amountOutMin,\\n\\t\\t\\t\\\"ButterRouter: INSUFFICIENT_OUTPUT_AMOUNT\\\"\\n\\t\\t);\\n\\t\\tTransferHelper.safeTransferFrom(\\n\\t\\t\\tpath[0],\\n\\t\\t\\tmsg.sender,\\n\\t\\t\\tButterLibrary.pairFor(factory, path[0], path[1]),\\n\\t\\t\\tamounts[0]\\n\\t\\t);\\n\\t\\t_swap(amounts, path, to);\\n\\t}\\n\\t// function swapTokensForExactTokens(\\n\\t//     uint amountOut,\\n\\t//     uint amountInMax,\\n\\t//     address[] calldata path,\\n\\t//     address to,\\n\\t//     uint deadline\\n\\t// ) external virtual override ensure(deadline) returns (uint[] memory amounts) {\\n\\t//     amounts = ButterLibrary.getAmountsIn(factory, amountOut, path);\\n\\t//     require(amounts[0] <= amountInMax, 'ButterRouter: EXCESSIVE_INPUT_AMOUNT');\\n\\t//     TransferHelper.safeTransferFrom(\\n\\t//         path[0], msg.sender, ButterLibrary.pairFor(factory, path[0], path[1]), amounts[0]\\n\\t//     );\\n\\t//     _swap(amounts, path, to);\\n\\t// }\\n\\tfunction swapExactETHForTokens(\\n\\t\\tuint amountOutMin,\\n\\t\\taddress[] calldata path,\\n\\t\\taddress to,\\n\\t\\tuint deadline\\n\\t)\\n\\t\\texternal\\n\\t\\tpayable\\n\\t\\tvirtual\\n\\t\\toverride\\n\\t\\tensure(deadline)\\n\\t\\treturns (uint[] memory amounts)\\n\\t{\\n\\t\\trequire(path[0] == WETH, \\\"ButterRouter: INVALID_PATH\\\");\\n\\t\\tamounts = ButterLibrary.getAmountsOut(factory, msg.value, path);\\n\\t\\trequire(\\n\\t\\t\\tamounts[amounts.length - 1] >= amountOutMin,\\n\\t\\t\\t\\\"ButterRouter: INSUFFICIENT_OUTPUT_AMOUNT\\\"\\n\\t\\t);\\n\\t\\tIWETH(WETH).deposit{ value: amounts[0] }();\\n\\t\\tassert(\\n\\t\\t\\tIWETH(WETH).transfer(\\n\\t\\t\\t\\tButterLibrary.pairFor(factory, path[0], path[1]),\\n\\t\\t\\t\\tamounts[0]\\n\\t\\t\\t)\\n\\t\\t);\\n\\t\\t_swap(amounts, path, to);\\n\\t}\\n\\t// function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\n\\t//     external\\n\\t//     virtual\\n\\t//     override\\n\\t//     ensure(deadline)\\n\\t//     returns (uint[] memory amounts)\\n\\t// {\\n\\t//     require(path[path.length - 1] == WETH, 'ButterRouter: INVALID_PATH');\\n\\t//     amounts = ButterLibrary.getAmountsIn(factory, amountOut, path);\\n\\t//     require(amounts[0] <= amountInMax, 'ButterRouter: EXCESSIVE_INPUT_AMOUNT');\\n\\t//     TransferHelper.safeTransferFrom(\\n\\t//         path[0], msg.sender, ButterLibrary.pairFor(factory, path[0], path[1]), amounts[0]\\n\\t//     );\\n\\t//     _swap(amounts, path, address(this));\\n\\t//     IWETH(WETH).withdraw(amounts[amounts.length - 1]);\\n\\t//     TransferHelper.safeTransferETH(to, amounts[amounts.length - 1]);\\n\\t// }\\n\\tfunction swapExactTokensForETH(\\n\\t\\tuint amountIn,\\n\\t\\tuint amountOutMin,\\n\\t\\taddress[] calldata path,\\n\\t\\taddress to,\\n\\t\\tuint deadline\\n\\t)\\n\\t\\texternal\\n\\t\\tvirtual\\n\\t\\toverride\\n\\t\\tensure(deadline)\\n\\t\\treturns (uint[] memory amounts)\\n\\t{\\n\\t\\trequire(path[path.length - 1] == WETH, \\\"ButterRouter: INVALID_PATH\\\");\\n\\t\\tamounts = ButterLibrary.getAmountsOut(factory, amountIn, path);\\n\\t\\trequire(\\n\\t\\t\\tamounts[amounts.length - 1] >= amountOutMin,\\n\\t\\t\\t\\\"ButterRouter: INSUFFICIENT_OUTPUT_AMOUNT\\\"\\n\\t\\t);\\n\\t\\tTransferHelper.safeTransferFrom(\\n\\t\\t\\tpath[0],\\n\\t\\t\\tmsg.sender,\\n\\t\\t\\tButterLibrary.pairFor(factory, path[0], path[1]),\\n\\t\\t\\tamounts[0]\\n\\t\\t);\\n\\t\\t_swap(amounts, path, address(this));\\n\\t\\tIWETH(WETH).withdraw(amounts[amounts.length - 1]);\\n\\t\\tTransferHelper.safeTransferETH(to, amounts[amounts.length - 1]);\\n\\t}\\n\\t// function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\n\\t//     external\\n\\t//     virtual\\n\\t//     override\\n\\t//     payable\\n\\t//     ensure(deadline)\\n\\t//     returns (uint[] memory amounts)\\n\\t// {\\n\\t//     require(path[0] == WETH, 'ButterRouter: INVALID_PATH');\\n\\t//     amounts = ButterLibrary.getAmountsIn(factory, amountOut, path);\\n\\t//     require(amounts[0] <= msg.value, 'ButterRouter: EXCESSIVE_INPUT_AMOUNT');\\n\\t//     IWETH(WETH).deposit{value: amounts[0]}();\\n\\t//     assert(IWETH(WETH).transfer(ButterLibrary.pairFor(factory, path[0], path[1]), amounts[0]));\\n\\t//     _swap(amounts, path, to);\\n\\t//     // refund dust eth, if any\\n\\t//     if (msg.value > amounts[0]) TransferHelper.safeTransferETH(msg.sender, msg.value - amounts[0]);\\n\\t// }\\n\\n\\t// **** SWAP (supporting fee-on-transfer tokens) ****\\n\\t// requires the initial amount to have already been sent to the first pair\\n\\tfunction _swapSupportingFeeOnTransferTokens(\\n\\t\\taddress[] memory path,\\n\\t\\taddress _to\\n\\t) internal virtual {\\n\\t\\tfor (uint i; i < path.length - 1; i++) {\\n\\t\\t\\t(address input, address output) = (path[i], path[i + 1]);\\n\\t\\t\\t(address token0, ) = ButterLibrary.sortTokens(input, output);\\n\\t\\t\\tIButterPair pair = IButterPair(\\n\\t\\t\\t\\tButterLibrary.pairFor(factory, input, output)\\n\\t\\t\\t);\\n\\t\\t\\tuint amountInput;\\n\\t\\t\\tuint amountOutput;\\n\\t\\t\\t{\\n\\t\\t\\t\\t// scope to avoid stack too deep errors\\n\\t\\t\\t\\t(uint reserve0, uint reserve1, , , ) = pair.getReserves();\\n\\t\\t\\t\\t(uint reserveInput, uint reserveOutput) = input == token0\\n\\t\\t\\t\\t\\t? (reserve0, reserve1)\\n\\t\\t\\t\\t\\t: (reserve1, reserve0);\\n\\t\\t\\t\\tamountInput = IERC20(input).balanceOf(address(pair)).sub(\\n\\t\\t\\t\\t\\treserveInput\\n\\t\\t\\t\\t);\\n\\t\\t\\t\\tamountOutput = ButterLibrary.getAmountOut(\\n\\t\\t\\t\\t\\tamountInput,\\n\\t\\t\\t\\t\\treserveInput,\\n\\t\\t\\t\\t\\treserveOutput\\n\\t\\t\\t\\t);\\n\\t\\t\\t}\\n\\t\\t\\t(uint amount0Out, uint amount1Out) = input == token0\\n\\t\\t\\t\\t? (uint(0), amountOutput)\\n\\t\\t\\t\\t: (amountOutput, uint(0));\\n\\t\\t\\taddress to = i < path.length - 2\\n\\t\\t\\t\\t? ButterLibrary.pairFor(factory, output, path[i + 2])\\n\\t\\t\\t\\t: _to;\\n\\t\\t\\tpair.swap(amount0Out, amount1Out, to, new bytes(0));\\n\\t\\t}\\n\\t}\\n\\t// function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n\\t//     uint amountIn,\\n\\t//     uint amountOutMin,\\n\\t//     address[] calldata path,\\n\\t//     address to,\\n\\t//     uint deadline\\n\\t// ) external virtual override ensure(deadline) {\\n\\t//     TransferHelper.safeTransferFrom(\\n\\t//         path[0], msg.sender, ButterLibrary.pairFor(factory, path[0], path[1]), amountIn\\n\\t//     );\\n\\t//     uint balanceBefore = IERC20(path[path.length - 1]).balanceOf(to);\\n\\t//     _swapSupportingFeeOnTransferTokens(path, to);\\n\\t//     require(\\n\\t//         IERC20(path[path.length - 1]).balanceOf(to).sub(balanceBefore) >= amountOutMin,\\n\\t//         'ButterRouter: INSUFFICIENT_OUTPUT_AMOUNT'\\n\\t//     );\\n\\t// }\\n\\t// function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n\\t//     uint amountOutMin,\\n\\t//     address[] calldata path,\\n\\t//     address to,\\n\\t//     uint deadline\\n\\t// )\\n\\t//     external\\n\\t//     virtual\\n\\t//     override\\n\\t//     payable\\n\\t//     ensure(deadline)\\n\\t// {\\n\\t//     require(path[0] == WETH, 'ButterRouter: INVALID_PATH');\\n\\t//     uint amountIn = msg.value;\\n\\t//     IWETH(WETH).deposit{value: amountIn}();\\n\\t//     assert(IWETH(WETH).transfer(ButterLibrary.pairFor(factory, path[0], path[1]), amountIn));\\n\\t//     uint balanceBefore = IERC20(path[path.length - 1]).balanceOf(to);\\n\\t//     _swapSupportingFeeOnTransferTokens(path, to);\\n\\t//     require(\\n\\t//         IERC20(path[path.length - 1]).balanceOf(to).sub(balanceBefore) >= amountOutMin,\\n\\t//         'ButterRouter: INSUFFICIENT_OUTPUT_AMOUNT'\\n\\t//     );\\n\\t// }\\n\\t// function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n\\t//     uint amountIn,\\n\\t//     uint amountOutMin,\\n\\t//     address[] calldata path,\\n\\t//     address to,\\n\\t//     uint deadline\\n\\t// )\\n\\t//     external\\n\\t//     virtual\\n\\t//     override\\n\\t//     ensure(deadline)\\n\\t// {\\n\\t//     require(path[path.length - 1] == WETH, 'ButterRouter: INVALID_PATH');\\n\\t//     TransferHelper.safeTransferFrom(\\n\\t//         path[0], msg.sender, ButterLibrary.pairFor(factory, path[0], path[1]), amountIn\\n\\t//     );\\n\\t//     _swapSupportingFeeOnTransferTokens(path, address(this));\\n\\t//     uint amountOut = IERC20(WETH).balanceOf(address(this));\\n\\t//     require(amountOut >= amountOutMin, 'ButterRouter: INSUFFICIENT_OUTPUT_AMOUNT');\\n\\t//     IWETH(WETH).withdraw(amountOut);\\n\\t//     TransferHelper.safeTransferETH(to, amountOut);\\n\\t// }\\n\\n\\t// **** LIBRARY FUNCTIONS ****\\n\\tfunction quote(\\n\\t\\tuint amountA,\\n\\t\\tuint reserveA,\\n\\t\\tuint reserveB\\n\\t) public pure virtual override returns (uint amountB) {\\n\\t\\treturn ButterLibrary.quote(amountA, reserveA, reserveB);\\n\\t}\\n\\n\\tfunction getAmountOut(\\n\\t\\tuint amountIn,\\n\\t\\tuint reserveIn,\\n\\t\\tuint reserveOut\\n\\t) public pure virtual override returns (uint amountOut) {\\n\\t\\treturn ButterLibrary.getAmountOut(amountIn, reserveIn, reserveOut);\\n\\t}\\n\\n\\tfunction getAmountIn(\\n\\t\\tuint amountOut,\\n\\t\\tuint reserveIn,\\n\\t\\tuint reserveOut\\n\\t) public pure virtual override returns (uint amountIn) {\\n\\t\\treturn ButterLibrary.getAmountIn(amountOut, reserveIn, reserveOut);\\n\\t}\\n\\n\\tfunction getAmountsOut(\\n\\t\\tuint amountIn,\\n\\t\\taddress[] memory path\\n\\t) public view virtual override returns (uint[] memory amounts) {\\n\\t\\treturn ButterLibrary.getAmountsOut(factory, amountIn, path);\\n\\t}\\n\\n\\tfunction getAmountsIn(\\n\\t\\tuint amountOut,\\n\\t\\taddress[] memory path\\n\\t) public view virtual override returns (uint[] memory amounts) {\\n\\t\\treturn ButterLibrary.getAmountsIn(factory, amountOut, path);\\n\\t}\\n}\\n\",\"keccak256\":\"0xb261e8c0d71aaa6c0e025a2d27fe21ca3cc33dbcd414f156673ac7161364219e\"},\"contracts/interfaces/IButterERC20.sol\":{\"content\":\"pragma solidity >=0.5.0;\\n\\ninterface IButterERC20 {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external pure returns (string memory);\\n    function symbol() external pure returns (string memory);\\n    function decimals() external pure returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n    function nonces(address owner) external view returns (uint);\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n}\\n\",\"keccak256\":\"0x332c7b5b07c3268899ee975b9f378d3d96a500d3131276a5b24150446e713763\"},\"contracts/interfaces/IButterFactory.sol\":{\"content\":\"pragma solidity >=0.5.0;\\n\\ninterface IButterFactory {\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\\n\\n    function feeTo() external view returns (address);\\n    function feeToSetter() external view returns (address);\\n\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\n    function allPairs(uint) external view returns (address pair);\\n    function allPairsLength() external view returns (uint);\\n\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\n\\n    function setFeeTo(address) external;\\n    function setFeeToSetter(address) external;\\n}\\n\",\"keccak256\":\"0x8ec35f9d7357a7da1ed83e8c1b14d47cf68d058579ac9296a6545cc29b5ebe18\"},\"contracts/interfaces/IButterPair.sol\":{\"content\":\"pragma solidity >=0.5.0;\\n\\nimport \\\"./IButterERC20.sol\\\";\\ninterface IButterPair is IButterERC20 {\\n\\tevent Mint(address indexed sender, uint amount0, uint amount1);\\n\\tevent Burn(\\n\\t\\taddress indexed sender,\\n\\t\\tuint amount0,\\n\\t\\tuint amount1,\\n\\t\\taddress indexed to\\n\\t);\\n\\tevent SwapIntention(\\n\\t\\taddress indexed sender,\\n\\t\\tuint amount0In,\\n\\t\\tuint amount1In,\\n\\t\\taddress indexed to\\n\\t);\\n\\tevent Swap(\\n\\t\\taddress indexed sender,\\n\\t\\tuint amount0In,\\n\\t\\tuint amount1In,\\n\\t\\tuint amount0Out,\\n\\t\\tuint amount1Out,\\n\\t\\taddress indexed to\\n\\t);\\n\\tevent Sync(uint112 reserve0, uint112 reserve1);\\n\\n\\tfunction MINIMUM_LIQUIDITY() external pure returns (uint);\\n\\tfunction factory() external view returns (address);\\n\\tfunction token0() external view returns (address);\\n\\tfunction token1() external view returns (address);\\n\\tfunction getReserves()\\n\\t\\texternal\\n\\t\\tview\\n\\t\\treturns (\\n\\t\\t\\tuint112 reserve0,\\n\\t\\t\\tuint112 reserve1,\\n\\t\\t\\tuint112 _pendingReserve0,\\n\\t\\t\\tuint112 _pendingReserve1,\\n\\t\\t\\tuint32 blockTimestampLast\\n\\t\\t);\\n\\tfunction price0CumulativeLast() external view returns (uint);\\n\\tfunction price1CumulativeLast() external view returns (uint);\\n\\tfunction kLast() external view returns (uint);\\n\\n\\tfunction mint(address to) external returns (uint liquidity);\\n\\tfunction burn(address to) external returns (uint amount0, uint amount1);\\n\\tfunction swap(\\n\\t\\tuint amount0Out,\\n\\t\\tuint amount1Out,\\n\\t\\taddress to,\\n\\t\\tbytes calldata data\\n\\t) external;\\n\\tfunction skim(address to) external;\\n\\tfunction sync() external;\\n\\n\\tfunction initialize(address, address) external;\\n}\\n\",\"keccak256\":\"0x57e449c865e2341a8242b53de4da06d406db657c6c9f30ff502e400689225ad0\"},\"contracts/interfaces/IButterRouter01.sol\":{\"content\":\"pragma solidity >=0.6.2;\\n\\ninterface IButterRouter01 {\\n    function factory() external pure returns (address);\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETH(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountToken, uint amountETH);\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountToken, uint amountETH);\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    // function swapTokensForExactTokens(\\n    //     uint amountOut,\\n    //     uint amountInMax,\\n    //     address[] calldata path,\\n    //     address to,\\n    //     uint deadline\\n    // ) external returns (uint[] memory amounts);\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n    // function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\n    //     external\\n    //     returns (uint[] memory amounts);\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    // function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\n    //     external\\n    //     payable\\n    //     returns (uint[] memory amounts);\\n\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\n}\\n\",\"keccak256\":\"0xa7320bdc2a961233815f2c6f4e333ffdb9faaa69428e401a10256cc030f5e160\"},\"contracts/interfaces/IButterRouter02.sol\":{\"content\":\"pragma solidity >=0.6.2;\\n\\nimport './IButterRouter01.sol';\\n\\ninterface IButterRouter02 is IButterRouter01 {\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountETH);\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountETH);\\n\\n    // function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n    //     uint amountIn,\\n    //     uint amountOutMin,\\n    //     address[] calldata path,\\n    //     address to,\\n    //     uint deadline\\n    // ) external;\\n    // function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n    //     uint amountOutMin,\\n    //     address[] calldata path,\\n    //     address to,\\n    //     uint deadline\\n    // ) external payable;\\n    // function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n    //     uint amountIn,\\n    //     uint amountOutMin,\\n    //     address[] calldata path,\\n    //     address to,\\n    //     uint deadline\\n    // ) external;\\n}\\n\",\"keccak256\":\"0x89ac0610ee0206945ff3ae0067e53d56791df7153ad4d34b215665778bfbc4ed\"},\"contracts/interfaces/IERC20.sol\":{\"content\":\"pragma solidity >=0.5.0;\\n\\ninterface IERC20 {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external view returns (string memory);\\n    function symbol() external view returns (string memory);\\n    function decimals() external view returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n}\\n\",\"keccak256\":\"0x61db17aebc5d812c7002d15c1da954065e56abe49d64b14c034abe5604d70eb3\"},\"contracts/interfaces/IWETH.sol\":{\"content\":\"pragma solidity >=0.5.0;\\n\\ninterface IWETH {\\n    function deposit() external payable;\\n    function transfer(address to, uint value) external returns (bool);\\n    function withdraw(uint) external;\\n}\\n\",\"keccak256\":\"0xfc10758fd8dba790c39468dccd358cb7cef06ae7c4781832cc7aa76f91f167e6\"},\"contracts/libraries/ButterLibrary.sol\":{\"content\":\"pragma solidity >=0.5.0;\\n\\nimport \\\"../interfaces/IButterPair.sol\\\";\\n\\nimport \\\"./SafeMath.sol\\\";\\n\\nlibrary ButterLibrary {\\n\\tusing SafeMath for uint;\\n\\n\\t// returns sorted token addresses, used to handle return values from pairs sorted in this order\\n\\tfunction sortTokens(\\n\\t\\taddress tokenA,\\n\\t\\taddress tokenB\\n\\t) internal pure returns (address token0, address token1) {\\n\\t\\trequire(tokenA != tokenB, \\\"ButterLibrary: IDENTICAL_ADDRESSES\\\");\\n\\t\\t(token0, token1) = tokenA < tokenB\\n\\t\\t\\t? (tokenA, tokenB)\\n\\t\\t\\t: (tokenB, tokenA);\\n\\t\\trequire(token0 != address(0), \\\"ButterLibrary: ZERO_ADDRESS\\\");\\n\\t}\\n\\n\\t// calculates the CREATE2 address for a pair without making any external calls\\n\\tfunction pairFor(\\n\\t\\taddress factory,\\n\\t\\taddress tokenA,\\n\\t\\taddress tokenB\\n\\t) internal pure returns (address pair) {\\n\\t\\t(address token0, address token1) = sortTokens(tokenA, tokenB);\\n\\t\\tpair = address(\\n\\t\\t\\tuint(\\n\\t\\t\\t\\tkeccak256(\\n\\t\\t\\t\\t\\tabi.encodePacked(\\n\\t\\t\\t\\t\\t\\thex\\\"ff\\\",\\n\\t\\t\\t\\t\\t\\tfactory,\\n\\t\\t\\t\\t\\t\\tkeccak256(abi.encodePacked(token0, token1)),\\n\\t\\t\\t\\t\\t\\thex\\\"bd453c3b70eca359ba7be49a87c127fbd47c6ccf8208bb3159d50081c3d0aae4\\\" // init code hash\\n\\t\\t\\t\\t\\t)\\n\\t\\t\\t\\t)\\n\\t\\t\\t)\\n\\t\\t);\\n\\t}\\n\\n\\t// fetches and sorts the reserves for a pair\\n\\tfunction getReserves(\\n\\t\\taddress factory,\\n\\t\\taddress tokenA,\\n\\t\\taddress tokenB\\n\\t) internal view returns (uint reserveA, uint reserveB) {\\n\\t\\t(address token0, ) = sortTokens(tokenA, tokenB);\\n\\t\\t(uint reserve0, uint reserve1, , , ) = IButterPair(\\n\\t\\t\\tpairFor(factory, tokenA, tokenB)\\n\\t\\t).getReserves();\\n\\t\\t(reserveA, reserveB) = tokenA == token0\\n\\t\\t\\t? (reserve0, reserve1)\\n\\t\\t\\t: (reserve1, reserve0);\\n\\t}\\n\\n\\t// given some amount of an asset and pair reserves, returns an equivalent amount of the other asset\\n\\tfunction quote(\\n\\t\\tuint amountA,\\n\\t\\tuint reserveA,\\n\\t\\tuint reserveB\\n\\t) internal pure returns (uint amountB) {\\n\\t\\trequire(amountA > 0, \\\"ButterLibrary: INSUFFICIENT_AMOUNT\\\");\\n\\t\\trequire(\\n\\t\\t\\treserveA > 0 && reserveB > 0,\\n\\t\\t\\t\\\"ButterLibrary: INSUFFICIENT_LIQUIDITY\\\"\\n\\t\\t);\\n\\t\\tamountB = amountA.mul(reserveB) / reserveA;\\n\\t}\\n\\n\\t// given an input amount of an asset and pair reserves, returns the maximum output amount of the other asset\\n\\tfunction getAmountOut(\\n\\t\\tuint amountIn,\\n\\t\\tuint reserveIn,\\n\\t\\tuint reserveOut\\n\\t) internal pure returns (uint amountOut) {\\n\\t\\trequire(amountIn > 0, \\\"ButterLibrary: INSUFFICIENT_INPUT_AMOUNT\\\");\\n\\t\\trequire(\\n\\t\\t\\treserveIn > 0 && reserveOut > 0,\\n\\t\\t\\t\\\"ButterLibrary: INSUFFICIENT_LIQUIDITY\\\"\\n\\t\\t);\\n\\t\\tuint amountInWithFee = amountIn.mul(997);\\n\\t\\tuint numerator = amountInWithFee.mul(reserveOut);\\n\\t\\tuint denominator = reserveIn.mul(1000).add(amountInWithFee);\\n\\t\\tamountOut = numerator / denominator;\\n\\t}\\n\\n\\t// given an output amount of an asset and pair reserves, returns a required input amount of the other asset\\n\\tfunction getAmountIn(\\n\\t\\tuint amountOut,\\n\\t\\tuint reserveIn,\\n\\t\\tuint reserveOut\\n\\t) internal pure returns (uint amountIn) {\\n\\t\\trequire(amountOut > 0, \\\"ButterLibrary: INSUFFICIENT_OUTPUT_AMOUNT\\\");\\n\\t\\trequire(\\n\\t\\t\\treserveIn > 0 && reserveOut > 0,\\n\\t\\t\\t\\\"ButterLibrary: INSUFFICIENT_LIQUIDITY\\\"\\n\\t\\t);\\n\\t\\tuint numerator = reserveIn.mul(amountOut).mul(1000);\\n\\t\\tuint denominator = reserveOut.sub(amountOut).mul(997);\\n\\t\\tamountIn = (numerator / denominator).add(1);\\n\\t}\\n\\n\\t// performs chained getAmountOut calculations on any number of pairs\\n\\tfunction getAmountsOut(\\n\\t\\taddress factory,\\n\\t\\tuint amountIn,\\n\\t\\taddress[] memory path\\n\\t) internal view returns (uint[] memory amounts) {\\n\\t\\trequire(path.length >= 2, \\\"ButterLibrary: INVALID_PATH\\\");\\n\\t\\tamounts = new uint[](path.length);\\n\\t\\tamounts[0] = amountIn;\\n\\t\\tfor (uint i; i < path.length - 1; i++) {\\n\\t\\t\\t(uint reserveIn, uint reserveOut) = getReserves(\\n\\t\\t\\t\\tfactory,\\n\\t\\t\\t\\tpath[i],\\n\\t\\t\\t\\tpath[i + 1]\\n\\t\\t\\t);\\n\\t\\t\\tamounts[i + 1] = getAmountOut(amounts[i], reserveIn, reserveOut);\\n\\t\\t}\\n\\t}\\n\\n\\t// performs chained getAmountIn calculations on any number of pairs\\n\\tfunction getAmountsIn(\\n\\t\\taddress factory,\\n\\t\\tuint amountOut,\\n\\t\\taddress[] memory path\\n\\t) internal view returns (uint[] memory amounts) {\\n\\t\\trequire(path.length >= 2, \\\"ButterLibrary: INVALID_PATH\\\");\\n\\t\\tamounts = new uint[](path.length);\\n\\t\\tamounts[amounts.length - 1] = amountOut;\\n\\t\\tfor (uint i = path.length - 1; i > 0; i--) {\\n\\t\\t\\t(uint reserveIn, uint reserveOut) = getReserves(\\n\\t\\t\\t\\tfactory,\\n\\t\\t\\t\\tpath[i - 1],\\n\\t\\t\\t\\tpath[i]\\n\\t\\t\\t);\\n\\t\\t\\tamounts[i - 1] = getAmountIn(amounts[i], reserveIn, reserveOut);\\n\\t\\t}\\n\\t}\\n}\\n\",\"keccak256\":\"0x55d17fc3233f6dd1fea41e562c44a895cd8cb6526f35dfa2eba97da396633fc9\"},\"contracts/libraries/SafeMath.sol\":{\"content\":\"pragma solidity =0.6.6;\\n\\n// a library for performing overflow-safe math, courtesy of DappHub (https://github.com/dapphub/ds-math)\\n\\nlibrary SafeMath {\\n    function add(uint x, uint y) internal pure returns (uint z) {\\n        require((z = x + y) >= x, 'ds-math-add-overflow');\\n    }\\n\\n    function sub(uint x, uint y) internal pure returns (uint z) {\\n        require((z = x - y) <= x, 'ds-math-sub-underflow');\\n    }\\n\\n    function mul(uint x, uint y) internal pure returns (uint z) {\\n        require(y == 0 || (z = x * y) / y == x, 'ds-math-mul-overflow');\\n    }\\n}\\n\",\"keccak256\":\"0x27f0ea82f879b3b01387b583e6d9d0ec858dca3b22b0aad173f8fbda06e761e1\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "",
  "devdoc": {
    "methods": {}
  },
  "userdoc": {
    "methods": {}
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}